### YamlMime:Tutorial
title: Użyj interpolacji ciągów, aby utworzyć sformatowane ciągi
metadata:
  title: Interpolacja ciągów — C# Samouczek interaktywny
  description: W tym samouczku użyjesz przeglądarki, aby interaktywnie C# eksplorować funkcję interpolacji ciągów. Napiszesz C# kod i zobaczysz wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 460accc4f0877265a5a3d72ad3272502da9e5119
  ms.sourcegitcommit: 559259da2738a7b33a46c0130e51d336091c2097
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 10/22/2019
  ms.locfileid: "72774034"
items:
- durationInMinutes: 2
  content: >
    W tym samouczku przedstawiono sposób użycia [interpolacji ciągu](../../language-reference/tokens/interpolated.md) do wstawiania wartości w jednym ciągu. Dowiesz się również, jak kontrolować formatowanie tekstu ciągu wynikowego. Używasz przeglądarki do pisania i uruchamiania C# kodu i od razu można zobaczyć wyniki.
- title: Utwórz ciąg interpolowany
  durationInMinutes: 2
  content: >
    Uruchom następujący kod w oknie interaktywnym. W tym celu wpisz kod w oknie interaktywnym (Zastąp `<name>` nazwą) i wybierz pozycję **Uruchom**:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Po uruchomieniu kodu **dane wyjściowe** wyświetlają ciąg, który zawiera nazwę użytkownika w powitaniu. Argument ciągu wywołania metody <xref:System.Console.WriteLine%2A> jest *wyrażeniem ciągu interpolowanego*. Jest to rodzaj szablonu, który umożliwia konstruowanie pojedynczego ciągu (zwanego *ciągiem wynikowym*) z ciągu, który zawiera kod osadzony. Wyrażenia interpolowane ciągów są szczególnie przydatne do wstawiania wartości do ciągu lub łączenia (łączenie ze sobą) kilku ciągów.


    Powyższy przykład zawiera dwa elementy, które każde interpolowane wyrażenie ciągu musi zawierać:


    - Literał ciągu rozpoczynający się od znaku `$` przed znakiem cudzysłowu otwierającego. Między symbolem `$` i znakiem cudzysłowu nie mogą znajdować się spacje. (Jeśli chcesz zobaczyć, co się stanie, jeśli dołączysz jeden, Wstaw spację po znaku `$` w oknie interaktywnym i Uruchom zaktualizowany kod. W C# kompilatorze wystąpił "nieoczekiwany znak" $ "".)


    - Co najmniej jedno *wyrażenie interpolacji*. Wyrażenie interpolacji jest wskazywane przez otwierające i zamykające nawiasy klamrowe (`{` i `}`). Można umieścić dowolne C# Wyrażenie zwracające wartość (w tym `null`) wewnątrz nawiasów klamrowych.


    Wypróbujmy kilka przykładów interpolacji ciągów z innymi typami danych.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Uwzględnij różne typy danych
  durationInMinutes: 5
  content: >
    W poprzednim kroku użyto interpolacji ciągu do wstawienia jednego ciągu wewnątrz innego. Każde wyrażenie interpolacji, które jest częścią interpolowanego wyrażenia ciągu może być dowolnego typu danych, chociaż. Dołączmy wartości różnych wyrażeń typu danych w ciągu interpolowanym.


    W poniższym przykładzie najpierw zdefiniujemy [krotkę](../../tuples.md) , która ma `Name`, `Price` i `perPackage` członków. Uruchom następujący kod w oknie interaktywnym:


    ```csharp

    var item = (Name: "eggplant", Price: 1.99m, perPackage: 3);

    var date = DateTime.Now;

    Console.WriteLine($"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.");

    ```


    Należy zauważyć, że wyrażenie interpolacji `item.Price` w ciągu interpolowanym jest rozpoznawane jako tekst "1,99" w ciągu wynikowym. Dzieje się tak, ponieważ, gdy typ wyniku wyrażenia nie jest ciągiem, wynik jest rozpoznawany jako ciąg w następujący sposób:


    - Jeśli wyrażenie interpolacji szacuje się na `null`, używany jest pusty ciąg ("" lub <xref:System.String.Empty?displayProperty=nameWithType>).


    - Jeśli wyrażenie interpolacji nie jest szacowane do `null`, zazwyczaj wywoływana jest metoda `ToString` wyrażenia wynikowego.


    W danych wyjściowych tego przykładu Data jest zbyt dokładna (cena oberżyny nie zmienia się co sekundę), a wartość ceny nie wskazuje jednostki waluty. W następnym kroku dowiesz się, jak rozwiązać te problemy, kontrolując format wyników wyrażenia w postaci ciągu.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Sterowanie formatowaniem wyrażeń interpolacji
  durationInMinutes: 5
  content: >
    W poprzednim kroku wstawiono dwa niewłaściwie sformatowane ciągi do ciągu wynikowego. Jedna była wartością daty i godziny, dla której jest właściwa tylko Data. Druga cena była ceną, która nie wskazywała swojej jednostki waluty. Oba problemy są łatwe w obsłudze. Interpolacja ciągów pozwala określić *ciągi formatowania* , które kontrolują formatowanie poszczególnych typów. Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby uwzględnić ciągi formatu dla wyrażeń daty i ceny, jak pokazano w następującym wierszu:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    Ciąg formatu można określić, wykonując wyrażenie interpolacji z dwukropkiem (":") i ciągiem formatu. "d" to [standardowy ciąg formatu daty i godziny](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) , który reprezentuje format daty krótkiej. "C2" to [standardowy ciąg formatu liczbowego](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) , który reprezentuje liczbę jako wartość walutową z dwiema cyframi po przecinku dziesiętnym.


    Wiele typów w bibliotekach .NET obsługuje wstępnie zdefiniowany zestaw ciągów formatujących. Obejmują one wszystkie typy liczbowe i typy daty i godziny. Aby zapoznać się z pełną listą typów, które obsługują ciągi formatu, zobacz [ciągi formatowania i typy bibliotek klas .NET](../../../standard/base-types/formatting-types.md#format-strings-and-net-types) w [typach formatowania w artykule .NET](../../../standard/base-types/formatting-types.md) .


    Spróbuj zmodyfikować ciągi formatu w przykładzie, aby zobaczyć, w jaki sposób wpływają na formatowanie daty i godziny oraz wartości liczbowej. Zmień literę "d" w `{date:d}` na "t" (aby wyświetlić format godziny krótkiej), "y" (w celu wyświetlenia roku i miesiąca) oraz "RRRR" (aby wyświetlić rok jako liczbę czterocyfrową). Zmień wartość "C2" w `{price:C2}` na "e" (dla notacji wykładniczej) i "F3" (dla wartości liczbowej z trzema cyframi po przecinku dziesiętnym).


    Oprócz kontrolowania formatowania można również kontrolować szerokość pola i wyrównanie sformatowanych ciągów, które są uwzględnione w ciągu wynikowym. W następnym kroku dowiesz się, jak to zrobić.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Kontrolowanie szerokości pola i wyrównania wyrażeń interpolacji
  durationInMinutes: 6
  content: >
    Zwykle, gdy wynik interpolowanego wyrażenia ciągu jest sformatowany do ciągu, ten ciąg jest uwzględniany w ciągu wynikowym bez spacji wiodących i końcowych. Szczególnie podczas pracy z zestawem danych, możliwość kontrolowania szerokości pola i wyrównania tekstu pomaga utworzyć bardziej czytelny wynik. Aby to sprawdzić, uruchom następujący kod:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Nazwy elementów są wyrównane do lewej, a ich liczby są wyrównane do prawej. Wyrównanie należy określić przez dodanie przecinka (",") po wyrażeniu interpolacji i wyznaczenie *minimalnej* szerokości pola. Jeśli określona wartość jest liczbą dodatnią, pole jest wyrównane do prawej strony. Jeśli jest to liczba ujemna, pole jest wyrównane do lewej.


    Spróbuj usunąć znaki ujemne z `{"Item",-25}` i `{item.Key,-25}` kod i ponownie uruchomić przykład. Tym razem nazwy elementów są wyrównane do prawej.


    Można połączyć specyfikator wyrównania i ciąg formatu dla pojedynczego wyrażenia interpolacji. W tym celu należy określić wyrównania jako pierwsze, po którym następuje dwukropek i ciąg formatu. Wypróbuj następujący kod, który wyświetla trzy sformatowane ciągi ze zdefiniowanymi szerokościami pól:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Ukończono Interaktywny samouczek interpolacji ciągów. Możesz kliknąć poniższe **kolekcje w C# ** linku, aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie. Sekcja "następne kroki" umożliwia powrót do tych samouczków.


    Aby uzyskać więcej informacji, zobacz [Interpolacja ciągów](../../language-reference/tokens/interpolated.md).
