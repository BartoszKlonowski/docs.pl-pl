### YamlMime:Tutorial
title: <span data-ttu-id="a43e6-101">Konstruowania sformatowane ciągi za pomocą Interpolacja ciągów</span><span class="sxs-lookup"><span data-stu-id="a43e6-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: Interpolacja - ciągów C# interaktywnego samouczka
  description: W tym samouczku użyjesz przeglądarki do interakcyjne poznawanie funkcji interpolacji ciągu C#. Możesz pisać kod w języku C# i wyświetlić wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70d63f460ad2e67fe60cd8d5130e8ff22889d8be
  ms.sourcegitcommit: 96543603ae29bc05cecccb8667974d058af63b4a
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 05/24/2019
  ms.locfileid: "66195949"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="a43e6-105">W tym samouczku pokazano sposób użycia [Interpolacja ciągów](../../language-reference/tokens/interpolated.md) wstawiania wartości do pojedynczego ciągu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-105">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="a43e6-106">Poznasz również sposób kontrolowania tekstu formatowanie ciągu wynikowego.</span><span class="sxs-lookup"><span data-stu-id="a43e6-106">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="a43e6-107">Możesz użyć przeglądarki, aby pisać i uruchamiać C# kodu i mogą natychmiast zobaczyć wyniki.</span><span class="sxs-lookup"><span data-stu-id="a43e6-107">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="a43e6-108">Tworzenie ciągu interpolowanego</span><span class="sxs-lookup"><span data-stu-id="a43e6-108">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="a43e6-109">Uruchom następujący kod w oknie interaktywnym.</span><span class="sxs-lookup"><span data-stu-id="a43e6-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="a43e6-110">Aby to zrobić, należy wpisać kod w oknie interaktywnym (Zastąp `<name>` z Twoją nazwą) i wybierz **Uruchom**:</span><span class="sxs-lookup"><span data-stu-id="a43e6-110">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="a43e6-111">Po uruchomieniu kodu, **dane wyjściowe** wyświetla ciąg, z Twoim imieniem w powitaniu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-111">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="a43e6-112">Argument ciągu <xref:System.Console.WriteLine%2A> jest wywołanie metody *interpolowane wyrażenia ciągu*.</span><span class="sxs-lookup"><span data-stu-id="a43e6-112">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string expression*.</span></span> <span data-ttu-id="a43e6-113">Jest to rodzaj szablonu, który umożliwia skonstruowanie pojedynczego ciągu (o nazwie *ciągiem wynikowym*) z ciągu obejmującego osadzony kod.</span><span class="sxs-lookup"><span data-stu-id="a43e6-113">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="a43e6-114">Wyrażenia ciągu interpolowanego są szczególnie przydatne w przypadku wstawiania wartości do ciągu lub łączenia (łączenie) kilka ciągów.</span><span class="sxs-lookup"><span data-stu-id="a43e6-114">Interpolated string expressions are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="a43e6-115">W powyższym przykładzie zawiera dwa elementy, które każde wyrażenie ciągu interpolowanego musi mieć:</span><span class="sxs-lookup"><span data-stu-id="a43e6-115">The example above contains the two elements that every interpolated string expression must have:</span></span>


    - <span data-ttu-id="a43e6-116">Literał ciągu rozpoczynający się od `$` znak przed jego otwierającym znakiem cudzysłowu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-116">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="a43e6-117">Nie może być spacji między `$` symboli i znaku cudzysłowu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-117">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="a43e6-118">(Jeśli chcesz zobaczyć, co się stanie po wstawieniu odstępu, Wstaw go po `$` znak w oknie interaktywnym i uruchom zaktualizowany kod.</span><span class="sxs-lookup"><span data-stu-id="a43e6-118">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="a43e6-119">Kompilator języka C# zgłosi błąd "Nieoczekiwany znak '$'".)</span><span class="sxs-lookup"><span data-stu-id="a43e6-119">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="a43e6-120">Co najmniej jeden *wyrażeń interpolacji*.</span><span class="sxs-lookup"><span data-stu-id="a43e6-120">One or more *interpolation expressions*.</span></span> <span data-ttu-id="a43e6-121">Wyrażenie interpolacji jest wskazywane przez nawias klamrowy otwierający i zamykający (`{` i `}`).</span><span class="sxs-lookup"><span data-stu-id="a43e6-121">An interpolation expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="a43e6-122">Możesz umieścić dowolne C# wyrażenie zwracające wartość (w tym `null`) wewnątrz nawiasów klamrowych.</span><span class="sxs-lookup"><span data-stu-id="a43e6-122">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="a43e6-123">Wypróbujmy kilka dodatkowych przykładowych interpolacji ciągu z innymi typami danych.</span><span class="sxs-lookup"><span data-stu-id="a43e6-123">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="a43e6-124">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-124">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a43e6-125">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a43e6-125">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="a43e6-126">Uwzględnianie innych typów danych</span><span class="sxs-lookup"><span data-stu-id="a43e6-126">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"a43e6-127\">W poprzednim kroku Interpolacja ciągów jest używany do wstawienia jednego ciągu wewnątrz innego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-127\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"a43e6-128\">Każde wyrażenie interpolacji, który jest częścią wyrażenia ciągu interpolowanego może być dowolnego typu danych, mimo że.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-128\">Each interpolation expression that is part of an interpolated string expression can be of any data type, though.</span></span> <span data-ttu-id=\"a43e6-129\">Teraz zawierać wartości różnych wyrażeń typu danych w ciągu interpolowanym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-129\">Let's include values of various data type expressions in an interpolated string.</span></span>\n\n<span data-ttu-id=\"a43e6-130\">W poniższym przykładzie, najpierw należy zdefiniować [krotki](../../tuples.md) zawierający `Name`, `Price`, i `perPackage` elementów członkowskich.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-130\">In the following example, we first define a [tuple](../../tuples.md) that has `Name`, `Price`, and `perPackage` members.</span></span> <span data-ttu-id=\"a43e6-131\">Uruchom poniższy kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-131\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar item = (Name: \"eggplant\", Price: 1.99m, perPackage: 3);\nvar date = DateTime.Now;\nConsole.WriteLine($\"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.\");\n```\n\n<span data-ttu-id=\"a43e6-132\">Należy pamiętać, że wyrażenie interpolacji `item.Price` w ciągu interpolowanym jest rozpoznawany jako tekst \"1,99\" w ciągu wynikowym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-132\">Note that the interpolation expression `item.Price` in the interpolated string resolves to the text \"1.99\" in the result string.</span></span> <span data-ttu-id=\"a43e6-133\">To dlatego, gdy typ wyniku wyrażenia nie jest ciągiem, wynik jest tłumaczona na ciąg w następujący sposób:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-133\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"a43e6-134\">Jeśli wyrażenie interpolacji ma `null`, ciąg pusty (\"\", lub <xref:System.String.Empty?displayProperty=nameWithType>) jest używany.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-134\">If the interpolation expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"a43e6-135\">Jeśli wyrażenia interpolacji nie być `null`, zazwyczaj `ToString` zostanie wywołana metoda wynik wyrażenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-135\">If the interpolation expression doesn't evaluate to `null`, typically the `ToString` method of the result expression is called.</span></span> \n\n<span data-ttu-id=\"a43e6-136\">W danych wyjściowych z tego przykładu Data jest zbyt precyzyjna (cena eggplant nie zmienia się każda sekunda), a wartość ceny nie wskazuje jednostkę waluty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-136\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"a43e6-137\">W następnym kroku dowiesz się, jak rozwiązać te problemy, kontrolując format ciągów reprezentujących wyniki wyrażenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-137\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a43e6-138\">To środowisko kodowania online jest w trybie podglądu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-138\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a43e6-139\">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a43e6-139\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="a43e6-140">Kontrolowanie formatowania wyrażeń interpolacji</span><span class="sxs-lookup"><span data-stu-id="a43e6-140">Control the formatting of interpolation expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="a43e6-141">W poprzednim kroku zostały wstawione dwa nie najlepiej sformatowane ciągi, do ciągu wynikowego.</span><span class="sxs-lookup"><span data-stu-id="a43e6-141">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="a43e6-142">Jedna była wartość daty i godziny, dla którego tylko data powinna mieć zastosowanie.</span><span class="sxs-lookup"><span data-stu-id="a43e6-142">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="a43e6-143">Drugim była cena, która nie wskazywała waluty.</span><span class="sxs-lookup"><span data-stu-id="a43e6-143">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="a43e6-144">Zarówno w przypadku problemów są łatwe do adresu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-144">Both issues are easy to address.</span></span> <span data-ttu-id="a43e6-145">Interpolacja ciągów pozwala określić *ciągi formatujące* które kontrolują formatowanie poszczególnych typów.</span><span class="sxs-lookup"><span data-stu-id="a43e6-145">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="a43e6-146">Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby dołączyć ciągi formatu daty i ceny wyrażeń, jak pokazano w następującym wierszu:</span><span class="sxs-lookup"><span data-stu-id="a43e6-146">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    <span data-ttu-id="a43e6-147">Należy określić ciąg formatu wykonując wyrażenie interpolacji z dwukropkiem (":") i ciąg formatu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-147">You specify a format string by following the interpolation expression with a colon (":") and the format string.</span></span> <span data-ttu-id="a43e6-148">"d" jest [ciąg formatu standardowego daty i godziny](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) reprezentujący formatu daty krótkiej.</span><span class="sxs-lookup"><span data-stu-id="a43e6-148">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="a43e6-149">"C2" to [standardowy Ciąg formatujący](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) reprezentujący liczbę jako wartość waluty z dwoma cyframi po separatorze dziesiętnym.</span><span class="sxs-lookup"><span data-stu-id="a43e6-149">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="a43e6-150">Liczba typów w bibliotekach .NET obsługuje wstępnie zdefiniowany zestaw ciągów formatu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-150">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="a43e6-151">Dotyczy to wszystkich typów liczbowych i typów daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="a43e6-151">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="a43e6-152">Aby uzyskać pełną listę typów, które obsługują ciągi formatu, zobacz [ciągi formatu i typy biblioteki klas .NET](../../../standard/base-types/formatting-types.md#stringRef) w [typy formatowania na platformie .NET](../../../standard/base-types/formatting-types.md) artykułu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-152">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="a43e6-153">Spróbuj zmodyfikować ciągi formatu w przykładzie, aby zobaczyć, jak wpływają na formatowanie daty i godziny oraz wartości liczbowej.</span><span class="sxs-lookup"><span data-stu-id="a43e6-153">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="a43e6-154">Zmień "d" w `{date:d}` na "t" (Aby wyświetlić krótki format daty), "y" (Aby wyświetlić rok i miesiąc) oraz "yyyy" (Aby wyświetlać rok jako liczbę czterocyfrową).</span><span class="sxs-lookup"><span data-stu-id="a43e6-154">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="a43e6-155">Zmień "C2" w `{price:C2}` "e" (notacja wykładnicza) oraz "F3" (wartość liczbową z trzema cyframi po separatorze dziesiętnym).</span><span class="sxs-lookup"><span data-stu-id="a43e6-155">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="a43e6-156">Poza kontrolowaniem formatowania możesz też kontrolować szerokość pola i wyrównanie sformatowanego ciągów, które znajdują się w ciągu wynikowym.</span><span class="sxs-lookup"><span data-stu-id="a43e6-156">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="a43e6-157">W następnym kroku dowiesz się, jak to zrobić.</span><span class="sxs-lookup"><span data-stu-id="a43e6-157">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="a43e6-158">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-158">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a43e6-159">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a43e6-159">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="a43e6-160">Kontrolowanie szerokości pola i wyrównania wyrażeń interpolacji</span><span class="sxs-lookup"><span data-stu-id="a43e6-160">Control the field width and alignment of interpolation expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="a43e6-161">Zazwyczaj gdy wynikiem wyrażenia ciągu interpolowanego jest sformatowany ciąg, ciąg znajduje się w ciągu wynikowym bez spacji wiodących albo końcowych.</span><span class="sxs-lookup"><span data-stu-id="a43e6-161">Ordinarily, when the result of an interpolated string expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="a43e6-162">Szczególnie podczas pracy z zestawem danych, można kontrolować szerokość pola i wyrównanie tekstu pozwala tworzyć bardziej czytelny dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="a43e6-162">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="a43e6-163">Aby to zobaczyć, uruchom następujący kod:</span><span class="sxs-lookup"><span data-stu-id="a43e6-163">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="a43e6-164">Nazwy elementu są wyrównane do lewej, a ich ilości są wyrównane do prawej.</span><span class="sxs-lookup"><span data-stu-id="a43e6-164">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="a43e6-165">Wyrównanie określa się poprzez dodanie przecinka (",") po interpolacji wyrażeniu i określenie *minimalne* szerokości pola.</span><span class="sxs-lookup"><span data-stu-id="a43e6-165">You specify the alignment by adding a comma (",") after an interpolation expression and designating the *minimum* field width.</span></span> <span data-ttu-id="a43e6-166">Jeśli określona wartość jest liczbą dodatnią, pole jest wyrównany do prawej.</span><span class="sxs-lookup"><span data-stu-id="a43e6-166">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="a43e6-167">Jeśli jest liczbą ujemną, pole jest wyrównany do lewej.</span><span class="sxs-lookup"><span data-stu-id="a43e6-167">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="a43e6-168">Spróbuj usunąć znaki ujemne z `{"Item",-25}` i `{item.Key,-25}` kodu i uruchomić przykładowy kod ponownie.</span><span class="sxs-lookup"><span data-stu-id="a43e6-168">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="a43e6-169">Tym razem nazwy elementu są wyrównane do prawej.</span><span class="sxs-lookup"><span data-stu-id="a43e6-169">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="a43e6-170">Możesz połączyć specyfikator wyrównania i ciąg formatu interpolacji pojedynczego wyrażenia.</span><span class="sxs-lookup"><span data-stu-id="a43e6-170">You can combine an alignment specifier and a format string for a single interpolation expression.</span></span> <span data-ttu-id="a43e6-171">Aby to zrobić, określ wyrównanie najpierw następuje dwukropek i ciąg formatu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-171">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="a43e6-172">Wypróbuj poniższy kod, który wyświetla trzy sformatowane ciągi ze zdefiniowanymi szerokościami pól:</span><span class="sxs-lookup"><span data-stu-id="a43e6-172">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="a43e6-173">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="a43e6-173">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a43e6-174">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a43e6-174">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="a43e6-175">Interaktywny samouczek interpolacji ciągu został ukończony.</span><span class="sxs-lookup"><span data-stu-id="a43e6-175">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="a43e6-176">Możesz kliknąć pozycję \*\*kolekcje w programie C# \*\* poniższe łącze do uruchomienia interaktywnego samouczka dalej lub mogą odwiedzić [lokacji .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) można pobrać zestawu .NET Core SDK, Utwórz projekt na komputerze i Zachowaj kodowanie .</span><span class="sxs-lookup"><span data-stu-id="a43e6-176">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="a43e6-177">W kroku "Zachowaj Learning" łączy do tych samouczków.</span><span class="sxs-lookup"><span data-stu-id="a43e6-177">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="a43e6-178">Aby uzyskać więcej informacji, zobacz [Interpolacja ciągów](../../language-reference/tokens/interpolated.md).</span><span class="sxs-lookup"><span data-stu-id="a43e6-178">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
