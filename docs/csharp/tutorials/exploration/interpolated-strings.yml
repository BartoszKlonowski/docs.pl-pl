### YamlMime:Tutorial
title: <span data-ttu-id="3839f-101">Użyj interpolacji ciągów, aby utworzyć sformatowane ciągi</span><span class="sxs-lookup"><span data-stu-id="3839f-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: Interpolacja ciągów — C# Samouczek interaktywny
  description: W tym samouczku użyjesz przeglądarki, aby interaktywnie C# eksplorować funkcję interpolacji ciągów. Napiszesz C# kod i zobaczysz wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: eb4b1571b4d00d90034148f7b595f4499859ce4b
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850949"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="3839f-105">W tym samouczku przedstawiono sposób użycia [interpolacji ciągu](../../language-reference/tokens/interpolated.md) do wstawiania wartości w jednym ciągu.</span><span class="sxs-lookup"><span data-stu-id="3839f-105">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="3839f-106">Dowiesz się również, jak kontrolować formatowanie tekstu ciągu wynikowego.</span><span class="sxs-lookup"><span data-stu-id="3839f-106">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="3839f-107">Używasz przeglądarki do pisania i uruchamiania C# kodu i od razu można zobaczyć wyniki.</span><span class="sxs-lookup"><span data-stu-id="3839f-107">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="3839f-108">Utwórz ciąg interpolowany</span><span class="sxs-lookup"><span data-stu-id="3839f-108">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="3839f-109">Uruchom następujący kod w oknie interaktywnym.</span><span class="sxs-lookup"><span data-stu-id="3839f-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="3839f-110">W tym celu wpisz kod w oknie interaktywnym (Zamień `<name>` na nazwę) i wybierz pozycję **Uruchom**:</span><span class="sxs-lookup"><span data-stu-id="3839f-110">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="3839f-111">Po uruchomieniu kodu **dane wyjściowe** wyświetlają ciąg, który zawiera nazwę użytkownika w powitaniu.</span><span class="sxs-lookup"><span data-stu-id="3839f-111">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="3839f-112">Argument <xref:System.Console.WriteLine%2A> ciągu wywołania metody jest *wyrażeniem ciągu interpolowanego*.</span><span class="sxs-lookup"><span data-stu-id="3839f-112">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string expression*.</span></span> <span data-ttu-id="3839f-113">Jest to rodzaj szablonu, który umożliwia konstruowanie pojedynczego ciągu (zwanego *ciągiem wynikowym*) z ciągu, który zawiera kod osadzony.</span><span class="sxs-lookup"><span data-stu-id="3839f-113">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="3839f-114">Wyrażenia interpolowane ciągów są szczególnie przydatne do wstawiania wartości do ciągu lub łączenia (łączenie ze sobą) kilku ciągów.</span><span class="sxs-lookup"><span data-stu-id="3839f-114">Interpolated string expressions are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="3839f-115">Powyższy przykład zawiera dwa elementy, które każde interpolowane wyrażenie ciągu musi zawierać:</span><span class="sxs-lookup"><span data-stu-id="3839f-115">The example above contains the two elements that every interpolated string expression must have:</span></span>


    - <span data-ttu-id="3839f-116">Literał ciągu zaczynający się od `$` znaku przed znakiem cudzysłowu otwierającego.</span><span class="sxs-lookup"><span data-stu-id="3839f-116">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="3839f-117">Między `$` symbolem i znakiem cudzysłowu nie mogą znajdować się spacje.</span><span class="sxs-lookup"><span data-stu-id="3839f-117">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="3839f-118">(Jeśli chcesz zobaczyć, co się stanie, jeśli dołączysz jeden, Wstaw spację po `$` znaku w oknie interaktywnym i Uruchom zaktualizowany kod.</span><span class="sxs-lookup"><span data-stu-id="3839f-118">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="3839f-119">W C# kompilatorze wystąpił "nieoczekiwany znak" $ "".)</span><span class="sxs-lookup"><span data-stu-id="3839f-119">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="3839f-120">Co najmniej jedno *wyrażenie interpolacji*.</span><span class="sxs-lookup"><span data-stu-id="3839f-120">One or more *interpolation expressions*.</span></span> <span data-ttu-id="3839f-121">Wyrażenie interpolacji jest wskazywane przez otwierające i zamykające nawiasy`{` klamrowe (i `}`).</span><span class="sxs-lookup"><span data-stu-id="3839f-121">An interpolation expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="3839f-122">Można umieścić dowolne C# Wyrażenie zwracające wartość (w tym `null`) w nawiasach klamrowych.</span><span class="sxs-lookup"><span data-stu-id="3839f-122">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="3839f-123">Wypróbujmy kilka przykładów interpolacji ciągów z innymi typami danych.</span><span class="sxs-lookup"><span data-stu-id="3839f-123">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="3839f-124">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="3839f-124">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3839f-125">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="3839f-125">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="3839f-126">Uwzględnij różne typy danych</span><span class="sxs-lookup"><span data-stu-id="3839f-126">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"3839f-127\">W poprzednim kroku użyto interpolacji ciągu do wstawienia jednego ciągu wewnątrz innego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-127\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"3839f-128\">Każde wyrażenie interpolacji, które jest częścią interpolowanego wyrażenia ciągu może być dowolnego typu danych, chociaż.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-128\">Each interpolation expression that is part of an interpolated string expression can be of any data type, though.</span></span> <span data-ttu-id=\"3839f-129\">Dołączmy wartości różnych wyrażeń typu danych w ciągu interpolowanym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-129\">Let's include values of various data type expressions in an interpolated string.</span></span>\n\n<span data-ttu-id=\"3839f-130\">W poniższym przykładzie najpierw definiujemy [spójną krotkę](../../tuples.md) `Name`, która składa się `perPackage` z, `Price`i.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-130\">In the following example, we first define a [tuple](../../tuples.md) that has `Name`, `Price`, and `perPackage` members.</span></span> <span data-ttu-id=\"3839f-131\">Uruchom następujący kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-131\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar item = (Name: \"eggplant\", Price: 1.99m, perPackage: 3);\nvar date = DateTime.Now;\nConsole.WriteLine($\"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.\");\n```\n\n<span data-ttu-id=\"3839f-132\">Należy zauważyć, że wyrażenie `item.Price` interpolacji w ciągu interpolowanym jest rozpoznawane jako tekst \"1,99\" w ciągu wynikowym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-132\">Note that the interpolation expression `item.Price` in the interpolated string resolves to the text \"1.99\" in the result string.</span></span> <span data-ttu-id=\"3839f-133\">Dzieje się tak, ponieważ, gdy typ wyniku wyrażenia nie jest ciągiem, wynik jest rozpoznawany jako ciąg w następujący sposób:</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-133\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"3839f-134\">Jeśli wyrażenie interpolacji ma wartość `null`, jest używany pusty ciąg (\"\" lub <xref:System.String.Empty?displayProperty=nameWithType>).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-134\">If the interpolation expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"3839f-135\">Jeśli wyrażenie interpolacji nie jest szacowane do `null`, `ToString` zazwyczaj wywoływana jest metoda wyrażenia wynikowego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-135\">If the interpolation expression doesn't evaluate to `null`, typically the `ToString` method of the result expression is called.</span></span> \n\n<span data-ttu-id=\"3839f-136\">W danych wyjściowych tego przykładu Data jest zbyt dokładna (cena oberżyny nie zmienia się co sekundę), a wartość ceny nie wskazuje jednostki waluty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-136\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"3839f-137\">W następnym kroku dowiesz się, jak rozwiązać te problemy, kontrolując format wyników wyrażenia w postaci ciągu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-137\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"3839f-138\">To środowisko kodowania online jest w trybie podglądu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-138\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"3839f-139\">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"3839f-139\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="3839f-140">Sterowanie formatowaniem wyrażeń interpolacji</span><span class="sxs-lookup"><span data-stu-id="3839f-140">Control the formatting of interpolation expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="3839f-141">W poprzednim kroku wstawiono dwa niewłaściwie sformatowane ciągi do ciągu wynikowego.</span><span class="sxs-lookup"><span data-stu-id="3839f-141">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="3839f-142">Jedna była wartością daty i godziny, dla której jest właściwa tylko Data.</span><span class="sxs-lookup"><span data-stu-id="3839f-142">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="3839f-143">Druga cena była ceną, która nie wskazywała swojej jednostki waluty.</span><span class="sxs-lookup"><span data-stu-id="3839f-143">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="3839f-144">Oba problemy są łatwe w obsłudze.</span><span class="sxs-lookup"><span data-stu-id="3839f-144">Both issues are easy to address.</span></span> <span data-ttu-id="3839f-145">Interpolacja ciągów pozwala określić *ciągi formatowania* , które kontrolują formatowanie poszczególnych typów.</span><span class="sxs-lookup"><span data-stu-id="3839f-145">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="3839f-146">Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby uwzględnić ciągi formatu dla wyrażeń daty i ceny, jak pokazano w następującym wierszu:</span><span class="sxs-lookup"><span data-stu-id="3839f-146">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    <span data-ttu-id="3839f-147">Ciąg formatu można określić, wykonując wyrażenie interpolacji z dwukropkiem (":") i ciągiem formatu.</span><span class="sxs-lookup"><span data-stu-id="3839f-147">You specify a format string by following the interpolation expression with a colon (":") and the format string.</span></span> <span data-ttu-id="3839f-148">"d" to [standardowy ciąg formatu daty i godziny](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) , który reprezentuje format daty krótkiej.</span><span class="sxs-lookup"><span data-stu-id="3839f-148">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="3839f-149">"C2" to [standardowy ciąg formatu liczbowego](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) , który reprezentuje liczbę jako wartość walutową z dwiema cyframi po przecinku dziesiętnym.</span><span class="sxs-lookup"><span data-stu-id="3839f-149">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="3839f-150">Wiele typów w bibliotekach .NET obsługuje wstępnie zdefiniowany zestaw ciągów formatujących.</span><span class="sxs-lookup"><span data-stu-id="3839f-150">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="3839f-151">Obejmują one wszystkie typy liczbowe i typy daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="3839f-151">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="3839f-152">Aby zapoznać się z pełną listą typów, które obsługują ciągi formatu, zobacz [ciągi formatowania i typy bibliotek klas .NET](../../../standard/base-types/formatting-types.md#stringRef) w [typach formatowania w artykule .NET](../../../standard/base-types/formatting-types.md) .</span><span class="sxs-lookup"><span data-stu-id="3839f-152">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="3839f-153">Spróbuj zmodyfikować ciągi formatu w przykładzie, aby zobaczyć, w jaki sposób wpływają na formatowanie daty i godziny oraz wartości liczbowej.</span><span class="sxs-lookup"><span data-stu-id="3839f-153">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="3839f-154">Zmień literę "d" `{date:d}` w "t" (aby wyświetlić format godziny krótkiej), "y" (w celu wyświetlenia roku i miesiąca) i "RRRR" (aby wyświetlić rok jako liczbę czterocyfrową).</span><span class="sxs-lookup"><span data-stu-id="3839f-154">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="3839f-155">Zmień wartość "C2" w `{price:C2}` na "e" (dla notacji wykładniczej) i "F3" (w przypadku wartości liczbowej z trzema cyframi po przecinku dziesiętnym).</span><span class="sxs-lookup"><span data-stu-id="3839f-155">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="3839f-156">Oprócz kontrolowania formatowania można również kontrolować szerokość pola i wyrównanie sformatowanych ciągów, które są uwzględnione w ciągu wynikowym.</span><span class="sxs-lookup"><span data-stu-id="3839f-156">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="3839f-157">W następnym kroku dowiesz się, jak to zrobić.</span><span class="sxs-lookup"><span data-stu-id="3839f-157">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="3839f-158">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="3839f-158">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3839f-159">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="3839f-159">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="3839f-160">Kontrolowanie szerokości pola i wyrównania wyrażeń interpolacji</span><span class="sxs-lookup"><span data-stu-id="3839f-160">Control the field width and alignment of interpolation expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="3839f-161">Zwykle, gdy wynik interpolowanego wyrażenia ciągu jest sformatowany do ciągu, ten ciąg jest uwzględniany w ciągu wynikowym bez spacji wiodących i końcowych.</span><span class="sxs-lookup"><span data-stu-id="3839f-161">Ordinarily, when the result of an interpolated string expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="3839f-162">Szczególnie podczas pracy z zestawem danych, możliwość kontrolowania szerokości pola i wyrównania tekstu pomaga utworzyć bardziej czytelny wynik.</span><span class="sxs-lookup"><span data-stu-id="3839f-162">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="3839f-163">Aby to sprawdzić, uruchom następujący kod:</span><span class="sxs-lookup"><span data-stu-id="3839f-163">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="3839f-164">Nazwy elementów są wyrównane do lewej, a ich liczby są wyrównane do prawej.</span><span class="sxs-lookup"><span data-stu-id="3839f-164">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="3839f-165">Wyrównanie należy określić przez dodanie przecinka (",") po wyrażeniu interpolacji i wyznaczenie *minimalnej* szerokości pola.</span><span class="sxs-lookup"><span data-stu-id="3839f-165">You specify the alignment by adding a comma (",") after an interpolation expression and designating the *minimum* field width.</span></span> <span data-ttu-id="3839f-166">Jeśli określona wartość jest liczbą dodatnią, pole jest wyrównane do prawej strony.</span><span class="sxs-lookup"><span data-stu-id="3839f-166">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="3839f-167">Jeśli jest to liczba ujemna, pole jest wyrównane do lewej.</span><span class="sxs-lookup"><span data-stu-id="3839f-167">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="3839f-168">Spróbuj usunąć znaki ujemne z `{"Item",-25}` kodu i `{item.Key,-25}` i ponownie uruchomić przykład.</span><span class="sxs-lookup"><span data-stu-id="3839f-168">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="3839f-169">Tym razem nazwy elementów są wyrównane do prawej.</span><span class="sxs-lookup"><span data-stu-id="3839f-169">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="3839f-170">Można połączyć specyfikator wyrównania i ciąg formatu dla pojedynczego wyrażenia interpolacji.</span><span class="sxs-lookup"><span data-stu-id="3839f-170">You can combine an alignment specifier and a format string for a single interpolation expression.</span></span> <span data-ttu-id="3839f-171">W tym celu należy określić wyrównania jako pierwsze, po którym następuje dwukropek i ciąg formatu.</span><span class="sxs-lookup"><span data-stu-id="3839f-171">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="3839f-172">Wypróbuj następujący kod, który wyświetla trzy sformatowane ciągi ze zdefiniowanymi szerokościami pól:</span><span class="sxs-lookup"><span data-stu-id="3839f-172">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="3839f-173">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="3839f-173">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3839f-174">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="3839f-174">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="3839f-175">Ukończono Interaktywny samouczek interpolacji ciągów.</span><span class="sxs-lookup"><span data-stu-id="3839f-175">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="3839f-176">Możesz kliknąć poniższe \*\*kolekcje w C# \*\* linku, aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie.</span><span class="sxs-lookup"><span data-stu-id="3839f-176">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="3839f-177">Sekcja "następne kroki" umożliwia powrót do tych samouczków.</span><span class="sxs-lookup"><span data-stu-id="3839f-177">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="3839f-178">Aby uzyskać więcej informacji, zobacz [Interpolacja ciągów](../../language-reference/tokens/interpolated.md).</span><span class="sxs-lookup"><span data-stu-id="3839f-178">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
