### YamlMime:Tutorial
title: Konstruowania sformatowane ciągi za pomocą Interpolacja ciągów
metadata:
  title: Interpolacja - ciągów C# interaktywnego samouczka
  description: W tym samouczku użyjesz przeglądarki do interakcyjne poznawanie funkcji interpolacji ciągu C#. Możesz pisać kod w języku C# i wyświetlić wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70d63f460ad2e67fe60cd8d5130e8ff22889d8be
  ms.sourcegitcommit: 96543603ae29bc05cecccb8667974d058af63b4a
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 05/24/2019
  ms.locfileid: "66195949"
items:
- durationInMinutes: 2
  content: >
    W tym samouczku pokazano sposób użycia [Interpolacja ciągów](../../language-reference/tokens/interpolated.md) wstawiania wartości do pojedynczego ciągu. Poznasz również sposób kontrolowania tekstu formatowanie ciągu wynikowego. Możesz użyć przeglądarki, aby pisać i uruchamiać C# kodu i mogą natychmiast zobaczyć wyniki.
- title: Tworzenie ciągu interpolowanego
  durationInMinutes: 2
  content: >
    Uruchom następujący kod w oknie interaktywnym. Aby to zrobić, należy wpisać kod w oknie interaktywnym (Zastąp `<name>` z Twoją nazwą) i wybierz **Uruchom**:


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    Po uruchomieniu kodu, **dane wyjściowe** wyświetla ciąg, z Twoim imieniem w powitaniu. Argument ciągu <xref:System.Console.WriteLine%2A> jest wywołanie metody *interpolowane wyrażenia ciągu*. Jest to rodzaj szablonu, który umożliwia skonstruowanie pojedynczego ciągu (o nazwie *ciągiem wynikowym*) z ciągu obejmującego osadzony kod. Wyrażenia ciągu interpolowanego są szczególnie przydatne w przypadku wstawiania wartości do ciągu lub łączenia (łączenie) kilka ciągów.


    W powyższym przykładzie zawiera dwa elementy, które każde wyrażenie ciągu interpolowanego musi mieć:


    - Literał ciągu rozpoczynający się od `$` znak przed jego otwierającym znakiem cudzysłowu. Nie może być spacji między `$` symboli i znaku cudzysłowu. (Jeśli chcesz zobaczyć, co się stanie po wstawieniu odstępu, Wstaw go po `$` znak w oknie interaktywnym i uruchom zaktualizowany kod. Kompilator języka C# zgłosi błąd "Nieoczekiwany znak '$'".)


    - Co najmniej jeden *wyrażeń interpolacji*. Wyrażenie interpolacji jest wskazywane przez nawias klamrowy otwierający i zamykający (`{` i `}`). Możesz umieścić dowolne C# wyrażenie zwracające wartość (w tym `null`) wewnątrz nawiasów klamrowych.


    Wypróbujmy kilka dodatkowych przykładowych interpolacji ciągu z innymi typami danych.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Uwzględnianie innych typów danych
  durationInMinutes: 5
  content: "W poprzednim kroku Interpolacja ciągów jest używany do wstawienia jednego ciągu wewnątrz innego. Każde wyrażenie interpolacji, który jest częścią wyrażenia ciągu interpolowanego może być dowolnego typu danych, mimo że. Teraz zawierać wartości różnych wyrażeń typu danych w ciągu interpolowanym.\n\nW poniższym przykładzie, najpierw należy zdefiniować [krotki](../../tuples.md) zawierający `Name`, `Price`, i `perPackage` elementów członkowskich. Uruchom poniższy kod w oknie interaktywnym:\n\n```csharp\nvar item = (Name: \"eggplant\", Price: 1.99m, perPackage: 3);\nvar date = DateTime.Now;\nConsole.WriteLine($\"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.\");\n```\n\nNależy pamiętać, że wyrażenie interpolacji `item.Price` w ciągu interpolowanym jest rozpoznawany jako tekst \"1,99\" w ciągu wynikowym. To dlatego, gdy typ wyniku wyrażenia nie jest ciągiem, wynik jest tłumaczona na ciąg w następujący sposób:\n\n- Jeśli wyrażenie interpolacji ma `null`, ciąg pusty (\"\", lub <xref:System.String.Empty?displayProperty=nameWithType>) jest używany.\n\n- Jeśli wyrażenia interpolacji nie być `null`, zazwyczaj `ToString` zostanie wywołana metoda wynik wyrażenia. \n\nW danych wyjściowych z tego przykładu Data jest zbyt precyzyjna (cena eggplant nie zmienia się każda sekunda), a wartość ceny nie wskazuje jednostkę waluty. W następnym kroku dowiesz się, jak rozwiązać te problemy, kontrolując format ciągów reprezentujących wyniki wyrażenia.\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Kontrolowanie formatowania wyrażeń interpolacji
  durationInMinutes: 5
  content: >
    W poprzednim kroku zostały wstawione dwa nie najlepiej sformatowane ciągi, do ciągu wynikowego. Jedna była wartość daty i godziny, dla którego tylko data powinna mieć zastosowanie. Drugim była cena, która nie wskazywała waluty. Zarówno w przypadku problemów są łatwe do adresu. Interpolacja ciągów pozwala określić *ciągi formatujące* które kontrolują formatowanie poszczególnych typów. Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby dołączyć ciągi formatu daty i ceny wyrażeń, jak pokazano w następującym wierszu:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    Należy określić ciąg formatu wykonując wyrażenie interpolacji z dwukropkiem (":") i ciąg formatu. "d" jest [ciąg formatu standardowego daty i godziny](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) reprezentujący formatu daty krótkiej. "C2" to [standardowy Ciąg formatujący](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) reprezentujący liczbę jako wartość waluty z dwoma cyframi po separatorze dziesiętnym.


    Liczba typów w bibliotekach .NET obsługuje wstępnie zdefiniowany zestaw ciągów formatu. Dotyczy to wszystkich typów liczbowych i typów daty i godziny. Aby uzyskać pełną listę typów, które obsługują ciągi formatu, zobacz [ciągi formatu i typy biblioteki klas .NET](../../../standard/base-types/formatting-types.md#stringRef) w [typy formatowania na platformie .NET](../../../standard/base-types/formatting-types.md) artykułu.


    Spróbuj zmodyfikować ciągi formatu w przykładzie, aby zobaczyć, jak wpływają na formatowanie daty i godziny oraz wartości liczbowej. Zmień "d" w `{date:d}` na "t" (Aby wyświetlić krótki format daty), "y" (Aby wyświetlić rok i miesiąc) oraz "yyyy" (Aby wyświetlać rok jako liczbę czterocyfrową). Zmień "C2" w `{price:C2}` "e" (notacja wykładnicza) oraz "F3" (wartość liczbową z trzema cyframi po separatorze dziesiętnym).


    Poza kontrolowaniem formatowania możesz też kontrolować szerokość pola i wyrównanie sformatowanego ciągów, które znajdują się w ciągu wynikowym. W następnym kroku dowiesz się, jak to zrobić.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Kontrolowanie szerokości pola i wyrównania wyrażeń interpolacji
  durationInMinutes: 6
  content: >
    Zazwyczaj gdy wynikiem wyrażenia ciągu interpolowanego jest sformatowany ciąg, ciąg znajduje się w ciągu wynikowym bez spacji wiodących albo końcowych. Szczególnie podczas pracy z zestawem danych, można kontrolować szerokość pola i wyrównanie tekstu pozwala tworzyć bardziej czytelny dane wyjściowe. Aby to zobaczyć, uruchom następujący kod:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Nazwy elementu są wyrównane do lewej, a ich ilości są wyrównane do prawej. Wyrównanie określa się poprzez dodanie przecinka (",") po interpolacji wyrażeniu i określenie *minimalne* szerokości pola. Jeśli określona wartość jest liczbą dodatnią, pole jest wyrównany do prawej. Jeśli jest liczbą ujemną, pole jest wyrównany do lewej.


    Spróbuj usunąć znaki ujemne z `{"Item",-25}` i `{item.Key,-25}` kodu i uruchomić przykładowy kod ponownie. Tym razem nazwy elementu są wyrównane do prawej.


    Możesz połączyć specyfikator wyrównania i ciąg formatu interpolacji pojedynczego wyrażenia. Aby to zrobić, określ wyrównanie najpierw następuje dwukropek i ciąg formatu. Wypróbuj poniższy kod, który wyświetla trzy sformatowane ciągi ze zdefiniowanymi szerokościami pól:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Interaktywny samouczek interpolacji ciągu został ukończony. Możesz kliknąć pozycję **kolekcje w programie C# ** poniższe łącze do uruchomienia interaktywnego samouczka dalej lub mogą odwiedzić [lokacji .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) można pobrać zestawu .NET Core SDK, Utwórz projekt na komputerze i Zachowaj kodowanie . W kroku "Zachowaj Learning" łączy do tych samouczków.


    Aby uzyskać więcej informacji, zobacz [Interpolacja ciągów](../../language-reference/tokens/interpolated.md).
