### YamlMime:Tutorial
title: Eksplorowanie samouczka interaktywnego języka c# 6 — C#
metadata:
  title: Eksplorowanie języka C# 6 — Wypróbuj nowe funkcje w języku C# 6 interaktywnie przy użyciu przeglądarki
  description: W tym samouczku będziesz używać przeglądarki do interaktywnego eksplorowania języka C# 6. Poznasz nowe idiomy, których można używać z C# 6, które umożliwiają bardziej zwięzły i możliwy do odczytania kod.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  ms.topic: interactive-tutorial
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 12dca7f213fb8e448818b3f8dd54baf4ea2a7a20
  ms.sourcegitcommit: b59237ca4ec763969a0dd775a3f8f39f8c59fe24
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 10/12/2020
  ms.locfileid: "91955645"
items:
- durationInMinutes: 1
  content: >
    Ten samouczek umożliwia interaktywną Eksplorowanie języka C# 6 przy użyciu przeglądarki do pisania w języku C# i wyświetlanie wyników kompilowania i uruchamiania kodu. Zawiera szereg lekcji, które modyfikują wcześniejsze praktyki języka C#, aby używać nowszych, bardziej zwięzłych funkcji języka C# 6. Pozostała część tego artykułu zawiera omówienie każdej z tych funkcji z linkiem do eksplorowania każdej funkcji.
- title: Autowłaściwości tylko do odczytu Włącz typy tylko do odczytu
  durationInMinutes: 2
  content: "Dwa ulepszenia składni właściwości autoproperty ułatwiają korzystanie z funkcji autowłaściwości w większych miejscach: tylko do odczytu właściwości i inicjatory właściwości. Weź pod uwagę ten mały program:\n\n:::code source=\"snippets/csharp6-starter/Program.cs\" interactive=\"try-dotnet\":::\n    \n Przejdź do trybu koncentracji uwagi, skopiuj poprzedni kod do interaktywnego okna języka C#. Następnie wybierz pozycję *Uruchom* , aby zobaczyć, jak działa kod. `AllCaps` ma niepożądane skutki uboczne modyfikacji wartości właściwości wraz z zwróceniem ciągu z wielką literą. Autor `Person` klasy zamierzonych ciągów dla `FirstName` i `LastName` jest tylko do odczytu. W języku C# 6 można sprawić, że ten cel ma być oczywisty. Usuń `private set` z obu właściwości, aby utworzyć właściwość autotylko do odczytu. Wybierz pozycję *Uruchom* , aby zobaczyć, że kompilator plamuje dwie lokalizacje, w których `FirstName` `LastName` właściwości i są zmieniane, gdy nie powinny być. Można zmienić `AllCaps` metodę na następujący kod, aby naprawić błąd kompilatora:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nPrzy użyciu tej nowej składni kompilator gwarantuje, że właściwości są niezmienne.\n"
- title: Inicjuj pola pomocnicze dla właściwości autoproperties
  durationInMinutes: 1
  content: >
    Nowa składnia w języku C# 6 umożliwia korzystanie z inicjatorów dla właściwości autoproperties. Stają się one ważniejsze, ponieważ klasy rozszerzają nowe możliwości. Dodaj właściwość środkowej nazwy i nowy Konstruktor, który przyjmuje trzy ciągi do `Person` klasy:


    :::code source="snippets/csharp6-finished/Program.cs" id="MiddleName":::


    Przypisanie we `MiddleName` właściwości jest inicjatorem. Inicjuje pole zapasowe generowane przez kompilator dla nazwy środkowej.
- title: Składowe z wyrażeniem w treści
  durationInMinutes: 2
  content: >
    Elementy składowe z wyrażeniami zapewniają uproszczoną składnię dla uproszczonych metod. `Person`Klasa ma dwa wspaniałe kandydatów. Zapoznaj się z deklaracją `ToString` :


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Zastąp tę deklarację `ToString` następującym kodem:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    Spróbuj użyć `AllCaps` metody. Jest to niewielkie ulepszenie, ale w przypadku tworzenia znacznie bardziej czytelnego kodu, szczególnie w przypadku Transfer danych obiektów (DTO) i innych typów z minimalnym zachowaniem.
- title: Importowanie pojedynczej klasy
  durationInMinutes: 2
  content: >
    Jeśli wielokrotnie używasz metod statycznych jednej klasy w całym kodzie, łącznie z nazwą klasy za każdym razem, gdy zaciemnienie znaczenia kodu. `Person`Klasa obecnie importuje `System` przestrzeń nazw, chociaż tylko <xref:System.Console?displayProperty=nameWithType> jest używana. Zmodyfikuj `using` instrukcję w następujący sposób:


    :::code source="snippets/csharp6-finished/Program.cs" id="UsingStatic":::


    `static using`Instrukcja jest bardziej użyteczna w większych programach, które dzielą użycie pojedynczej klasy z wieloma metodami statycznymi, takimi jak [`string`](xref:System.String) Klasa lub <xref:System.Math?displayProperty=nameWithType> Klasa.
- title: Lepszy format ciągu
  durationInMinutes: 2
  content: >
    Język C# 6 zawiera nową składnię do redagowania ciągów na podstawie ciągów i osadzonych wyrażeń, które są oceniane w celu utworzenia innych wartości ciągu. Możesz zmienić `ToString` metody i, `AllCaps` Aby użyć następującej składni:


    :::code source="snippets/csharp6-finished/Program.cs" id="StringInterpolation":::


    Zamiast argumentów pozycyjnych między `{` i `}` , piszesz wyrażenia języka C# bezpośrednio. Można to zrobić w `Main` metodzie. Zastąp istniejący kod następującym:


    :::code source="snippets/csharp6-finished/Program.cs" id="InterpolationMain":::


    W tych wyrażeniach nie jest ograniczona do jednej zmiennej. Zacznijmy od nowego przykładu i zmodyfikujesz go, aby przedstawić inne wyrażenia, których można użyć do interpolacji ciągów. Wklej następujący kod do okna interaktywnego w `Main` metodzie:


    :::code source="snippets/csharp6-finished/Program.cs" id="Phrases":::

      Używa LINQ, dlatego należy dodać następującą instrukcję using na początku okna interaktywnego:

    ```csharp

    using System.Linq;

    ```


    Można usunąć zmienną lokalną `average` i wykonać to obliczenie jako część wyrażenia interpolowanego ciągu. Zastąp ostatnie dwa wiersze następującym:


    ```csharp

    WriteLine($"The average word length is: {wordLength.Average()}");

    ```


    W poprzednim przykładzie można stwierdzić, że dane wyjściowe dla `Average` mają więcej miejsc dziesiętnych niż chcesz. Składnia interpolacji ciągu obsługuje wszystkie ciągi formatu dostępne przy użyciu wcześniejszych metod formatowania. Ciąg formatu można określić wewnątrz nawiasów klamrowych. Dodaj `:` następujące wyrażenie do formatu:


    ```csharp

    WriteLine($"The average word length is: {wordLength.Average():F2}");

    ```
- title: Szybkie i łatwe sprawdzanie wartości null
  durationInMinutes: 2
  content: "`?.`Operator (null Conditional) ułatwia pisanie logiki, która `null` bezproblemowo uwzględnia wartości, bez dodatkowych `if` kontroli. Aby poznać funkcję, Zacznij od skopiowania następującego kodu do okna interaktywnego w celu jego wypróbowania:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nPowoduje to, że <xref:System.NullReferenceException> po uruchomieniu przykładu. Zmień `.` operatora dostępu do elementu członkowskiego na **operatora warunkowego null**:\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nPo tej zmianie nie ma danych wyjściowych. Wynika to z tego, że wynik `s?.Length` jest, `int?` gdy wynik `s.Length` jest `int` . W tym przykładzie `s?.Length` jest `null` . `?.`Zwraca wartość, `null` Jeśli jej lewy operand to `null` . `?.`Operator zwraca typ dopuszczający wartość null dla tego typu, dla obu typów wartości i niedopuszczających wartości null. Oprócz tego `?.` można użyć programu do `?[]` uzyskiwania dostępu do tablicy lub indeksatora. Wypróbuj poniższy kod w oknie interaktywnym:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Wielokrotne operatory warunkowe mogą być połączone w jedno wyrażenie. `null`Lewy operand tworzy `null` wynik, ułatwiając uniknięcie zagnieżdżonych klauzul if w celu uzyskania dostępu do elementów członkowskich. Na przykład Wypróbuj następujący kod w oknie interaktywnym:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue && hasMore.Value);\n ```\n\n Poprzedni przykład można uprościć za pomocą **operatora łączenia wartości null** , aby podać wartość domyślną:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n **Operator warunkowy o wartości null** pomaga napisać kod, który sprawia, że logika podstawowa jest wyczyszczona, a jednocześnie umożliwia bezproblemowe testowanie `null` wartości.\n"
- title: Filtry wyjątków
  durationInMinutes: 2
  content: "Filtry wyjątków umożliwiają przechwytywanie wyjątku na podstawie pewnego warunku. Typowym zastosowaniem jest utworzenie metody filtru, która rejestruje wyjątki, ale nigdy nie obsługuje tych wyjątków. Filtr wyjątku jest wyrażeniem logicznym, które jest, `true` gdy `catch` klauzula powinna zostać wykonana i `false` gdy wyjątek nie powinien być przechwytywany przez `catch` klauzulę. Wypróbuj następujący kod w oknie interaktywnym: rejestruje typ wyjątku i komunikat w konsoli programu. Zwraca wartość `false` , która wskazuje, że nie można obsłużyć wyjątku. Wypróbuj program w oknie interaktywnym.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\nPowinien zostać wyświetlony komunikat z `LogException` metody, a następnie domyślny komunikat o wyjątku. Tylko w przypadku eksperymentu Zmień `return false` instrukcję na `return true` i uruchom ją ponownie. Teraz wyjątek jest przechwytywany i program zostanie uruchomiony do ukończenia.\n\nPoza scenariuszami rejestrowania filtry wyjątków mogą być najbardziej przydatne, gdy właściwość wyjątku określa akcję do wykonania. Na przykład można przyjrzeć się wewnątrz elementu, <xref:System.AggregateException> Aby zobaczyć, jakie wyjątki są i podjąć odpowiednie działania w zależności od konkretnego wyjątku.\n"
- title: Korzystanie z nameof
  durationInMinutes: 2
  content: "`nameof`Operator zwraca nazwę dowolnej zmiennej, typu lub składowej typu. Wypróbuj następujący kod w oknie interaktywnym, aby zobaczyć, jak to działa:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nDane wyjściowe są zgodne z nazwą zmiennej lub typu. Nawet w przypadku podanej w pełni kwalifikowanej nazwy typu (takiej jak `System.String` ) `nameof` operator zwraca niekwalifikowaną nazwę. Ta funkcja jest najbardziej przydatna, gdy konieczne jest przekonwertowanie nazwy parametru lub właściwości na ciąg. Przykłady obejmują przechwytywanie nazwy argumentu do wyrzucania <xref:System.ArgumentNullException> lub <xref:System.ArgumentException> lub przechwytywania nazwy zmienionej właściwości podczas implementowania <xref:System.ComponentModel.INotifyPropertyChanged> . \n"
- title: Składnia inicjalizacji nowej obiektu
  durationInMinutes: 2
  content: "Składnia inicjatora obiektów obsługuje teraz inicjowanie *indeksatorów* oraz właściwości i pól. To dodanie ułatwia inicjowanie słowników i innych typów. Zacznij od słownika. Uruchom następujący kod w oknie interaktywnym:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nTa składnia, która ustawia wartość w indeksatorze, może być używana dla dowolnego typu, który ma dostępne metody dostępu set dla indeksatora.\n\nDruga zmiana ułatwia włączenie składni inicjatora dla typów, które reprezentują sekwencje. Inicjatory kolekcji mogą być używane dla każdej klasy, która implementuje <xref:System.Collections.IEnumerable> i ma publicznie dostępną `Add` metodę. Ta `Add` Metoda może teraz być metodą rozszerzenia. \n\nPoniższy przykład przedstawia jeden scenariusz dla tej składni. Tworzy `Path` klasę, która implementuje `IEnumerable<Point3D>` i ma metodę dodawania punktów przyjmujących trzy argumenty. `Extensions`Klasa tworzy dodatkową `Add` metodę, aby dodać nowy punkt z jego trzech składników. Ten przykład nie jest obecnie uruchamiany interaktywnie z powodu ograniczeń w środowisku.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: Przeprowadzono Eksplorowanie nowych funkcji w języku C# 6. Teraz Wypróbuj swoje aplikacje w swoich aplikacjach.
