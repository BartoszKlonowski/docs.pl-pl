### YamlMime:Tutorial
title: <span data-ttu-id="c46e5-101">Zapoznaj się z C# 6 - C# interaktywne C# samouczek</span><span class="sxs-lookup"><span data-stu-id="c46e5-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: Zapoznaj się z C# 6 — wypróbuj nowe funkcje w C# 6 interaktywnie przy użyciu przeglądarki
  description: W tym samouczku użyjesz przeglądarki, aby zapoznać się z C# 6 interaktywnie. Dowiesz się o nowych idiomy, za pomocą C# 6, które umożliwiają bardziej zwięzły, czytelny kod.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: c44d16e543f85852cee39106688fd3870dff7c4d
  ms.sourcegitcommit: 9b552addadfb57fab0b9e7852ed4f1f1b8a42f8e
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 04/23/2019
  ms.locfileid: "61706302"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="c46e5-105">W tym samouczku pozwala Ci eksplorować C# 6 interaktywnie przy użyciu przeglądarki do zapisania C# i wyświetlić wyniki kompilacji i uruchomienia kodu.</span><span class="sxs-lookup"><span data-stu-id="c46e5-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="c46e5-106">Przewodnik zawiera serię lekcji, które modyfikują wcześniej C# rozwiązania nowszymi, bardziej zwięzły widok C# 6 funkcji.</span><span class="sxs-lookup"><span data-stu-id="c46e5-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="c46e5-107">W pozostałej części tego artykułu zawiera omówienie każdego z tych funkcji, za pomocą łącza, aby zapoznać się z każdej funkcji.</span><span class="sxs-lookup"><span data-stu-id="c46e5-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="c46e5-108">Auto właściwości tylko do odczytu, Włącz typy tylko do odczytu</span><span class="sxs-lookup"><span data-stu-id="c46e5-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c46e5-109\">Dwa ulepszenia składni właściwości automatycznej ułatwiają korzystanie z auto właściwości w większej liczbie miejsc: inicjatory właściwości automatycznej i auto właściwości tylko do odczytu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"c46e5-110\">Należy wziąć pod uwagę to mały program:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"c46e5-111\">Tryb koncentracji uwagi, skopiuj powyższy kod do C# okna interaktywnego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"c46e5-112\">Następnie kliknij przycisk *Uruchom* aby zobaczyć, co dany kod realizuje.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"c46e5-113\">`AllCaps` ma niepożądanych efekt uboczny zmodyfikowania wartości właściwości wraz z zwracania ciągów wielkie litery.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"c46e5-114\">Autor `Person` klasy przeznaczone ciągi dla `FirstName` i `LastName` jako tylko do odczytu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"c46e5-115\">Za pomocą C# 6, możesz wprowadzić tej opcji Wyczyść.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"c46e5-116\">Usuń `private set` z obie te właściwości, aby utworzyć właściwość tylko do odczytu automatycznie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"c46e5-117\">Kliknij przycisk *Uruchom* aby zobaczyć, że kompilator spots dwie lokalizacje gdzie `FirstName` i `LastName` właściwości zostały zmienione, jeśli ich nie powinni być.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"c46e5-118\">Możesz zmienić `AllCaps` metody następujący kod, aby naprawić błąd kompilatora:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"c46e5-119\">Przy użyciu tej nowej składni, kompilator zapewnia, że właściwości są niezmienne.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="c46e5-120">Inicjowanie pola zapasowego dla właściwości automatyczne</span><span class="sxs-lookup"><span data-stu-id="c46e5-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"c46e5-121\">Nowej składni w C# 6 pozwala na użycie Inicjatory dla właściwości auto.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"c46e5-122\">Ten staje się bardziej ważne w miarę klasy rozwój nowych możliwości.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"c46e5-123\">Dodaj właściwość drugie imię i nowego konstruktora, który przyjmuje trzy ciągi do Twojej `Person` klasy:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"c46e5-124\">Przypisywanie na `MiddleName` właściwość ma inicjatora.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"c46e5-125\">Inicjuje pole generowane przez kompilator zapasowy drugie imię.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="c46e5-126">Składowe z wyrażeniem w treści</span><span class="sxs-lookup"><span data-stu-id="c46e5-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="c46e5-127">Elementy członkowskie z wyrażeniem Obejmij uproszczone metody składni lekkiej.</span><span class="sxs-lookup"><span data-stu-id="c46e5-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="c46e5-128">`Person` Klasa ma dwa doskonałymi kandydatami.</span><span class="sxs-lookup"><span data-stu-id="c46e5-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="c46e5-129">Przyjrzyj się deklaracji `ToString`:</span><span class="sxs-lookup"><span data-stu-id="c46e5-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="c46e5-130">Zastąp tej deklaracji `ToString` następującym kodem:</span><span class="sxs-lookup"><span data-stu-id="c46e5-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="c46e5-131">Spróbuj taki sam jak `AllCaps` metody.</span><span class="sxs-lookup"><span data-stu-id="c46e5-131">Try the same with the `AllCaps` method.</span></span> <span data-ttu-id="c46e5-132">Jest to mała poprawy jakości obsługi, ale go w rozsądny sposób powoduje utworzenie znacznie bardziej czytelny kod, szczególnie w przypadku obiektów transferu danych (dto) i innych typów, z zachowaniem minimalny.</span><span class="sxs-lookup"><span data-stu-id="c46e5-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="c46e5-133">Importowanie jednej klasy</span><span class="sxs-lookup"><span data-stu-id="c46e5-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c46e5-134\">Jeśli używasz metody statyczne jedną klasę wielokrotnie w całym kodzie, łącznie z nazwą klasy za każdym razem, ukrycie znaczenia kodu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"c46e5-135\">`Person` Klasy obecnie Importy `System` przestrzeni nazw, nawet jeśli jest to jedyna <xref:System.Console?displayProperty=nameWithType> jest używany.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"c46e5-136\">Modyfikowanie `using` instrukcji w następujący sposób:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"c46e5-137\">`static using` Oświadczenie staje się bardziej użyteczny w większych programów, które zwiększone użycie jednej klasy przy użyciu wielu metod statycznych, takich jak [ `string` ](xref:System.String) klasy lub <xref:System.Math?displayProperty=nameWithType> klasy.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="c46e5-138">Lepsze formatowanie ciągu</span><span class="sxs-lookup"><span data-stu-id="c46e5-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c46e5-139\">C# 6 zawiera nową składnię do redagowania ciągi znaków z ciągu i osadzone wyrażenia, które są obliczane, aby utworzyć inne wartości typu ciąg.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"c46e5-140\">Możesz zmienić `ToString` i `AllCaps` metody należy użyć następującej składni:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"c46e5-141\">Zamiast argumentów pozycyjnych między `{` i `}`, piszesz C# wyrażeń bezpośrednio.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"c46e5-142\">Można to zrobić w `Main` metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"c46e5-143\">Zastąp istniejący kod następujących czynności:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"c46e5-144\">Nie jesteś ograniczony do zmiennej w tych wyrażeniach.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"c46e5-145\">Teraz Rozpocznij nowy przykład i zmodyfikuj go, aby zademonstrować innych wyrażeń, których można używać z Interpolacja ciągów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"c46e5-146\">Wklej następujący kod w oknie interaktywnym w `Main` metody:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\n<span data-ttu-id=\"c46e5-147\">Można usunąć zmiennej lokalnej `average` i wykonać to obliczenie jako część wyrażenia ciągu interpolowanym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-147\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"c46e5-148\">Zamień na ostatnie dwa wiersze poniżej:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-148\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"c46e5-149\">Uruchomione w poprzednim przykładzie, może stwierdzisz, że dane wyjściowe `Average` ma więcej miejsc dziesiętnych niż chcesz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-149\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"c46e5-150\">Składnia interpolacji ciągu obsługuje format ciągów dostępne za pomocą metod formatowania wcześniej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-150\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"c46e5-151\">Należy określić ciąg formatu w nawiasach klamrowych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-151\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"c46e5-152\">Dodaj `:` następujące wyrażenie które ma format:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-152\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="c46e5-153">Szybkie i proste sprawdzanie wartości null</span><span class="sxs-lookup"><span data-stu-id="c46e5-153">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c46e5-154\">`?.` — Operator (warunkowe null) ułatwia pisania logiki, która przyjmuje `null` wartości pod uwagę bezproblemowo, bez dodatkowych `if` sprawdza.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-154\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"c46e5-155\">Aby zapoznać się z funkcji, należy uruchomić, kopiując następujący kod w oknie interaktywnym, aby spróbować zrobić to:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-155\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"c46e5-156\">Wyniku weryfikacji zgłasza wyjątek <xref:System.NullReferenceException> po uruchomieniu przykładu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-156\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"c46e5-157\">Zmiana `.` operator dostępu do elementu członkowskiego, który ma być **operatora warunkowego wartości null**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-157\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"c46e5-158\">Po tej zmianie nie ma żadnych danych wyjściowych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-158\">After this change, there's no output.</span></span> <span data-ttu-id=\"c46e5-159\">To dlatego, że wynik `s?.Length` jest `int?` gdy wynik `s.Length` jest `int`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-159\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"c46e5-160\">W tym przykładzie `s?.Length` jest `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-160\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"c46e5-161\">`?.` Zwraca `null` jeśli jego lewy argument operacji jest `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-161\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"c46e5-162\">Jeśli typ prawy operand jest typu wartości `?.` operator zwraca typ dopuszczający wartość null dla tego typu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-162\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"c46e5-163\">Oprócz `?.` można użyć `?[]` uzyskać dostęp do tablicy i indeksatora.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-163\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"c46e5-164\">Wypróbuj poniższy kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-164\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"c46e5-165\">Wiele operatorów warunkowych mogą być połączone w jedno wyrażenie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-165\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"c46e5-166\">A `null` left generuje operand `null` wynik, co ułatwia uniknąć zagnieżdżone, jeśli klauzul, aby dostęp do elementów członkowskich elementów członkowskich.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-166\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"c46e5-167\">Na przykład Wypróbuj następujący kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-167\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"c46e5-168\">Poprzedni przykład można uprościć za pomocą **null operatora łączącego** podania wartości domyślne:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-168\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"c46e5-169\">**Operatora warunkowego wartości null** pomaga napisać kod, który sprawia, że logika core wyczyść podczas bezproblemowo testowanie pod kątem `null` wartości.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-169\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="c46e5-170">Filtry wyjątków</span><span class="sxs-lookup"><span data-stu-id="c46e5-170">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c46e5-171\">Filtry wyjątków pozwalają przechwytywać wyjątek, na podstawie pewnych warunków.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-171\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"c46e5-172\">Typowym zastosowaniem jest tworzenie filter — metoda, która rejestruje wyjątki, ale nigdy nie obsługuje tych wyjątków.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-172\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"c46e5-173\">Filtra wyjątku jest wyrażenie logiczne, które ma `true` podczas `catch` klauzuli mają zostać wykonane, a `false` po wyjątku nie powinien zostać przechwycony przez `catch` klauzuli.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-173\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"c46e5-174\">Wypróbuj poniższy kod w oknie interaktywnym: Rejestruje typ wyjątku i komunikat do konsoli.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-174\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"c46e5-175\">Zwraca `false` co oznacza, że wyjątek nie mogą być obsługiwane.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-175\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"c46e5-176\">Wypróbuj program w oknie interaktywnym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-176\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"c46e5-177\">Powinien zostać wyświetlony komunikat z `LogException` metody, w którym następuje domyślny komunikat wyjątku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-177\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"c46e5-178\">Tak, aby poeksperymentować, zmień `return false` instrukcję, aby `return true` i uruchom ponownie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-178\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"c46e5-179\">Teraz zostanie przechwycony wyjątek i program zostaje ukończone.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-179\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"c46e5-180\">Poza scenariusze rejestrowania filtry wyjątków może być najbardziej przydatne, gdy właściwość wyjątku Określa, jaką akcję należy podjąć.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-180\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"c46e5-181\">Na przykład, można sprawdzić, czy wewnątrz <xref:System.AggregateException> aby zobaczyć, co wyjątki zawarte są i podjęcia niektórych odpowiednią akcję, zależnie od określonego wyjątku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-181\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="c46e5-182">Za pomocą nameof</span><span class="sxs-lookup"><span data-stu-id="c46e5-182">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c46e5-183\">`nameof` Operator zwraca nazwę dowolnej zmiennej, typu lub składowej typu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-183\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"c46e5-184\">Wypróbuj poniższy kod w oknie interaktywnym, aby zobaczyć, jak to działa:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-184\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"c46e5-185\">Dane wyjściowe pasuje do nazwy zmiennej lub typu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-185\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"c46e5-186\">Nawet jeśli podano w pełni kwalifikowana nazwa typu (takie jak `System.String`) `nameof` operator zwraca niekwalifikowana nazwa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-186\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"c46e5-187\">Ta funkcja jest najbardziej przydatna, gdy trzeba przekonwertować na ciąg nazwy parametru lub właściwość.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-187\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"c46e5-188\">Przykłady obejmują przechwytywania nazwę argumentu dla zgłaszania <xref:System.ArgumentNullException> lub <xref:System.ArgumentException>, lub aby przechwycić nazwą właściwości zmienione podczas implementowania <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-188\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="c46e5-189">Nowej składni inicjowania obiektu</span><span class="sxs-lookup"><span data-stu-id="c46e5-189">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"c46e5-190\">Inicjowania nowego obiektu umożliwia tworzenie metody, które ułatwiają inicjowanie słowników i innych typów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-190\">New object initialization enables you to create methods that make it easier to initialize dictionaries, and other types.</span></span> <span data-ttu-id=\"c46e5-191\">Rozpocząć budowanie słownika zawierającego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-191\">Start with a dictionary.</span></span> <span data-ttu-id=\"c46e5-192\">Uruchom poniższy kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-192\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"c46e5-193\">Możesz rozszerzyć, aby ta składnia do każdej klasy, która implementuje <xref:System.Collections.IEnumerable> i jest publicznie dostępny `Add` metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-193\">You can extend this syntax to any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span>  <span data-ttu-id=\"c46e5-194\">Wypróbuj poniższy przykład w oknie interaktywnym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-194\">Try the following sample in the interactive window.</span></span> <span data-ttu-id=\"c46e5-195\">Tworzy `Path` klasę, która implementuje `IEnumerable<Point3D>` i ma metodę, aby dodać punkty, która przyjmuje trzy argumenty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-195\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that takes three arguments.</span></span> <span data-ttu-id=\"c46e5-196\">Łączy ona również innych technik już przedstawione w tym samouczku, takich jak elementy członkowskie z wyrażeniem i Interpolacja ciągów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-196\">It also combines other techniques already demonstrated in this tutorial, such as expression-bodied members and string interpolation.</span></span> \n\n<span data-ttu-id=\"c46e5-197\">W `Main` metodę inicjowania ścieżkę, podając współrzędne punktów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-197\">In the `Main` method, you initialize a path by providing coordinates for the points.</span></span> <span data-ttu-id=\"c46e5-198\">Te punkty są dodawane do kolekcji za pomocą `Add` metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-198\">Those points are added to the collection through the `Add` method.</span></span>\n\n<span data-ttu-id=\"c46e5-199\">`Add` Metoda może być również metodą rozszerzenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-199\">The `Add` method can also be an extension method.</span></span> <span data-ttu-id=\"c46e5-200\">Poprzedni przykład można zaktualizować w następujący sposób.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-200\">You could update the preceding sample as follows.</span></span> <span data-ttu-id=\"c46e5-201\">W tym przykładzie nie kompilacji w środowisko interaktywne z powodu ograniczeń piaskownicy.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-201\">This sample won't compile in the interactive experience because of sandbox limitations.</span></span> <span data-ttu-id=\"c46e5-202\">Możesz wypróbować go na swojej maszynie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"c46e5-202\">You can try it on your own machine.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="c46e5-203">Ukończono eksploracji nowych funkcji w C# 6.</span><span class="sxs-lookup"><span data-stu-id="c46e5-203">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="c46e5-204">Teraz wypróbuj je w swoich aplikacjach.</span><span class="sxs-lookup"><span data-stu-id="c46e5-204">Now try them yourself in your applications.</span></span>
