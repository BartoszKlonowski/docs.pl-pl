### YamlMime:Tutorial
title: Poznaj C# 6 - C# interaktywny c# samouczek
metadata:
  title: Poznaj C# 6 - Wypróbuj nowe funkcje w języku C# 6 interaktywnie, korzystając z przeglądarki
  description: W tym samouczku użyjesz przeglądarki do interaktywnego eksplorowania języka C# 6. Poznasz nowe idiomy, których można używać z c# 6, które umożliwiają bardziej zwięzły i czytelny kod.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 6a1662c3ef4acdde19d6833a797768f45c723aca
  ms.sourcegitcommit: f87ad41b8e62622da126aa928f7640108c4eff98
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 04/07/2020
  ms.locfileid: "80805887"
items:
- durationInMinutes: 1
  content: >
    Ten samouczek umożliwia eksplorowanie języka C# 6 interaktywnie, za pomocą przeglądarki do pisania języka C# i zobacz wyniki kompilacji i uruchamiania kodu. Zawiera serię lekcji, które modyfikują wcześniejsze praktyki języka C#, aby użyć nowszych, bardziej zwięzłych funkcji języka C# 6. W dalszej części tego artykułu przedstawiono omówienie każdej z tych funkcji, z łączem do eksplorowania każdej funkcji.
- title: Właściwości auto-tylko do odczytu włączą typy tylko do odczytu
  durationInMinutes: 2
  content: "Dwa ulepszenia składni właściwości automatycznych ułatwiają korzystanie z właściwości automatycznych w większej liczbie miejsc: właściwości automatycznych tylko do odczytu i inicjatory właściwości automatycznych. Rozważmy ten mały program:\n\n[!code-csharp[Starter](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n Wprowadź tryb fokusu, skopiuj poprzedni kod do interaktywnego okna języka C#. Następnie wybierz przycisk *Uruchom,* aby zobaczyć, co robi kod. `AllCaps`ma niepożądany efekt uboczny modyfikowania wartości właściwości wraz z zwracaniem ciągu wielkich liter. Autor `Person` klasy przeznaczone ciągi dla `FirstName` `LastName` i do odczytu tylko do odczytu. Z C# 6, można dokonać tego zamiaru jasne. Usuń `private set` z obu właściwości, aby utworzyć właściwość auto tylko do odczytu. Wybierz *uruchom,* aby zobaczyć, że kompilator miejscu dwóch lokalizacji, `FirstName` gdzie i `LastName` właściwości są zmieniane, gdy nie powinny być. Można zmienić `AllCaps` metodę na następujący kod, aby naprawić błąd kompilatora:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nPrzy użyciu tej nowej składni kompilator zapewnia, że właściwości są niezmienne.\n"
- title: Inicjowanie pól zapasowych dla właściwości automatycznych
  durationInMinutes: 1
  content: "Nowa składnia w języku C# 6 umożliwia użycie inicjatorów dla właściwości auto. Staje się to ważniejsze, gdy klasy rozwijają nowe możliwości. Dodaj właściwość drugiej nazwy i nowy konstruktor, `Person` który przyjmuje trzy ciągi do klasy:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\nPrzypisanie we `MiddleName` właściwości jest inicjatorem. Inicjuje pole zapasowe wygenerowane przez kompilator dla drugiego imienia.\n"
- title: Składowe z wyrażeniem w treści
  durationInMinutes: 2
  content: >
    Elementy członkowskie zabudowane wyrażenia zapewniają uproszczoną składnię dla metod odciążonych. Klasa `Person` ma dwóch świetnych kandydatów. Spójrz na `ToString`deklarację:


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Zastąp `ToString` tę deklarację następującym kodem:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    Spróbuj tego samego `AllCaps` z metodą. Jest to niewielka poprawa, ale gdy jest używana mądrze, tworzy znacznie bardziej czytelny kod, szczególnie dla obiektów transferu danych (DTO) i innych typów z minimalnym zachowaniem.
- title: Importowanie jednej klasy
  durationInMinutes: 2
  content: "Jeśli wielokrotnie używasz jednej klasy' metody statyczne w całym kodzie, w tym nazwę klasy za każdym razem zasłania znaczenie kodu. Klasa `Person` aktualnie importuje `System` obszar nazw, <xref:System.Console?displayProperty=nameWithType> nawet jeśli jest używana tylko. Zmodyfikuj instrukcję w `using` następujący sposób:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\nInstrukcja `static using` staje się bardziej przydatne w większych programów, które szeroko korzystają [`string`](xref:System.String) z <xref:System.Math?displayProperty=nameWithType> jednej klasy z wielu metod statycznych, takich jak klasa lub klasy.\n"
- title: Lepszy format ciągu
  durationInMinutes: 2
  content: "C# 6 zawiera nową składnię tworzenia ciągów z ciągu i wyrażeń osadzonych, które są oceniane do produkcji innych wartości ciągu. Można zmienić `ToString` `AllCaps` metody i metody użycia tej składni:\n\n[!code-csharp[StringInterpolation](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\nZamiast argumentów pozycyjnych między `{` i `}`, można napisać wyrażenia C#. Można zrobić to samo `Main` w metodzie. Zastąp istniejący kod następującym:\n\n[!code-csharp[InterpolationMain](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\nNie jesteś ograniczony do pojedynczej zmiennej w tych wyrażeniach. Zacznijmy od nowego przykładu i zmodyfikujmy go, aby zademonstrować inne wyrażenia, których można użyć z interpolacją ciągów. Wklej następujący kod do interaktywnego `Main` okna w metodzie:\n\n[!code-csharp[Phrases](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \nKtóry używa LINQ, więc należy dodać następujące za pomocą instrukcji w górnej części okna interaktywnego:\n\n```csharp\nusing System.Linq;\n```\n\nMożna usunąć zmienną `average` lokalną i wykonać to obliczenie jako część interpolowanego wyrażenia ciągu. Zastąp ostatnie dwa wiersze następującymi:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\nUruchamianie poprzedniego przykładu, można stwierdzić, `Average` że dane wyjściowe dla ma więcej miejsc dziesiętnych niż chcesz. Składnia interpolacji ciągów obsługuje wszystkie ciągi formatu dostępne przy użyciu wcześniejszych metod formatowania. Można określić ciąg formatu wewnątrz nawiasów klamrowych. Dodaj `:` następujące wyrażenie do formatu:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: Szybkie i łatwe kontrole wartości null
  durationInMinutes: 2
  content: "`?.` Operator (null warunkowe) ułatwia pisanie logiki, `null` która uwzględnia wartości bezproblemowo, bez dodatkowych `if` kontroli. Aby eksplorować tę funkcję, zacznij od skopiowania następującego kodu do okna interaktywnego, aby spróbować:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nRzuca po <xref:System.NullReferenceException> uruchomieniu próbki. Zmień `.` operator dostępu elementu członkowskiego na **operator warunkowy zerowy:**\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nPo tej zmianie nie ma żadnych danych wyjściowych. To dlatego, że `s?.Length` wynik `int?` jest, gdy `s.Length` wynik `int`jest . W tym `s?.Length` przykładzie jest `null`. Zwraca `?.` `null` się, jeśli jego `null`lewy operand jest . Operator `?.` zwraca typ nullable dla tego typu, dla typów wartości i typów odwołań niepodjętych wartości null. Oprócz `?.` można użyć `?[]` do dostępu do tablicy lub indeksatora. Wypróbuj poniższy kod w oknie interaktywnym:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Wiele operatorów warunkowych można połączyć w jedno wyrażenie. `null` Lewy operand daje `null` wynik, dzięki czemu można uniknąć zagnieżdżonych, jeśli klauzule dostępu do członków. Na przykład spróbuj użyć następującego kodu w oknie interaktywnym:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n W poprzednim przykładzie można uprościć za pomocą **operatora scalania null,** aby zapewnić wartość domyślną:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n **Operator warunkowy null** pomaga napisać kod, który sprawia, że `null` logika core jasne podczas bezproblemowego testowania wartości.\n"
- title: Filtry wyjątków
  durationInMinutes: 2
  content: "Filtry wyjątków umożliwiają wychwytowanie wyjątku na podstawie pewnego warunku. Typowym zastosowaniem jest utworzenie metody filtrowania, która rejestruje wyjątki, ale nigdy nie obsługuje tych wyjątków. Filtr wyjątków jest wyrażenie `true` logiczne, `catch` czyli gdy klauzula powinna zostać wykonana, `false` `catch` a wyjątek nie powinien zostać przechwycony przez klauzulę. Spróbuj wykonać następujący kod w oknie interaktywnym: rejestruje typ wyjątku i komunikat do konsoli. Zwraca `false`, co wskazuje, że wyjątek nie może być obsługiwany. Wypróbuj program w oknie interaktywnym.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\nPowinien zostać wyświetlony komunikat `LogException` z metody, a następnie domyślny komunikat wyjątku. Aby eksperymentować, `return false` zmień `return true` instrukcję i uruchom to ponownie. Teraz wyjątek zostanie przechwycony i program zostanie ukończony.\n\nPoza scenariuszami rejestrowania filtry wyjątków mogą być najbardziej przydatne, gdy właściwość wyjątku określa, jakie działania należy podjąć. Na przykład można zajrzeć <xref:System.AggregateException> do środka, aby zobaczyć, jakie są zawarte wyjątki i podjąć odpowiednie działania w zależności od określonego wyjątku.\n"
- title: Używanie nazwy
  durationInMinutes: 2
  content: "Operator `nameof` zwraca nazwę dowolnej zmiennej, typu lub elementu członkowskiego typu. Spróbuj wykonać następujący kod w oknie interaktywnym, aby zobaczyć, jak to działa:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nDane wyjściowe są zgodne z nazwą zmiennej lub typu. Nawet po podaniu w pełni kwalifikowanej `nameof` nazwy typu (na `System.String`przykład) operator zwraca nazwę bez zastrzeżeń. Ta funkcja jest najbardziej przydatna, gdy trzeba przekonwertować nazwę parametru lub właściwości na ciąg. Przykłady obejmują przechwytywanie nazwy argumentu do <xref:System.ArgumentNullException> <xref:System.ArgumentException>rzucania lub , lub przechwytywanie nazwy <xref:System.ComponentModel.INotifyPropertyChanged>zmienionej właściwości podczas implementowania . \n"
- title: Składnia inicjowania nowego obiektu
  durationInMinutes: 2
  content: "Składnia inicjatora obiektu obsługuje teraz inicjowanie *indeksatorów,* a także właściwości i pól. Ten dodatek ułatwia inicjowanie słowników i innych typów. Zacznij od słownika. Uruchom następujący kod w oknie interaktywnym:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nTa składnia, która ustawia wartość w indeksatorze, może służyć do dowolnego typu, który ma dostępowy zestaw akcesorów w indeksatorze.\n\nDruga zmiana ułatwia włączenie składni inicjatora dla typów, które reprezentują sekwencje. Inicjatory kolekcji mogą być używane w <xref:System.Collections.IEnumerable> dowolnej klasie, `Add` która implementuje i ma publicznie dostępną metodę. Ta `Add` metoda może być teraz metodą rozszerzenia. \n\nW poniższym przykładzie przedstawiono jeden scenariusz dla tej składni. Tworzy `Path` klasę, która `IEnumerable<Point3D>` implementuje i ma metodę dodawania punktów, które przyjmują trzy argumenty. Klasa `Extensions` tworzy dodatkową `Add` metodę, aby dodać nowy punkt z jego trzech składników. Ten przykład nie jest obecnie uruchamiany interaktywnie z powodu ograniczeń w środowisku.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: Ukończono eksplorację nowych funkcji w języku C# 6. Teraz wypróbuj je samodzielnie w swoich aplikacjach.
