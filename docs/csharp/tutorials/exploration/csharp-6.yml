### YamlMime:Tutorial
title: Zapoznaj się z C# 6 - C# interaktywne C# samouczek
metadata:
  title: Zapoznaj się z C# 6 — wypróbuj nowe funkcje w C# 6 interaktywnie przy użyciu przeglądarki
  description: W tym samouczku użyjesz przeglądarki, aby zapoznać się z C# 6 interaktywnie. Dowiesz się o nowych idiomy, za pomocą C# 6, które umożliwiają bardziej zwięzły, czytelny kod.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: c44d16e543f85852cee39106688fd3870dff7c4d
  ms.sourcegitcommit: 9b552addadfb57fab0b9e7852ed4f1f1b8a42f8e
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 04/23/2019
  ms.locfileid: "61706302"
items:
- durationInMinutes: 1
  content: >
    W tym samouczku pozwala Ci eksplorować C# 6 interaktywnie przy użyciu przeglądarki do zapisania C# i wyświetlić wyniki kompilacji i uruchomienia kodu. Przewodnik zawiera serię lekcji, które modyfikują wcześniej C# rozwiązania nowszymi, bardziej zwięzły widok C# 6 funkcji. W pozostałej części tego artykułu zawiera omówienie każdego z tych funkcji, za pomocą łącza, aby zapoznać się z każdej funkcji.
- title: Auto właściwości tylko do odczytu, Włącz typy tylko do odczytu
  durationInMinutes: 2
  content: "Dwa ulepszenia składni właściwości automatycznej ułatwiają korzystanie z auto właściwości w większej liczbie miejsc: inicjatory właściwości automatycznej i auto właściwości tylko do odczytu. Należy wziąć pod uwagę to mały program:\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n Tryb koncentracji uwagi, skopiuj powyższy kod do C# okna interaktywnego. Następnie kliknij przycisk *Uruchom* aby zobaczyć, co dany kod realizuje. `AllCaps` ma niepożądanych efekt uboczny zmodyfikowania wartości właściwości wraz z zwracania ciągów wielkie litery. Autor `Person` klasy przeznaczone ciągi dla `FirstName` i `LastName` jako tylko do odczytu. Za pomocą C# 6, możesz wprowadzić tej opcji Wyczyść. Usuń `private set` z obie te właściwości, aby utworzyć właściwość tylko do odczytu automatycznie. Kliknij przycisk *Uruchom* aby zobaczyć, że kompilator spots dwie lokalizacje gdzie `FirstName` i `LastName` właściwości zostały zmienione, jeśli ich nie powinni być. Możesz zmienić `AllCaps` metody następujący kod, aby naprawić błąd kompilatora:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nPrzy użyciu tej nowej składni, kompilator zapewnia, że właściwości są niezmienne.\n"
- title: Inicjowanie pola zapasowego dla właściwości automatyczne
  durationInMinutes: 1
  content: "Nowej składni w C# 6 pozwala na użycie Inicjatory dla właściwości auto. Ten staje się bardziej ważne w miarę klasy rozwój nowych możliwości. Dodaj właściwość drugie imię i nowego konstruktora, który przyjmuje trzy ciągi do Twojej `Person` klasy:\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\nPrzypisywanie na `MiddleName` właściwość ma inicjatora. Inicjuje pole generowane przez kompilator zapasowy drugie imię.\n"
- title: Składowe z wyrażeniem w treści
  durationInMinutes: 2
  content: >
    Elementy członkowskie z wyrażeniem Obejmij uproszczone metody składni lekkiej. `Person` Klasa ma dwa doskonałymi kandydatami. Przyjrzyj się deklaracji `ToString`:


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Zastąp tej deklaracji `ToString` następującym kodem:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    Spróbuj taki sam jak `AllCaps` metody. Jest to mała poprawy jakości obsługi, ale go w rozsądny sposób powoduje utworzenie znacznie bardziej czytelny kod, szczególnie w przypadku obiektów transferu danych (dto) i innych typów, z zachowaniem minimalny.
- title: Importowanie jednej klasy
  durationInMinutes: 2
  content: "Jeśli używasz metody statyczne jedną klasę wielokrotnie w całym kodzie, łącznie z nazwą klasy za każdym razem, ukrycie znaczenia kodu. `Person` Klasy obecnie Importy `System` przestrzeni nazw, nawet jeśli jest to jedyna <xref:System.Console?displayProperty=nameWithType> jest używany. Modyfikowanie `using` instrukcji w następujący sposób:\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n`static using` Oświadczenie staje się bardziej użyteczny w większych programów, które zwiększone użycie jednej klasy przy użyciu wielu metod statycznych, takich jak [ `string` ](xref:System.String) klasy lub <xref:System.Math?displayProperty=nameWithType> klasy.\n"
- title: Lepsze formatowanie ciągu
  durationInMinutes: 2
  content: "C# 6 zawiera nową składnię do redagowania ciągi znaków z ciągu i osadzone wyrażenia, które są obliczane, aby utworzyć inne wartości typu ciąg. Możesz zmienić `ToString` i `AllCaps` metody należy użyć następującej składni:\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\nZamiast argumentów pozycyjnych między `{` i `}`, piszesz C# wyrażeń bezpośrednio. Można to zrobić w `Main` metody. Zastąp istniejący kod następujących czynności:\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\nNie jesteś ograniczony do zmiennej w tych wyrażeniach. Teraz Rozpocznij nowy przykład i zmodyfikuj go, aby zademonstrować innych wyrażeń, których można używać z Interpolacja ciągów. Wklej następujący kod w oknie interaktywnym w `Main` metody:\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\nMożna usunąć zmiennej lokalnej `average` i wykonać to obliczenie jako część wyrażenia ciągu interpolowanym. Zamień na ostatnie dwa wiersze poniżej:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\nUruchomione w poprzednim przykładzie, może stwierdzisz, że dane wyjściowe `Average` ma więcej miejsc dziesiętnych niż chcesz. Składnia interpolacji ciągu obsługuje format ciągów dostępne za pomocą metod formatowania wcześniej. Należy określić ciąg formatu w nawiasach klamrowych. Dodaj `:` następujące wyrażenie które ma format:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: Szybkie i proste sprawdzanie wartości null
  durationInMinutes: 2
  content: "`?.` — Operator (warunkowe null) ułatwia pisania logiki, która przyjmuje `null` wartości pod uwagę bezproblemowo, bez dodatkowych `if` sprawdza. Aby zapoznać się z funkcji, należy uruchomić, kopiując następujący kod w oknie interaktywnym, aby spróbować zrobić to:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nWyniku weryfikacji zgłasza wyjątek <xref:System.NullReferenceException> po uruchomieniu przykładu. Zmiana `.` operator dostępu do elementu członkowskiego, który ma być **operatora warunkowego wartości null**:\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nPo tej zmianie nie ma żadnych danych wyjściowych. To dlatego, że wynik `s?.Length` jest `int?` gdy wynik `s.Length` jest `int`. W tym przykładzie `s?.Length` jest `null`. `?.` Zwraca `null` jeśli jego lewy argument operacji jest `null`. Jeśli typ prawy operand jest typu wartości `?.` operator zwraca typ dopuszczający wartość null dla tego typu. Oprócz `?.` można użyć `?[]` uzyskać dostęp do tablicy i indeksatora. Wypróbuj poniższy kod w oknie interaktywnym:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Wiele operatorów warunkowych mogą być połączone w jedno wyrażenie. A `null` left generuje operand `null` wynik, co ułatwia uniknąć zagnieżdżone, jeśli klauzul, aby dostęp do elementów członkowskich elementów członkowskich. Na przykład Wypróbuj następujący kod w oknie interaktywnym:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n Poprzedni przykład można uprościć za pomocą **null operatora łączącego** podania wartości domyślne:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n **Operatora warunkowego wartości null** pomaga napisać kod, który sprawia, że logika core wyczyść podczas bezproblemowo testowanie pod kątem `null` wartości.\n"
- title: Filtry wyjątków
  durationInMinutes: 2
  content: "Filtry wyjątków pozwalają przechwytywać wyjątek, na podstawie pewnych warunków. Typowym zastosowaniem jest tworzenie filter — metoda, która rejestruje wyjątki, ale nigdy nie obsługuje tych wyjątków. Filtra wyjątku jest wyrażenie logiczne, które ma `true` podczas `catch` klauzuli mają zostać wykonane, a `false` po wyjątku nie powinien zostać przechwycony przez `catch` klauzuli. Wypróbuj poniższy kod w oknie interaktywnym: Rejestruje typ wyjątku i komunikat do konsoli. Zwraca `false` co oznacza, że wyjątek nie mogą być obsługiwane. Wypróbuj program w oknie interaktywnym.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\nPowinien zostać wyświetlony komunikat z `LogException` metody, w którym następuje domyślny komunikat wyjątku. Tak, aby poeksperymentować, zmień `return false` instrukcję, aby `return true` i uruchom ponownie. Teraz zostanie przechwycony wyjątek i program zostaje ukończone.\n\nPoza scenariusze rejestrowania filtry wyjątków może być najbardziej przydatne, gdy właściwość wyjątku Określa, jaką akcję należy podjąć. Na przykład, można sprawdzić, czy wewnątrz <xref:System.AggregateException> aby zobaczyć, co wyjątki zawarte są i podjęcia niektórych odpowiednią akcję, zależnie od określonego wyjątku.\n"
- title: Za pomocą nameof
  durationInMinutes: 2
  content: "`nameof` Operator zwraca nazwę dowolnej zmiennej, typu lub składowej typu. Wypróbuj poniższy kod w oknie interaktywnym, aby zobaczyć, jak to działa:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nDane wyjściowe pasuje do nazwy zmiennej lub typu. Nawet jeśli podano w pełni kwalifikowana nazwa typu (takie jak `System.String`) `nameof` operator zwraca niekwalifikowana nazwa. Ta funkcja jest najbardziej przydatna, gdy trzeba przekonwertować na ciąg nazwy parametru lub właściwość. Przykłady obejmują przechwytywania nazwę argumentu dla zgłaszania <xref:System.ArgumentNullException> lub <xref:System.ArgumentException>, lub aby przechwycić nazwą właściwości zmienione podczas implementowania <xref:System.ComponentModel.INotifyPropertyChanged>. \n"
- title: Nowej składni inicjowania obiektu
  durationInMinutes: 2
  content: "Inicjowania nowego obiektu umożliwia tworzenie metody, które ułatwiają inicjowanie słowników i innych typów. Rozpocząć budowanie słownika zawierającego. Uruchom poniższy kod w oknie interaktywnym:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nMożesz rozszerzyć, aby ta składnia do każdej klasy, która implementuje <xref:System.Collections.IEnumerable> i jest publicznie dostępny `Add` metody.  Wypróbuj poniższy przykład w oknie interaktywnym. Tworzy `Path` klasę, która implementuje `IEnumerable<Point3D>` i ma metodę, aby dodać punkty, która przyjmuje trzy argumenty. Łączy ona również innych technik już przedstawione w tym samouczku, takich jak elementy członkowskie z wyrażeniem i Interpolacja ciągów. \n\nW `Main` metodę inicjowania ścieżkę, podając współrzędne punktów. Te punkty są dodawane do kolekcji za pomocą `Add` metody.\n\n`Add` Metoda może być również metodą rozszerzenia. Poprzedni przykład można zaktualizować w następujący sposób. W tym przykładzie nie kompilacji w środowisko interaktywne z powodu ograniczeń piaskownicy. Możesz wypróbować go na swojej maszynie.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: Ukończono eksploracji nowych funkcji w C# 6. Teraz wypróbuj je w swoich aplikacjach.
