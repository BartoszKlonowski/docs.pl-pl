### YamlMime:Tutorial
title: <span data-ttu-id="69716-101">Eksploruj C# 6 — C# samouczek C# interaktywny</span><span class="sxs-lookup"><span data-stu-id="69716-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: Eksploruj C# 6 — Wypróbuj nowe funkcje w C# 6 interaktywnie, używając przeglądarki
  description: W tym samouczku będziesz używać przeglądarki do eksplorowania C# 6 interaktywnie. Poznasz nowe idiomy, których można używać z C# 6, które umożliwiają bardziej zwięzły i możliwy do odczytania kod.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f6f4b95b0c9afd9f70d4eba41500fc8a26606c78
  ms.sourcegitcommit: c70542d02736e082e8dac67dad922c19249a8893
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 09/05/2019
  ms.locfileid: "70374315"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="69716-105">Ten samouczek umożliwia Eksplorowanie C# 6 interaktywnie przy użyciu przeglądarki do pisania C# i wyświetlania wyników kompilowania i uruchamiania kodu.</span><span class="sxs-lookup"><span data-stu-id="69716-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="69716-106">Zawiera szereg lekcji, które modyfikują wcześniejsze C# praktyki, aby używać nowszych, bardziej zwięzłych C# funkcji.</span><span class="sxs-lookup"><span data-stu-id="69716-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="69716-107">Pozostała część tego artykułu zawiera omówienie każdej z tych funkcji z linkiem do eksplorowania każdej funkcji.</span><span class="sxs-lookup"><span data-stu-id="69716-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="69716-108">Autowłaściwości tylko do odczytu Włącz typy tylko do odczytu</span><span class="sxs-lookup"><span data-stu-id="69716-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"69716-109\">Dwa ulepszenia składni właściwości autoproperty ułatwiają korzystanie z funkcji autowłaściwości w większych miejscach: tylko do odczytu właściwości i inicjatory właściwości.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"69716-110\">Weź pod uwagę ten mały program:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"69716-111\">Wprowadź tryb koncentracji uwagi, skopiuj poprzedni kod do okna C# interaktywnego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"69716-112\">Następnie kliknij przycisk *Uruchom* , aby zobaczyć, jak działa kod.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"69716-113\">`AllCaps`ma niepożądane skutki uboczne modyfikacji wartości właściwości wraz z zwróceniem ciągu z wielką literą.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"69716-114\">Autor `Person` klasy zamierzonych ciągów dla `FirstName` i `LastName` jest tylko do odczytu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"69716-115\">W C# przypadku opcji 6 można sprawić, że to wymaganie ma zostać wyczyszczone.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"69716-116\">Usuń z `private set` obu właściwości, aby utworzyć właściwość autotylko do odczytu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"69716-117\">Kliknij przycisk *Uruchom* , aby zobaczyć, że kompilator plamuje dwie lokalizacje `FirstName` , `LastName` w których właściwości i są zmieniane, gdy nie powinny być.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"69716-118\">Można zmienić `AllCaps` metodę na następujący kod, aby naprawić błąd kompilatora:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"69716-119\">Przy użyciu tej nowej składni kompilator gwarantuje, że właściwości są niezmienne.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="69716-120">Inicjuj pola pomocnicze dla właściwości autoproperties</span><span class="sxs-lookup"><span data-stu-id="69716-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"69716-121\">Nowa składnia w C# 6 umożliwia korzystanie z inicjatorów dla właściwości autoproperties.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"69716-122\">Stają się one ważniejsze, ponieważ klasy rozszerzają nowe możliwości.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"69716-123\">Dodaj właściwość środkowej nazwy i nowy Konstruktor, który przyjmuje trzy ciągi do `Person` klasy:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"69716-124\">Przypisanie we `MiddleName` właściwości jest inicjatorem.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"69716-125\">Inicjuje pole zapasowe generowane przez kompilator dla nazwy środkowej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="69716-126">Składowe z wyrażeniem w treści</span><span class="sxs-lookup"><span data-stu-id="69716-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="69716-127">Elementy składowe z wyrażeniami zapewniają uproszczoną składnię dla uproszczonych metod.</span><span class="sxs-lookup"><span data-stu-id="69716-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="69716-128">`Person` Klasa ma dwa wspaniałe kandydatów.</span><span class="sxs-lookup"><span data-stu-id="69716-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="69716-129">Zapoznaj się z deklaracją `ToString`:</span><span class="sxs-lookup"><span data-stu-id="69716-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="69716-130">Zastąp tę deklarację `ToString` następującym kodem:</span><span class="sxs-lookup"><span data-stu-id="69716-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="69716-131">Spróbuj użyć `AllCaps` metody.</span><span class="sxs-lookup"><span data-stu-id="69716-131">Try the same with the `AllCaps` method.</span></span> <span data-ttu-id="69716-132">Jest to niewielkie ulepszenie, ale w przypadku tworzenia znacznie bardziej czytelnego kodu, szczególnie w przypadku Transfer danych obiektów (DTO) i innych typów z minimalnym zachowaniem.</span><span class="sxs-lookup"><span data-stu-id="69716-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="69716-133">Importowanie pojedynczej klasy</span><span class="sxs-lookup"><span data-stu-id="69716-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"69716-134\">Jeśli wielokrotnie używasz metod statycznych jednej klasy w całym kodzie, łącznie z nazwą klasy za każdym razem, gdy zaciemnienie znaczenia kodu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"69716-135\">Klasa obecnie importuje przestrzeń nazw, chociaż tylko <xref:System.Console?displayProperty=nameWithType> jest używana. `System` `Person`</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"69716-136\">`using` Zmodyfikuj instrukcję w następujący sposób:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"69716-137\">Instrukcja `static using` jest bardziej użyteczna w większych programach, które dzielą użycie pojedynczej klasy z wieloma metodami statycznymi, [`string`](xref:System.String) takimi jak <xref:System.Math?displayProperty=nameWithType> Klasa lub Klasa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="69716-138">Lepszy format ciągu</span><span class="sxs-lookup"><span data-stu-id="69716-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"69716-139\">C#6 zawiera nową składnię do redagowania ciągów z ciągu i osadzonych wyrażeń, które są oceniane w celu utworzenia innych wartości ciągu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"69716-140\">Możesz zmienić `ToString` metody i `AllCaps` , aby użyć następującej składni:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"69716-141\">Zamiast argumentów pozycyjnych między `{` i `}`pisz C# wyrażenia bezpośrednio.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"69716-142\">Można to zrobić w `Main` metodzie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"69716-143\">Zastąp istniejący kod następującym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"69716-144\">W tych wyrażeniach nie jest ograniczona do jednej zmiennej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"69716-145\">Zacznijmy od nowego przykładu i zmodyfikujesz go, aby przedstawić inne wyrażenia, których można użyć do interpolacji ciągów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"69716-146\">Wklej następujący kod do okna interaktywnego w `Main` metodzie:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\n<span data-ttu-id=\"69716-147\">Można usunąć zmienną `average` lokalną i wykonać to obliczenie jako część wyrażenia interpolowanego ciągu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-147\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"69716-148\">Zastąp ostatnie dwa wiersze następującym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-148\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"69716-149\">W poprzednim przykładzie można stwierdzić, że dane wyjściowe dla `Average` mają więcej miejsc dziesiętnych niż chcesz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-149\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"69716-150\">Składnia interpolacji ciągu obsługuje wszystkie ciągi formatu dostępne przy użyciu wcześniejszych metod formatowania.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-150\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"69716-151\">Ciąg formatu można określić wewnątrz nawiasów klamrowych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-151\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"69716-152\">`:` Dodaj następujące wyrażenie do formatu:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-152\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="69716-153">Szybkie i łatwe sprawdzanie wartości null</span><span class="sxs-lookup"><span data-stu-id="69716-153">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"69716-154\">Operator (null Conditional) ułatwia pisanie logiki, `null` która bezproblemowo uwzględnia wartości, bez dodatkowych `if` kontroli. `?.`</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-154\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"69716-155\">Aby poznać funkcję, Zacznij od skopiowania następującego kodu do okna interaktywnego w celu jego wypróbowania:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-155\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"69716-156\">Powoduje to, <xref:System.NullReferenceException> że po uruchomieniu przykładu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-156\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"69716-157\">Zmień operatora dostępu do elementuczłonkowskiegonaoperatorawarunkowegonull:`.` \\*\\*\\*\\*</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-157\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"69716-158\">Po tej zmianie nie ma danych wyjściowych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-158\">After this change, there's no output.</span></span> <span data-ttu-id=\"69716-159\">Wynika to z tego, że `s?.Length` wynik `int?` jest, gdy wynik `s.Length` jest `int`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-159\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"69716-160\">W tym przykładzie `s?.Length` jest `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-160\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"69716-161\">Zwraca `?.` wartość `null` , jeśli jej lewy operand `null`to.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-161\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"69716-162\">Jeśli typ argumentu po prawej stronie jest typem wartości, `?.` operator zwraca typ dopuszczający wartość null dla tego typu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-162\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"69716-163\">Oprócz `?.` tego można użyć `?[]` programu do uzyskiwania dostępu do tablicy lub indeksatora.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-163\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"69716-164\">Wypróbuj następujący kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-164\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"69716-165\">Wielokrotne operatory warunkowe mogą być połączone w jedno wyrażenie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-165\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"69716-166\">`null` Lewy operand`null` tworzy wynik, ułatwiając uniknięcie zagnieżdżonych klauzul if w celu uzyskania dostępu do elementów członkowskich.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-166\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"69716-167\">Na przykład Wypróbuj następujący kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-167\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"69716-168\">Poprzedni przykład można uprościć za pomocą **operatora łączenia wartości null** , aby podać wartość domyślną:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-168\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"69716-169\">**Operator warunkowy o wartości null** pomaga napisać kod, który sprawia, że logika podstawowa jest wyczyszczona, a jednocześnie umożliwia `null` bezproblemowe testowanie wartości.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-169\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="69716-170">Filtry wyjątków</span><span class="sxs-lookup"><span data-stu-id="69716-170">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"69716-171\">Filtry wyjątków umożliwiają przechwytywanie wyjątku na podstawie pewnego warunku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-171\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"69716-172\">Typowym zastosowaniem jest utworzenie metody filtru, która rejestruje wyjątki, ale nigdy nie obsługuje tych wyjątków.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-172\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"69716-173\">Filtr wyjątku jest wyrażeniem logicznym, które `true` jest, `catch` gdy klauzula powinna zostać wykonana i `false` gdy wyjątek nie powinien być przechwytywany przez `catch` klauzulę.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-173\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"69716-174\">Wypróbuj następujący kod w oknie interaktywnym: Rejestruje typ wyjątku i komunikat w konsoli programu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-174\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"69716-175\">Zwraca wartość `false` , która wskazuje, że nie można obsłużyć wyjątku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-175\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"69716-176\">Wypróbuj program w oknie interaktywnym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-176\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"69716-177\">Powinien zostać wyświetlony komunikat z `LogException` metody, a następnie domyślny komunikat o wyjątku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-177\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"69716-178\">Tylko w przypadku eksperymentu Zmień `return false` instrukcję na `return true` i uruchom ją ponownie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-178\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"69716-179\">Teraz wyjątek jest przechwytywany i program zostanie uruchomiony do ukończenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-179\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"69716-180\">Poza scenariuszami rejestrowania filtry wyjątków mogą być najbardziej przydatne, gdy właściwość wyjątku określa akcję do wykonania.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-180\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"69716-181\">Na przykład można przyjrzeć się wewnątrz elementu <xref:System.AggregateException> , aby zobaczyć, jakie wyjątki są i podjąć odpowiednie działania w zależności od konkretnego wyjątku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-181\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="69716-182">Korzystanie z nameof</span><span class="sxs-lookup"><span data-stu-id="69716-182">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"69716-183\">`nameof` Operator zwraca nazwę dowolnej zmiennej, typu lub składowej typu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-183\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"69716-184\">Wypróbuj następujący kod w oknie interaktywnym, aby zobaczyć, jak to działa:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-184\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"69716-185\">Dane wyjściowe są zgodne z nazwą zmiennej lub typu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-185\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"69716-186\">Nawet w przypadku podanej w pełni kwalifikowanej nazwy typu `System.String`(takiej `nameof` jak) operator zwraca niekwalifikowaną nazwę.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-186\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"69716-187\">Ta funkcja jest najbardziej przydatna, gdy konieczne jest przekonwertowanie nazwy parametru lub właściwości na ciąg.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-187\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"69716-188\">Przykłady obejmują przechwytywanie nazwy argumentu do wyrzucania <xref:System.ArgumentNullException> lub <xref:System.ArgumentException>lub przechwytywania nazwy zmienionej właściwości podczas implementowania <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-188\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="69716-189">Składnia inicjalizacji nowej obiektu</span><span class="sxs-lookup"><span data-stu-id="69716-189">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"69716-190\">Składnia inicjatora obiektów obsługuje teraz inicjowanie *indeksatorów* oraz właściwości i pól.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-190\">Object initializer syntax now supports initializing *indexers* as well as properties and fields.</span></span> <span data-ttu-id=\"69716-191\">To dodanie ułatwia inicjowanie słowników i innych typów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-191\">This addition makes it easier to initialize dictionaries and other types.</span></span> <span data-ttu-id=\"69716-192\">Zacznij od słownika.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-192\">Start with a dictionary.</span></span> <span data-ttu-id=\"69716-193\">Uruchom następujący kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-193\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"69716-194\">Ta składnia, która ustawia wartość w indeksatorze, może być używana dla dowolnego typu, który ma dostępne metody dostępu set dla indeksatora.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-194\">This syntax, which sets a value in an indexer, can be used for any type that has an accessible set accessor on an indexer.</span></span>\n\n<span data-ttu-id=\"69716-195\">Druga zmiana ułatwia włączenie składni inicjatora dla typów, które reprezentują sekwencje.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-195\">A second change makes it easier to enable initializer syntax for types that represent sequences.</span></span> <span data-ttu-id=\"69716-196\">Inicjatory kolekcji mogą być używane dla każdej klasy, która <xref:System.Collections.IEnumerable> implementuje i ma publicznie dostępną `Add` metodę.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-196\">Collection initializers can be used on any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span> <span data-ttu-id=\"69716-197\">Ta `Add` Metoda może teraz być metodą rozszerzenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-197\">That `Add` method can now be an extension method.</span></span> \n\n<span data-ttu-id=\"69716-198\">Poniższy przykład przedstawia jeden scenariusz dla tej składni.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-198\">The following example shows one scenario for this syntax.</span></span> <span data-ttu-id=\"69716-199\">Tworzy `Path` klasę, która implementuje `IEnumerable<Point3D>` i ma metodę dodawania punktów przyjmujących trzy argumenty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-199\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that take three arguments.</span></span> <span data-ttu-id=\"69716-200\">Klasa tworzy dodatkową `Add` metodę, aby dodać nowy punkt z jego trzech składników. `Extensions`</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-200\">The `Extensions` class creates an additional `Add` method to add a new point from its three components.</span></span> <span data-ttu-id=\"69716-201\">Ten przykład nie jest obecnie uruchamiany interaktywnie z powodu ograniczeń w środowisku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"69716-201\">This sample does not currently run interactively due to restrictions in the environment.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="69716-202">Poznasz nowe funkcje w C# 6.</span><span class="sxs-lookup"><span data-stu-id="69716-202">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="69716-203">Teraz Wypróbuj swoje aplikacje w swoich aplikacjach.</span><span class="sxs-lookup"><span data-stu-id="69716-203">Now try them yourself in your applications.</span></span>
