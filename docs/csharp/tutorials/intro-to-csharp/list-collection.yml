### YamlMime:Tutorial
title: Dowiedz się, jak zarządzać zbierania danych przy użyciu typu listy ogólnej
metadata:
  title: Kolekcje danych — wprowadzenie do C# interaktywnego samouczka
  description: W tym samouczku użyjesz przeglądarki, aby interaktywnie poznawać język C#. Możesz pisać kod w języku C# i wyświetlić wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 8ee13ec60f0504982c33ecc61940b731d320d2de
  ms.sourcegitcommit: c4e9d05644c9cb89de5ce6002723de107ea2e2c4
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 05/19/2019
  ms.locfileid: "65880560"
items:
- durationInMinutes: 1
  content: >
    W tym samouczku pokazano C# interaktywnie przy użyciu przeglądarki do zapisania C# kodu oraz zobaczyć wyniki kompilowania i uruchamiania kodu. Zawiera serię lekcji, które tworzenia, modyfikacji i Poznaj kolekcje i tablice.
- title: Tworzenie list
  durationInMinutes: 2
  content: >
    Uruchom następujący kod w oknie interaktywnym. Aby to zrobić, wpisz poniższy blok kodu w oknie interaktywnym (Zastąp `<name>` z Twoją nazwą) i kliknij przycisk **Uruchom** przycisku:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Została utworzona lista ciągów, dodane trzy nazwy do tej listy i drukowane nazwy w całości wielkimi. Używasz pojęcia, które wyjaśniono w samouczkach wcześniej pętli na liście.


    Kod, aby wyświetlić nazwy sprawia, że użycie [Interpolacja ciągów](../../language-reference/tokens/interpolated.md) funkcji. Kiedy należy poprzedzić `string` z `$` kodu C# można osadzić w deklaracji ciąg znaków. Rzeczywistego ciągu zastępuje wartość, która generuje kod C#. W tym przykładzie zastępuje `{name.ToUpper()}` przy użyciu nazwy, konwertowane na wielkie litery, ponieważ wywołujesz <xref:System.String.ToUpper%2A?displayProperty=nameWithType> metody.


    Możemy kontynuować Eksplorowanie.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Modyfikowanie zawartości listy
  durationInMinutes: 3
  content: >
    Kolekcja utworzona używa <xref:System.Collections.Generic.List%601> typu. Tego typu przechowuje elementów. Należy określić typ elementów między nawiasami.


    Jednym ważnym aspektem to <xref:System.Collections.Generic.List%601> typ jest, może rosnąć lub maleć, dzięki któremu można dodawać lub usuwać elementy. Wyniki można wyświetlić po po wyświetleniu jego zawartość, modyfikując zawartość. Dodaj następujący kod poniższego kodu, które zostały już wpisane (poniżej pętli, która wyświetla zawartość):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Dwa więcej nazw zostały dodane na końcu listy. Został również usunięty jeden także. Dane wyjściowe z tego bloku kodu pokazuje zawartość początkową, a następnie drukuje pusty wiersz i nowej zawartości.


    <xref:System.Collections.Generic.List%601> Umożliwia odwoływać się do pojedynczych elementów przez **indeksu** także. Dostęp przy użyciu elementów `[` i `]` tokenów. Dodaj następujący kod poniżej co już i wypróbuj:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Nie możesz uzyskać dostęp poza koniec listy. Możesz sprawdzić, jak długo używa listy <xref:System.Collections.Generic.List%601.Count%2A> właściwości. Dodaj następujący kod, aby spróbować zrobić to:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Kliknij przycisk **Uruchom** ponownie, aby zobaczyć wyniki. W języku C#, indeksów rozpoczynają się od 0, dlatego największego indeksu nieprawidłowy jest jednym mniejszy niż liczba elementów na liście.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Wyszukiwanie i sortowanie list
  durationInMinutes: 5
  content: >
    Nasze przykłady za pomocą list stosunkowo mały, ale aplikacje często może utworzyć listy o wiele więcej elementów, czasami numerowania w tysiącach. Aby znaleźć elementy w tych kolekcjach większe, musisz wyszukiwania na liście dla różnych elementów. <xref:System.Collections.Generic.List%601.IndexOf%2A> Metoda wyszukuje element i zwraca indeks elementu. Wypróbuj ją, aby zobaczyć, jak to działa.  Dodaj następujący kod poniżej co napisanych do tej pory:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Być może nie wiesz, czy element jest na liście, dlatego należy zawsze sprawdzić, wskaźnik zwracany przez <xref:System.Collections.Generic.List%601.IndexOf%2A>. Jeśli jest to wartość -1, element nie został znaleziony.


    Można również sortować elementy na liście. <xref:System.Collections.Generic.List%601.Sort%2A> Metoda sortuje wszystkie elementy na liście w kolejności ich normalne (alfabetycznie w przypadku ciągów znaków). Dodaj następujący kod, a następnie ponownie uruchom:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Listę innych typów
  durationInMinutes: 5
  content: >
    Wcześniej użyto `string` typu na listach do tej pory. Upewnijmy się <xref:System.Collections.Generic.List%601> przy użyciu innego typu. Utwórzmy zbioru liczb. Usuń kod, który napiszesz do tej pory i zastąp go następującym kodem:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Który tworzy listę liczb całkowitych i ustawia pierwszych dwóch liczb całkowitych na wartości 1. *Sekwencji Fibonacci*, sekwencji liczb, rozpoczyna się od dwóch wartości 1. Każdy kolejny numer Fibonacci zostanie znaleziony, wykonując sumie poprzednich dwóch liczb. Dodaj następujący kod:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Naciśnij klawisz **Uruchom** aby zobaczyć wyniki.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Wyzwanie
  durationInMinutes: 10
  content: >
    Zobacz, można umieścić ze sobą pewne pojęcia z tego i starszych wersji lekcje. Rozwiń węzeł, na jakie dołączeniu do tej pory z międzynarodowymi numerami identyfikującymi Fibonacci. Wypróbuj i napisać kod, aby wygenerować pierwszych 20 cyfr w sekwencji. (Wskazówka 20 numer Fibonacci jest 6765).


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Ukończenie wyzwania
  durationInMinutes: 3
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Z każdą iteracją pętli tworzenia ostatnich dwóch liczb całkowitych na liście sumowanie je, a następnie dodanie wartości do listy. Pętla powtarza się, aż 20 elementów zostały dodane do listy.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Interaktywny samouczek dotyczący listy został ukończony. Jest ostateczny wprowadzenie do C# interaktywnego samouczka. Możesz odwiedzić stronę [lokacji .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) można pobrać zestawu .NET Core SDK, Utwórz projekt na komputerze i Zachowaj kodowania. W kroku "Zachowaj Learning" łączy do tych samouczków można kompilować projekty na swojej maszynie.


    Możesz dowiedzieć się więcej [kolekcji .NET](../../../standard/collections/index.md) w następujących artykułach:

    - [Wybieranie typu kolekcji](../../../standard/collections/selecting-a-collection-class.md)

    - [Często używane typy kolekcji](../../../standard/collections/commonly-used-collection-types.md)

    - [Kiedy należy używać kolekcji ogólnych](../../../standard/collections/when-to-use-generic-collections.md)
