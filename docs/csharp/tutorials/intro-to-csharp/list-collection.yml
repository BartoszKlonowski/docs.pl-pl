### YamlMime:Tutorial
title: Dowiedz się, jak zarządzać kolekcjami danych przy użyciu typu listy ogólnej
metadata:
  title: Kolekcje danych — wprowadzenie do samouczka interaktywnego języka C#
  description: W tym samouczku użyjesz przeglądarki, aby poznać język C# interaktywnie. Możesz pisać kod w języku C# i zobaczyć wyniki kompilacji oraz uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 03f12cbdd8f9c088a5f279efcadef64c2848fa13
  ms.sourcegitcommit: d9c7ac5d06735a01c1fafe34efe9486734841a72
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 05/06/2020
  ms.locfileid: "82860957"
items:
- durationInMinutes: 1
  content: >
    W tym samouczku przedstawiono interaktywnie korzystanie z języka C# przy użyciu przeglądarki do pisania kodu w języku C# i wyświetlania wyników kompilowania i uruchamiania kodu. Zawiera serię lekcji, które tworzą, modyfikują i eksplorują kolekcje i tablice.
- title: Tworzenie list
  durationInMinutes: 2
  content: >
    Uruchom poniższy kod w oknie interaktywnym. Wybierz przycisk **Przejdź do trybu koncentracji uwagi** . Następnie wpisz poniższy blok kodu w oknie interaktywnym (Zamień `<name>` na nazwę) i wybierz pozycję **Uruchom**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Jeśli używasz tego środowiska w środowisku, należy postępować zgodnie z instrukcjami dotyczącymi [wersji lokalnej](arrays-and-collections.md) .


    Utworzono listę ciągów, dodano trzy nazwy do tej listy i wydrukowanych nazw we wszystkich WERSALIKach. Są używane koncepcje, które zostały uzyskane we wcześniejszych samouczkach, aby przepętlać listę.


    Kod do wyświetlania nazw korzysta z funkcji [interpolacji ciągów](../../language-reference/tokens/interpolated.md) . Gdy poprzedzasz `string` `$` znak, możesz osadzić kod w języku C# w deklaracji ciągu. Rzeczywisty ciąg zastępuje ten kod C# wartością, którą generuje. W tym przykładzie zastępuje `{name.ToUpper()}` on każdą nazwę, przekonwertowane na wielkie litery, ponieważ wywołano <xref:System.String.ToUpper%2A?displayProperty=nameWithType> metodę.


    Kontynuujmy Eksplorowanie.
- title: Modyfikuj zawartość listy
  durationInMinutes: 3
  content: >
    Utworzona kolekcja używa <xref:System.Collections.Generic.List%601> typu. Ten typ przechowuje sekwencje elementów. Należy określić typ elementów między nawiasami kątowymi.


    Jednym z ważnych aspektów <xref:System.Collections.Generic.List%601> tego typu jest to, że można go zwiększyć lub zmniejszyć, umożliwiając dodawanie lub usuwanie elementów. Wyniki można zobaczyć, modyfikując zawartość po wyświetleniu jej zawartości. Dodaj następujący kod poniżej kodu, który został już zapisany (poniżej pętli, która drukuje zawartość):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Dodano dwie więcej nazw na końcu listy. Również został także usunięty. Dane wyjściowe z tego bloku kodu pokazują zawartość początkową, a następnie drukuje pusty wiersz i nową zawartość.


    Umożliwia także odwoływanie się do poszczególnych elementów według **indeksu.** <xref:System.Collections.Generic.List%601> Masz dostęp do elementów przy `[` użyciu `]` tokenów i. Dodaj poniższy kod poniżej tego, co zostało już zrobione, i wypróbuj go:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Nie masz zezwolenia na dostęp poza końcem listy. Możesz sprawdzić, jak długo lista używa <xref:System.Collections.Generic.List%601.Count%2A> właściwości. Dodaj następujący kod, aby go wypróbować:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Wybierz pozycję **Uruchom** ponownie, aby wyświetlić wyniki. W języku C# indeksy zaczynają się od 0, więc największy prawidłowy indeks jest mniejszy od liczby elementów na liście.
- title: Wyszukiwanie i sortowanie list
  durationInMinutes: 5
  content: >
    Nasze przykłady używają stosunkowo małych list, ale aplikacje mogą często tworzyć listy z wieloma elementami, czasami numerowania w tysiącach. Aby znaleźć elementy w tych większych kolekcjach, należy przeszukać listę pod kątem różnych elementów. <xref:System.Collections.Generic.List%601.IndexOf%2A> Metoda wyszukuje element i zwraca indeks elementu. Wypróbuj go, aby zobaczyć, jak to działa.  Dodaj poniższy kod poniżej tego, co zostało wcześniej zrobione:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Użytkownik może nie wiedzieć, czy element znajduje się na liście, więc zawsze należy sprawdzać indeks zwracany przez <xref:System.Collections.Generic.List%601.IndexOf%2A>. Jeśli wartość to-1, element nie został znaleziony.


    Elementy na liście można także sortować. <xref:System.Collections.Generic.List%601.Sort%2A> Metoda sortuje wszystkie elementy na liście w ich normalnej kolejności (alfabetycznie w przypadku ciągów). Dodaj ten kod i uruchom ponownie:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```
- title: Listy innych typów
  durationInMinutes: 5
  content: >
    Używasz `string` typu na listach do tej pory. <xref:System.Collections.Generic.List%601> Użyjmy innego typu. Utwórzmy zestaw numerów. Usuń kod, który zapisano do tej pory, i zastąp go następującym kodem:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Tworzy listę liczb całkowitych i ustawia pierwsze dwie liczby całkowite na wartość 1. *Sekwencja Fibonacci*, sekwencja liczb, rozpoczyna się od dwóch 1. Każdy kolejny numer Fibonacci można znaleźć, pobierając sumę poprzednich dwóch liczb. Dodaj ten kod:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Naciśnij przycisk **Run (Uruchom** ), aby zobaczyć wyniki.
- title: Wyzwanie
  durationInMinutes: 10
  content: >
    Sprawdź, czy możesz połączyć niektóre koncepcje z tej i wcześniejszych lekcji. Rozwiń elementy, które zostały już skompilowane z użyciem numerów Fibonacci. Spróbuj napisać kod w celu wygenerowania pierwszych 20 cyfr w sekwencji. (Jako wskazówkę 20 Fibonacci numer jest 6765).
- title: Ukończenie wyzwania
  durationInMinutes: 3
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Każda iteracja pętli polega na wykorzystaniu ostatnich dwóch liczb całkowitych na liście, sumowaniu ich i dodawania tej wartości do listy. Pętla jest powtarzana do momentu dodania 20 elementów do listy.
- content: >-
    Ukończono Samouczek interaktywny listy. To jest ostateczne wprowadzenie do interaktywnego samouczka języka C#. Możesz odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie. Sekcja "następne kroki" umożliwia powrót do tych samouczków.


    Więcej informacji na temat [kolekcji .NET](../../../standard/collections/index.md) można znaleźć w następujących artykułach:

    - [Wybieranie typu kolekcji](../../../standard/collections/selecting-a-collection-class.md)

    - [Często używane typy kolekcji](../../../standard/collections/commonly-used-collection-types.md)

    - [Kiedy należy używać kolekcji ogólnych](../../../standard/collections/when-to-use-generic-collections.md)
