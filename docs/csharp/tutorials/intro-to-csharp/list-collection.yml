### YamlMime:Tutorial
title: Dowiedz się, jak zarządzać zbiorami danych przy użyciu ogólnego typu listy
metadata:
  title: Kolekcje danych — wprowadzenie do interaktywnego samouczka języka C#
  description: W tym samouczku użyjesz przeglądarki, aby interaktywnie nauczyć się języka C#. Możesz pisać kod w języku C# i zobaczyć wyniki kompilacji oraz uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f7fd68120defbfcda6ac11e14bc749bf4d69c109
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "73969392"
items:
- durationInMinutes: 1
  content: >
    Ten samouczek uczy c# interaktywnie, za pomocą przeglądarki do pisania kodu C# i zobaczyć wyniki kompilowania i uruchamiania kodu. Zawiera serię lekcji, które tworzą, modyfikują i eksplorują kolekcje i tablice.
- title: Tworzenie list
  durationInMinutes: 2
  content: >
    Uruchom poniższy kod w oknie interaktywnym. Wybierz przycisk **Wprowadź tryb ustawiania ostrości.** Następnie wpisz następujący blok kodu w `<name>` interaktywnym oknie (zamień na swoją nazwę) i wybierz **pozycję Uruchom:**


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Jeśli używasz tego w środowisku, należy postępować zgodnie z instrukcjami dla [wersji lokalnej](arrays-and-collections.md) zamiast tego.


    Utworzono listę ciągów, dodano trzy nazwy do tej listy i wydrukowano nazwy we wszystkich wersalikach. Używasz pojęć, które zostały nauczone we wcześniejszych samouczkach do pętli za pośrednictwem listy.


    Kod do wyświetlania nazw korzysta z funkcji [interpolacji ciągów.](../../language-reference/tokens/interpolated.md) Poprzedzić `string` znak, `$` można osadzić kod C# w deklaracji ciągu. Rzeczywisty ciąg zastępuje ten kod C# wartością, którą generuje. W tym przykładzie zastępuje `{name.ToUpper()}` z każdej nazwy, konwertowane na wielkie <xref:System.String.ToUpper%2A?displayProperty=nameWithType> litery, ponieważ nazywa się metodę.


    Badajmy dalej.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Modyfikowanie zawartości listy
  durationInMinutes: 3
  content: >
    Kolekcja, którą utworzyłeś <xref:System.Collections.Generic.List%601> używa tego typu. Ten typ przechowuje sekwencje elementów. Typ elementów między nawiasami kątowymi.


    Jednym z ważnych <xref:System.Collections.Generic.List%601> aspektów tego typu jest to, że można go rozwijać lub zmniejszać, umożliwiając dodawanie lub usuwanie elementów. Wyniki można wyświetlić, modyfikując zawartość po wyświetleniu jej zawartości. Dodaj poniżej kod, który już napisałeś (poniżej pętli, która drukuje zawartość):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Na końcu listy dodano jeszcze dwie nazwy. Usunięto również jeden. Dane wyjściowe z tego bloku kodu pokazuje zawartość początkową, a następnie drukuje pusty wiersz i nową zawartość.


    Umożliwia <xref:System.Collections.Generic.List%601> odwoływanie się do poszczególnych elementów przez **indeks,** jak również. Dostęp do elementów `[` `]` przy użyciu i tokenów. Poniżej dodaj poniżej poniższy kod i spróbuj:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Nie możesz uzyskać dostępu po końcu listy. Można sprawdzić, jak długo lista <xref:System.Collections.Generic.List%601.Count%2A> jest przy użyciu właściwości. Dodaj następujący kod, aby spróbować:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Wybierz **uruchom** ponownie, aby zobaczyć wyniki. W języku C#indeksy zaczynają się od 0, więc największy prawidłowy indeks jest o jeden mniejszy niż liczba elementów na liście.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Wyszukiwanie i sortowanie list
  durationInMinutes: 5
  content: >
    Nasze przykłady używają stosunkowo małych list, ale aplikacje często mogą tworzyć listy z wieloma innymi elementami, czasami numerowane w tysiącach. Aby znaleźć elementy w tych większych kolekcji, należy wyszukać listę różnych elementów. Metoda <xref:System.Collections.Generic.List%601.IndexOf%2A> wyszukuje element i zwraca indeks elementu. Spróbuj zobaczyć, jak to działa.  Poniżej dodaj poniżej to, co napisałeś do tej pory:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Możesz nie wiedzieć, czy element znajduje się na liście, więc <xref:System.Collections.Generic.List%601.IndexOf%2A>zawsze powinieneś sprawdzić indeks zwrócony przez . Jeśli jest to -1, nie znaleziono elementu.


    Elementy na liście można również sortować. Metoda <xref:System.Collections.Generic.List%601.Sort%2A> sortuje wszystkie elementy na liście w normalnej kolejności (alfabetycznie w przypadku ciągów). Dodaj ten kod i uruchom ponownie:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Listy innych typów
  durationInMinutes: 5
  content: >
    Do tej pory `string` używano tego typu na listach. Zróbmy <xref:System.Collections.Generic.List%601> przy użyciu innego typu. Zbudujmy zestaw liczb. Usuń kod, który napisałeś do tej pory, i zastąp go następującym kodem:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Spowoduje to utworzenie listy liczb całkowitych i ustawienie pierwszych dwóch liczb całkowitych na wartość 1. *Sekwencja Fibonacciego*, sekwencja liczb, zaczyna się od dwóch jedenastek. Każdy następny numer Fibonacciego znajduje się, biorąc sumę poprzednich dwóch liczb. Dodaj ten kod:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Naciśnij **przycisk Uruchom,** aby zobaczyć wyniki;


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Wyzwanie
  durationInMinutes: 10
  content: >
    Zobacz, czy możesz połączyć niektóre koncepcje z tej i wcześniejszych lekcji. Rozwiń to, co zbudowałeś do tej pory dzięki numerom Fibonacciego. Spróbuj napisać kod, aby wygenerować pierwsze 20 liczb w sekwencji. (Jako wskazówkę, 20 numer Fibonacciego jest 6765.)


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Ukończenie wyzwania
  durationInMinutes: 3
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Przy każdej iteracji pętli przyjmujesz dwie ostatnie liczby całkowite na liście, sumując je i dodając tę wartość do listy. Pętla jest powtarzana, dopóki nie dodasz 20 elementów do listy.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Ukończono interaktywny samouczek listy. To jest ostateczne wprowadzenie do interaktywnego samouczka języka C#. Możesz odwiedzić [witrynę .NET,](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) aby pobrać zestaw SDK .NET Core, utworzyć projekt na komputerze i zachować kodowanie. Sekcja "Następne kroki" przywraca do tych samouczków.


    Więcej informacji na temat [kolekcji .NET](../../../standard/collections/index.md) można uzyskać w następujących artykułach:

    - [Wybieranie typu kolekcji](../../../standard/collections/selecting-a-collection-class.md)

    - [Często używane typy kolekcji](../../../standard/collections/commonly-used-collection-types.md)

    - [Kiedy używać kolekcji ogólnych](../../../standard/collections/when-to-use-generic-collections.md)
