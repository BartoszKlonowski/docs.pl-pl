### YamlMime:Tutorial
title: Hello World - Wprowadzenie do interaktywnego samouczka Języka C#
metadata:
  title: Hello World - Wprowadzenie do interaktywnego samouczka Języka C#
  description: W tym samouczku użyjesz przeglądarki, aby interaktywnie nauczyć się języka C#. Możesz pisać kod w języku C# i zobaczyć wyniki kompilacji oraz uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Liczby w języku C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 365cf0b2ef36dd0be624d022e3dea5e16a9eb58c
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "73969408"
items:
- durationInMinutes: 1
  content: >
    Ten samouczek uczy c# interaktywnie, za pomocą przeglądarki do pisania języka C# i zobaczyć wyniki kompilowania i uruchamiania kodu. Przewodnik zawiera serię lekcji, które rozpoczynają się od programu „Hello World”. Te lekcje umożliwiają poznanie podstaw języka C#.
- title: Uruchamianie pierwszego programu w języku C#
  durationInMinutes: 2
  content: >
    Uruchom poniższy kod w oknie interaktywnym. Wybierz przycisk **Wprowadź tryb ustawiania ostrości.** Następnie wpisz następujący blok kodu w oknie interaktywnym i wybierz **pozycję Uruchom:**


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Gratulacje! Udało Ci się uruchomić pierwszy program w języku C#. Jest to prosty program, który wyświetla komunikat „Hello World!”. Program użył metody <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, aby wyświetlić wiadomość. `Console` jest typem, który reprezentuje okno konsoli. `WriteLine` jest metodą typu `Console`, która wyświetla wiersz tekstu w tej konsoli tekstowej.


    Przejdźmy dalej i poznajmy więcej możliwości. Pozostała część tej lekcji skupia się na pracy z typem `string`, który reprezentuje tekst w języku C#. Podobnie jak typ `Console`, typ `string` ma metody. Metody `string` pracują z tekstem.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Deklarowanie i używanie zmiennych
  durationInMinutes: 3
  content: >
    Pierwszy program wyświetlił `string` „Hello World!” na ekranie.


    > [!TIP]

    > Podczas nauki języka C# (lub dowolnego języka programowania) będziesz robić błędy przy pisaniu kodu. **Kompilator** znajdzie te błędy i zgłosi je. Jeśli dane wyjściowe zawierają komunikaty o błędach, sprawdź uważnie przykładowy kod oraz kod w oknie interaktywnym, aby znaleźć fragmenty wymagające poprawienia.

    > To ćwiczenie pomoże Ci poznać strukturę kodu w języku C#.


    Pierwszy program jest ograniczony do wyświetlania jednego komunikatu. Możesz napisać bardziej użyteczne programy, korzystając ze **zmiennych**. **Zmienna** jest symbolem, którego możesz użyć, aby uruchamiać taki sam kod z różnymi wartościami. Spróbujmy to zrobić! Zastąp kod napisany w oknie interaktywnym następującym kodem:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    Pierwszy wiersz deklaruje zmienną (`aFriend`) i przypisuje jej wartość („Bill”). Drugi wiersz wyświetla imię.


    Możesz przypisywać różne wartości do każdej zadeklarowanej zmiennej. Możesz zmienić imię na jednego ze swoich znajomych. Dodaj te dwa wiersze w oknie interaktywnym po już dodanym kodzie:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Zauważ, że ten sam wiersz kodu wyświetli dwa różne komunikaty w oparciu o wartość przechowaną w zmiennej `aFriend`.


    Możesz też zauważyć, że w ostatnich dwóch komunikatach nie było napisu „Hello”. Naprawmy to teraz.  Zmień wiersze wyświetlające komunikat na następujące:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Wybierz **uruchom** ponownie, aby zobaczyć wyniki.


    Używasz `+` do tworzenia ciągów ze **zmiennych** i **ciągów stałych.** Jest lepszy sposób.

    Można umieścić zmienną `{` `}` między i znaków, aby powiedzieć C# zastąpić ten tekst z wartością zmiennej.


    Nazywa się [interpolacja ciągów](../../language-reference/tokens/interpolated.md).


    Jeśli dodasz `$` przed otwarciem cudzysłów ciągu, można `aFriend`następnie dołączyć zmienne, takie jak , wewnątrz ciągu między nawiasami klamrowym. Spróbuj:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Wybierz **uruchom** ponownie, aby zobaczyć wyniki. Zamiast "Hello {aFriend}", wiadomość powinna być "Hello Maira".


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Praca z ciągami
  durationInMinutes: 5
  content: >
    Twoja ostatnia edycja była pierwszym podejściem do tego, co można zrobić z ciągami. Dowiedzmy się więcej.


    Nie są ograniczone do pojedynczej zmiennej między nawiasami klamrowym. Spróbuj tego:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Jak eksplorować więcej za pomocą ciągów, przekonasz się, że ciągi są więcej niż zbiór liter. Długość ciągu można znaleźć za `Length`pomocą . `Length` jest **właściwością** ciągu, która zwraca liczbę znaków w tym ciągu. Dodaj następujący kod u dołu okna interaktywnego:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Jest to dobry moment, aby rozejrzeć się samodzielnie. Wiesz już, że `Console.WriteLine()` zapisuje tekst na ekranie. Wiesz też, jak deklarować zmienne i łączyć ciągi. Poeksperymentuj w oknie interaktywnym. Okno ma funkcję o nazwie **IntelliSense,** która zawiera sugestie dotyczące tego, co możesz zrobić. Wpisz `.` po `d` `firstFriend`w . Zobaczysz listę sugestii dotyczących właściwości i metod, których możesz użyć.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Więcej zadań z ciągami
  durationInMinutes: 5
  content: >
    Do drukowania wiadomości **method**używasz <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>metody , do drukowania wiadomości. **Metoda** to blok kodu, który implementuje pewne działanie. Ma swoją nazwę, więc możesz uzyskać do niej dostęp.


    Załóżmy, że ciągi mają spacje wiodące lub końcowe, których nie chcesz wyświetlać. Chcesz **przyciąć** spacje z ciągów.

    Metoda <xref:System.String.Trim%2A> i powiązane <xref:System.String.TrimStart%2A> metody <xref:System.String.TrimEnd%2A> i zrobić, że praca. Można po prostu użyć tych metod, aby usunąć spacje wiodące i końcowe. Wypróbuj poniższy kod:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Ten przykład wzmacnia kilka ważnych konceptów związanych z pracą z ciągami. Metody manipulujące ciągami zwracają nowe obiekty ciągów zamiast wprowadzać modyfikacje w ciągach źródłowych. Widać, że każde wywołanie `Trim` dowolnej z metod zwraca nowy ciąg, ale nie zmienia oryginalnej wiadomości.


    Istnieją inne metody umożliwiające pracę z ciągami. Na przykład prawdopodobnie wcześniej użyto polecenia wyszukiwania i zastępowania w edytorze lub edytorze tekstu. Metoda <xref:System.String.Replace%2A> robi coś podobnego w ciągu. Wyszukuje podciąg i zastępuje go innym tekstem. Metoda <xref:System.String.Replace%2A> przyjmuje dwa **parametry**. Są to ciągi pomiędzy nawiasami. Pierwszy ciąg to tekst, który zostanie wyszukany. Drugi ciąg to tekst, którym zostanie zastąpiony wyszukany tekst. Wypróbuj to samodzielnie. Dodaj ten kod. Wpisz go, aby zobaczyć wskazówki podczas `.Re` pisania `sayHello` po zmiennej:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Dwie inne użyteczne metody zmieniają ciąg na WSZYSTKO WIELKIMI LITERAMI lub wszystko małymi literami. Wypróbuj poniższy kod. Wpisz go, aby zobaczyć, jak **IntelliSense** `To`zawiera wskazówki podczas pisania:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Wyszukiwanie ciągów
  durationInMinutes: 10
  content: >
    Inną częścią operacji *wyszukaj i zamień* jest odnajdywanie tekstu w ciągu. Możesz użyć metody <xref:System.String.Contains%2A> do wyszukiwania. Przekazuje ona informację o tym, czy ciąg zawiera podciąg. Wypróbuj poniższy kod, aby przyjrzeć się metodzie <xref:System.String.Contains%2A>:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Metoda <xref:System.String.Contains%2A> zwraca **wartość logiczną**, która informuje o tym, czy wyszukiwany ciąg został odnaleziony. **Wartość logiczna** przechowuje wartość `true` lub `false`. O **wartościach logicznych** dowiesz się więcej z późniejszej lekcji.


    ***Wyzwanie***


    Istnieją dwie podobne metody, <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A>, które również wyszukują podciągi w ciągu. Służą one do wyszukiwania podciągu na początku lub na końcu ciągu. Spróbuj zmodyfikować poprzedni przykład tak, aby użyć metod <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A> zamiast metody <xref:System.String.Contains%2A>. Wyszukaj słowa „You” lub „goodbye” na początku ciągu. Wyszukaj słowa „hello” lub „goodbye” na końcu ciągu.


    > [!NOTE]

    > Zwróć uwagę na interpunkcję podczas testowania tekstu na końcu ciągu. Jeśli ciąg kończy się kropką, musisz sprawdzać ciągi kończące się kropką.


    Metoda powinna zwrócić wartość `true` dla wyrazu „You” na początku i „hello” na końcu oraz wartość false dla wyrazu „goodbye” na początku i na końcu.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Ukończenie wyzwania
  durationInMinutes: 3
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Ukończono wprowadzenie "Hello C#" do samouczka języka C#. Możesz wybrać łącze **Liczby w języku C#,** aby rozpocząć następny interaktywny samouczek, lub odwiedzić [witrynę .NET,](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) aby pobrać zestaw SDK .NET Core, utworzyć projekt na komputerze i zachować kodowanie. Sekcja "Następne kroki" przywraca do tych samouczków.


    Do dalszego `string` czytania na temat typu:

    - [C# Temat przewodnikprogramowania](../../programming-guide/index.md) na [ciągi](../../programming-guide/strings/index.md).

    - [Jak porady dotyczące pracy z ciągami](../../how-to/index.md#working-with-strings).
