### YamlMime:Tutorial
title: Hello world — wprowadzenie do C# interaktywnego C# samouczka
metadata:
  title: Hello world — wprowadzenie do C# interaktywnego C# samouczka
  description: W tym samouczku będziesz używać przeglądarki do interaktywnego nauczenia się C# . Napiszesz C# kod i zobaczysz wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Liczby w języku C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 36254062835b9ab70ba470f6286b7515003dec11
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850800"
items:
- durationInMinutes: 1
  content: >
    Ten samouczek przeprowadzi Cię C# interaktywnie przy użyciu przeglądarki do pisania C# i wyświetlania wyników kompilowania i uruchamiania kodu. Zawiera szereg lekcji rozpoczynających się od programu "Hello world". Te lekcje uczyją się podstaw C# języka.
- title: Uruchamianie pierwszego C# programu
  durationInMinutes: 2
  content: >
    Uruchom następujący kod w oknie interaktywnym. Aby to zrobić, wpisz poniższy blok kodu w oknie interaktywnym i kliknij przycisk **Uruchom** :


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Gratulacje! Uruchomiono pierwszy C# program. Jest to prosty program, który drukuje komunikat "Hello world!". Wykorzystano <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodę, aby wydrukować ten komunikat. `Console`jest typem, który reprezentuje okno konsoli. `WriteLine`to metoda `Console` typu, która drukuje wiersz tekstu w tej konsoli tekstu.


    Przejdźmy i Dowiedz się więcej. Pozostała część tej lekcji analizuje pracę z `string` typem, który reprezentuje tekst w. C# Podobnie jak `string` typ, typ ma metody. `Console` `string` Metody współpracują z tekstem.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Deklarowanie i Używanie zmiennych
  durationInMinutes: 3
  content: >
    Pierwszy program wydrukował `string` "Hello World!" na ekranie.


    > [!TIP]

    > Podczas eksplorowania C# (lub dowolnego języka programowania) nastąpi pomyłki podczas pisania kodu. **Kompilator** odnajdzie te błędy i zgłosi je do użytkownika. Gdy dane wyjściowe zawierają komunikaty o błędach, należy dokładnie zapoznać się z przykładowym kodem i kodem w oknie interaktywnym, aby zobaczyć, co należy naprawić.

    > To ćwiczenie pomoże Ci poznać strukturę C# kodu.


    Pierwszy program jest ograniczony do drukowania jednej wiadomości. Można napisać bardziej przydatne programy przy użyciu **zmiennych**. **Zmienna** jest symbolem, którego można użyć do uruchomienia tego samego kodu z różnymi wartościami. Wypróbujmy! Zastąp kod zapisany w oknie interaktywnym następującym kodem:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    Pierwszy wiersz deklaruje zmienną `aFriend` i przypisuje jej wartość, "Bill". Drugi wiersz drukuje nazwę.


    Można przypisać różne wartości do każdej zadeklarowanej zmiennej. Możesz zmienić nazwę na jednego z znajomych. Dodaj te dwa wiersze w oknie interaktywnym po dodanym już kodzie:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Zauważ, że ten sam wiersz kodu drukuje dwa różne komunikaty na podstawie wartości przechowywanej w `aFriend` zmiennej.


    Być może zawarto również zauważyć, że w ostatnich dwóch komunikatach brakuje słowa "Hello". Naprawmy to teraz.  Zmodyfikuj wiersze, które drukują komunikat w następujący sposób:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Kliknij przycisk **Uruchom** ponownie, aby zobaczyć wyniki.


    Użyto do kompilowania ciągów ze **zmiennych** i stałych ciągów. **** `+` Istnieje lepszy sposób.

    Można umieścić zmienną między `{` i `}` znakami, aby powiedzieć C# , aby zamienić ten tekst na wartość zmiennej.


    Jest to nazywane [interpolacją ciągu](../../language-reference/tokens/interpolated.md).


    Jeśli dodasz `$` przed cudzysłowem otwierającym ciąg, możesz dołączyć zmienne, takie jak `aFriend`w ciągu między nawiasami klamrowymi. Wypróbuj:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Kliknij przycisk **Uruchom** ponownie, aby zobaczyć wyniki. Zamiast "Hello {aFriend}" komunikat powinien mieć wartość "Hello Maira".


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Pracuj z ciągami
  durationInMinutes: 5
  content: >
    Twoja Ostatnia edycja była pierwszym zajrzeć na to, co możesz zrobić z ciągami. Dowiedz się więcej.


    Nie ograniczono do pojedynczej zmiennej między nawiasami klamrowymi. Wypróbuj:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    W miarę eksplorowania ciągów można znaleźć, że ciągi są więcej niż kolekcją liter. Można znaleźć długość ciągu przy użyciu `Length`. `Length`jest **właściwością** ciągu i zwraca liczbę znaków w tym ciągu. Dodaj następujący kod w dolnej części okna interaktywnego:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Jest to dobry czas na samodzielne Eksplorowanie. Wiesz już, że `Console.WriteLine()` zapisuje tekst na ekranie. Wiesz już, jak deklarować zmienne i łączyć ciągi. Eksperymentuj w oknie interaktywnym. Okno zawiera funkcję **IntelliSense** , która udostępnia sugestie dotyczące tego, co można zrobić. Wpisz a `.` `d` po .`firstFriend` Zobaczysz listę sugestii dotyczących właściwości i metod, których można użyć.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Zrób więcej z użyciem ciągów
  durationInMinutes: 5
  content: >
    Używasz **metody**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, aby drukować wiadomości. **Metoda** jest blokiem kodu, który implementuje niektóre akcje. Ma nazwę, więc możesz uzyskać do niej dostęp.


    Załóżmy, że ciągi zawierają początkowe lub końcowe spacje, które nie mają być wyświetlane. Chcesz **przyciąć** spacje z ciągów.

    Metody i powiązane metody <xref:System.String.TrimStart%2A> i <xref:System.String.TrimEnd%2A> wykonują tę czynność. <xref:System.String.Trim%2A> Możesz użyć tych metod, aby usunąć spacje wiodące i końcowe. Wypróbuj następujący kod:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Ten przykład wzmacnia kilka ważnych koncepcji związanych z pracą z ciągami. Metody służące do manipulowania ciągami zwracają nowe obiekty String zamiast wprowadzania modyfikacji. Można zobaczyć, że każde wywołanie `Trim` metody zwraca nowy ciąg, ale nie zmienia oryginalnego komunikatu.


    Istnieją inne metody do pracy z ciągiem. Można na przykład użyć polecenia Wyszukaj i Zastąp w edytorze lub Edytor tekstów przed. <xref:System.String.Replace%2A> Metoda wykonuje coś podobnego w ciągu. Wyszukuje podciąg i zastępuje go innym tekstem. Metoda przyjmuje dwa **parametry.** <xref:System.String.Replace%2A> Są to ciągi między nawiasami. Pierwszy ciąg to tekst do wyszukania. Drugi ciąg to tekst, w którym ma zostać zamieniony. Wypróbuj ją samodzielnie. Dodaj ten kod. Wpisz je w, aby wyświetlić wskazówki `.Re` `sayHello` po rozpoczęciu wpisywania po zmiennej:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Dwie inne przydatne metody tworzą ciąg WERSALIKów lub małych liter. Wypróbuj następujący kod. Wpisz go, aby zobaczyć, w jaki sposób **technologia IntelliSense** udostępnia wskazówki podczas `To`uruchamiania, aby wpisać:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Wyszukiwanie ciągów
  durationInMinutes: 10
  content: >
    Druga część operacji *wyszukiwania i zamieniania* polega na znalezieniu tekstu w ciągu. Możesz użyć <xref:System.String.Contains%2A> metody do wyszukania. Informuje o tym, czy ciąg zawiera podciąg. Wypróbuj następujący kod, aby eksplorować <xref:System.String.Contains%2A>:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Metoda zwraca wartość logiczną, która informuje o tym, czy wyszukiwany ciąg został znaleziony. **** <xref:System.String.Contains%2A> `false` Wartość **logiczna** jest przechowywana albo `true` lub. Dowiesz się więcej o wartościach **logicznych** w późniejszej lekcji.


    ***Sprawdz***


    Istnieją dwie podobne metody, <xref:System.String.StartsWith%2A> <xref:System.String.EndsWith%2A> które również szukają podciągów w ciągu. Znajdują się one w podciągu na początku lub na końcu ciągu. Spróbuj zmodyfikować poprzedni przykład, aby użyć <xref:System.String.StartsWith%2A> polecenia i <xref:System.String.EndsWith%2A> zamiast. <xref:System.String.Contains%2A> Wyszukaj "ty" lub "Pożegnanie" na początku ciągu. Wyszukaj ciąg "Hello" lub "Pożegnanie" na końcu ciągu.


    > [!NOTE]

    > Obejrzyj interpunkcję po przetestowaniu tekstu na końcu ciągu. Jeśli ciąg jest zakończony kropką, należy wyszukać ciąg kończący się kropką.


    Należy zacząć `true` od "ty" i kończyć się ciągiem "Hello" i fałszem, aby rozpocząć od lub kończąc na "Pożegnanie".


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Ukończ wyzwanie
  durationInMinutes: 3
  content: >
    Czy udało Ci się to zrobić?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Wprowadzenie do C# samouczka zostało zakończone C#. Możesz kliknąć poniższe **numery C# ** , aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie. Sekcja "następne kroki" umożliwia powrót do tych samouczków.


    Aby uzyskać więcej informacji na `string` temat typu:

    - Temat Przewodnik programowania na [ciągach](../../programming-guide/strings/index.md). [ C# ](../../programming-guide/index.md)

    - [Porady dotyczące pracy z ciągami](../../how-to/index.md#working-with-strings).
