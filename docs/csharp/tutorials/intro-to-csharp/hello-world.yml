### YamlMime:Tutorial
title: Hello world — wprowadzenie do interaktywnego samouczka c#
metadata:
  title: Hello world — wprowadzenie do interaktywnego samouczka c#
  description: W tym samouczku użyjesz przeglądarki, aby poznać język C# interaktywnie. Możesz pisać kod w języku C# i zobaczyć wyniki kompilacji oraz uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Liczby w języku C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 025b3e0fcaf693be00f1ca396b92617d6faf31aa
  ms.sourcegitcommit: d9c7ac5d06735a01c1fafe34efe9486734841a72
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 05/06/2020
  ms.locfileid: "82860965"
items:
- durationInMinutes: 1
  content: >
    W tym samouczku przedstawiono interaktywnie korzystanie z języka C# przy użyciu przeglądarki do pisania języka C# i wyświetlania wyników kompilowania i uruchamiania kodu. Przewodnik zawiera serię lekcji, które rozpoczynają się od programu „Hello World”. Te lekcje umożliwiają poznanie podstaw języka C#.
- title: Uruchamianie pierwszego programu w języku C#
  durationInMinutes: 2
  content: >
    Uruchom poniższy kod w oknie interaktywnym. Wybierz przycisk **Przejdź do trybu koncentracji uwagi** . Następnie wpisz poniższy blok kodu w oknie interaktywnym i wybierz polecenie **Uruchom**:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Gratulacje! Udało Ci się uruchomić pierwszy program w języku C#. Jest to prosty program, który wyświetla komunikat „Hello World!”. Program użył metody <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, aby wyświetlić wiadomość. `Console` jest typem, który reprezentuje okno konsoli. `WriteLine` jest metodą typu `Console`, która wyświetla wiersz tekstu w tej konsoli tekstowej.


    Przejdźmy dalej i poznajmy więcej możliwości. Pozostała część tej lekcji skupia się na pracy z typem `string`, który reprezentuje tekst w języku C#. Podobnie jak typ `Console`, typ `string` ma metody. Metody `string` pracują z tekstem.
- title: Deklarowanie i używanie zmiennych
  durationInMinutes: 3
  content: >
    Pierwszy program wyświetlił `string` „Hello World!” na ekranie.


    > [!TIP]

    > Podczas nauki języka C# (lub dowolnego języka programowania) będziesz robić błędy przy pisaniu kodu. **Kompilator** znajdzie te błędy i zgłosi je. Jeśli dane wyjściowe zawierają komunikaty o błędach, sprawdź uważnie przykładowy kod oraz kod w oknie interaktywnym, aby znaleźć fragmenty wymagające poprawienia.

    > To ćwiczenie pomoże Ci poznać strukturę kodu w języku C#.


    Pierwszy program jest ograniczony do wyświetlania jednego komunikatu. Możesz napisać bardziej użyteczne programy, korzystając ze **zmiennych**. **Zmienna** jest symbolem, którego możesz użyć, aby uruchamiać taki sam kod z różnymi wartościami. Spróbujmy to zrobić! Zastąp kod napisany w oknie interaktywnym następującym kodem:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    Pierwszy wiersz deklaruje zmienną (`aFriend`) i przypisuje jej wartość („Bill”). Drugi wiersz wyświetla imię.


    Możesz przypisywać różne wartości do każdej zadeklarowanej zmiennej. Możesz zmienić imię na jednego ze swoich znajomych. Dodaj te dwa wiersze w oknie interaktywnym po już dodanym kodzie:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Zauważ, że ten sam wiersz kodu wyświetli dwa różne komunikaty w oparciu o wartość przechowaną w zmiennej `aFriend`.


    Możesz też zauważyć, że w ostatnich dwóch komunikatach nie było napisu „Hello”. Naprawmy to teraz.  Zmień wiersze wyświetlające komunikat na następujące:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Wybierz pozycję **Uruchom** ponownie, aby wyświetlić wyniki.


    Użyto `+` do kompilowania ciągów ze **zmiennych** i **stałych** ciągów. Istnieje lepszy sposób.

    Można umieścić zmienną między `{` i `}` znakami, aby powiedzieć C#, aby zamienić ten tekst na wartość zmiennej.


    Jest to nazywane [interpolacją ciągu](../../language-reference/tokens/interpolated.md).


    Jeśli dodasz `$` przed cudzysłowem otwierającym ciąg, możesz dołączyć zmienne, takie jak `aFriend`w ciągu między nawiasami klamrowymi. Wypróbuj:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Wybierz pozycję **Uruchom** ponownie, aby wyświetlić wyniki. Zamiast "Hello {aFriend}" komunikat powinien mieć wartość "Hello Maira".
- title: Praca z ciągami
  durationInMinutes: 5
  content: >
    Twoja ostatnia edycja była pierwszym podejściem do tego, co można zrobić z ciągami. Dowiedzmy się więcej.


    Nie ograniczono do pojedynczej zmiennej między nawiasami klamrowymi. Spróbuj tego:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    W miarę eksplorowania ciągów można znaleźć, że ciągi są więcej niż kolekcją liter. Można znaleźć długość ciągu przy użyciu `Length`. `Length` jest **właściwością** ciągu, która zwraca liczbę znaków w tym ciągu. Dodaj następujący kod u dołu okna interaktywnego:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Jest to dobry moment, aby rozejrzeć się samodzielnie. Wiesz już, że `Console.WriteLine()` zapisuje tekst na ekranie. Wiesz też, jak deklarować zmienne i łączyć ciągi. Poeksperymentuj w oknie interaktywnym. Okno zawiera funkcję **IntelliSense** , która udostępnia sugestie dotyczące tego, co można zrobić. Wpisz a `.` po `d` `firstFriend`. Zobaczysz listę sugestii dotyczących właściwości i metod, których można użyć.
- title: Więcej zadań z ciągami
  durationInMinutes: 5
  content: >
    Używasz **metody**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, aby drukować wiadomości. **Metoda** to blok kodu, który implementuje pewne działanie. Ma swoją nazwę, więc możesz uzyskać do niej dostęp.


    Załóżmy, że ciągi zawierają początkowe lub końcowe spacje, które nie mają być wyświetlane. Chcesz **przyciąć** spacje z ciągów.

    <xref:System.String.Trim%2A> Metody i powiązane metody <xref:System.String.TrimStart%2A> i <xref:System.String.TrimEnd%2A> wykonują tę czynność. Możesz użyć tych metod, aby usunąć spacje wiodące i końcowe. Wypróbuj poniższy kod:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Nawiasy `[` kwadratowe `]` i ułatwiają wizualizację `Trim`działań `TrimStart` i `TrimEnd` metod. Nawiasy pokazują, gdzie zaczyna się i kończą się odstępy.


    Ten przykład wzmacnia kilka ważnych konceptów związanych z pracą z ciągami. Metody manipulujące ciągami zwracają nowe obiekty ciągów zamiast wprowadzać modyfikacje w ciągach źródłowych. Można zobaczyć, że każde wywołanie `Trim` metody zwraca nowy ciąg, ale nie zmienia oryginalnego komunikatu.


    Istnieją inne metody umożliwiające pracę z ciągami. Można na przykład użyć polecenia Wyszukaj i Zastąp w edytorze lub Edytor tekstów przed. <xref:System.String.Replace%2A> Metoda wykonuje coś podobnego w ciągu. Wyszukuje podciąg i zastępuje go innym tekstem. Metoda <xref:System.String.Replace%2A> przyjmuje dwa **parametry**. Są to ciągi pomiędzy nawiasami. Pierwszy ciąg to tekst, który zostanie wyszukany. Drugi ciąg to tekst, którym zostanie zastąpiony wyszukany tekst. Wypróbuj to samodzielnie. Dodaj ten kod. Wpisz je w, aby wyświetlić wskazówki po rozpoczęciu `.Re` wpisywania `sayHello` po zmiennej:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Dwie inne użyteczne metody zmieniają ciąg na WSZYSTKO WIELKIMI LITERAMI lub wszystko małymi literami. Wypróbuj następujący kod. Wpisz go, aby zobaczyć, w jaki sposób **technologia IntelliSense** udostępnia wskazówki podczas `To`uruchamiania, aby wpisać:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```
- title: Wyszukiwanie ciągów
  durationInMinutes: 10
  content: >
    Inną częścią operacji *wyszukaj i zamień* jest odnajdywanie tekstu w ciągu. Możesz użyć metody <xref:System.String.Contains%2A> do wyszukiwania. Przekazuje ona informację o tym, czy ciąg zawiera podciąg. Wypróbuj poniższy kod, aby przyjrzeć się metodzie <xref:System.String.Contains%2A>:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Metoda <xref:System.String.Contains%2A> zwraca **wartość logiczną**, która informuje o tym, czy wyszukiwany ciąg został odnaleziony. **Wartość logiczna** przechowuje wartość `true` lub `false`. Gdy są wyświetlane jako dane wyjściowe tekstu, są pisane wielkimi literami: `True` i `False`, odpowiednio. O **wartościach logicznych** dowiesz się więcej z późniejszej lekcji.


    ***Wyzwanie***


    Istnieją dwie podobne metody, <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A>, które również wyszukują podciągi w ciągu. Służą one do wyszukiwania podciągu na początku lub na końcu ciągu. Spróbuj zmodyfikować poprzedni przykład tak, aby użyć metod <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A> zamiast metody <xref:System.String.Contains%2A>. Wyszukaj słowa „You” lub „goodbye” na początku ciągu. Wyszukaj słowa „hello” lub „goodbye” na końcu ciągu.


    > [!NOTE]

    > Zwróć uwagę na interpunkcję podczas testowania tekstu na końcu ciągu. Jeśli ciąg kończy się kropką, musisz sprawdzać ciągi kończące się kropką.


    Metoda powinna zwrócić wartość `true` dla wyrazu „You” na początku i „hello” na końcu oraz wartość false dla wyrazu „goodbye” na początku i na końcu.
- title: Ukończenie wyzwania
  durationInMinutes: 3
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```
- content: >-
    Ukończono samouczek "Hello C#" w samouczku do języka C#. Aby uruchomić następny Interaktywny samouczek, możesz wybrać poniższe **numery w języku C#** lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie. Sekcja "następne kroki" umożliwia powrót do tych samouczków.


    Aby uzyskać więcej informacji na `string` temat typu:

    - Temat [Przewodnik programowania w języku C#](../../programming-guide/index.md) na [ciągach](../../programming-guide/strings/index.md).

    - [Porady dotyczące pracy z ciągami](../../how-to/index.md#working-with-strings).
