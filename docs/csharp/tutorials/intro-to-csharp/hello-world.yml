### YamlMime:Tutorial
title: Hello World - Wprowadzenie do C# interaktywny c# samouczek
metadata:
  title: Hello World - Wprowadzenie do C# interaktywny c# samouczek
  description: W tym samouczku użyjesz przeglądarki, aby interaktywnie nauczyć się języka C#. Możesz pisać kod w języku C# i zobaczyć wyniki kompilacji oraz uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Liczby w języku C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 6e3742991820a8805b3c9b57767079940899d8fc
  ms.sourcegitcommit: 2514f4e3655081dcfe1b22470c0c28500f952c42
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 03/18/2020
  ms.locfileid: "79507012"
items:
- durationInMinutes: 1
  content: >
    Ten samouczek uczy C# interaktywnie, za pomocą przeglądarki do pisania języka C# i zobacz wyniki kompilacji i uruchamiania kodu. Przewodnik zawiera serię lekcji, które rozpoczynają się od programu „Hello World”. Te lekcje umożliwiają poznanie podstaw języka C#.
- title: Uruchamianie pierwszego programu w języku C#
  durationInMinutes: 2
  content: >
    Uruchom poniższy kod w oknie interaktywnym. Wybierz przycisk **Wprowadź tryb ostrości.** Następnie wpisz następujący blok kodu w oknie interaktywnym i wybierz przycisk **Uruchom:**


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Gratulacje! Udało Ci się uruchomić pierwszy program w języku C#. Jest to prosty program, który wyświetla komunikat „Hello World!”. Program użył metody <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, aby wyświetlić wiadomość. `Console` jest typem, który reprezentuje okno konsoli. `WriteLine` jest metodą typu `Console`, która wyświetla wiersz tekstu w tej konsoli tekstowej.


    Przejdźmy dalej i poznajmy więcej możliwości. Pozostała część tej lekcji skupia się na pracy z typem `string`, który reprezentuje tekst w języku C#. Podobnie jak typ `Console`, typ `string` ma metody. Metody `string` pracują z tekstem.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Deklarowanie i używanie zmiennych
  durationInMinutes: 3
  content: >
    Pierwszy program wyświetlił `string` „Hello World!” na ekranie.


    > [!TIP]

    > Podczas nauki języka C# (lub dowolnego języka programowania) będziesz robić błędy przy pisaniu kodu. **Kompilator** znajdzie te błędy i zgłosi je. Jeśli dane wyjściowe zawierają komunikaty o błędach, sprawdź uważnie przykładowy kod oraz kod w oknie interaktywnym, aby znaleźć fragmenty wymagające poprawienia.

    > To ćwiczenie pomoże Ci poznać strukturę kodu w języku C#.


    Pierwszy program jest ograniczony do wyświetlania jednego komunikatu. Możesz napisać bardziej użyteczne programy, korzystając ze **zmiennych**. **Zmienna** jest symbolem, którego możesz użyć, aby uruchamiać taki sam kod z różnymi wartościami. Spróbujmy to zrobić! Zastąp kod napisany w oknie interaktywnym następującym kodem:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    Pierwszy wiersz deklaruje zmienną (`aFriend`) i przypisuje jej wartość („Bill”). Drugi wiersz wyświetla imię.


    Możesz przypisywać różne wartości do każdej zadeklarowanej zmiennej. Możesz zmienić imię na jednego ze swoich znajomych. Dodaj te dwa wiersze w oknie interaktywnym po już dodanym kodzie:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Zauważ, że ten sam wiersz kodu wyświetli dwa różne komunikaty w oparciu o wartość przechowaną w zmiennej `aFriend`.


    Możesz też zauważyć, że w ostatnich dwóch komunikatach nie było napisu „Hello”. Naprawmy to teraz.  Zmień wiersze wyświetlające komunikat na następujące:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Wybierz **pozycję Uruchom** ponownie, aby wyświetlić wyniki.


    Używasz `+` do tworzenia ciągów ze **zmiennych** i **ciągów stałych.** Jest lepszy sposób.

    Można umieścić zmienną `{` `}` między i znaków, aby powiedzieć C#, aby zastąpić ten tekst wartością zmiennej.


    Nazywa się to [interpolacją ciągów](../../language-reference/tokens/interpolated.md).


    Jeśli dodasz `$` przed cytatem otwierającym ciąg, można następnie `aFriend`dołączyć zmienne, takie jak , wewnątrz ciągu między nawiasami klamrowymi. Spróbuj:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Wybierz **pozycję Uruchom** ponownie, aby wyświetlić wyniki. Zamiast "Hello {aFriend}" komunikat powinien brzmieć "Hello Maira".


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Praca z ciągami
  durationInMinutes: 5
  content: >
    Twoja ostatnia edycja była pierwszym podejściem do tego, co można zrobić z ciągami. Dowiedzmy się więcej.


    Nie jesteś ograniczony do pojedynczej zmiennej między nawiasami klamrowymi. Spróbuj tego:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Jak eksplorować więcej z ciągów, przekonasz się, że ciągi są więcej niż zbiór listów. Długość ciągu można znaleźć za `Length`pomocą programu . `Length` jest **właściwością** ciągu, która zwraca liczbę znaków w tym ciągu. Dodaj następujący kod u dołu okna interaktywnego:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Jest to dobry moment, aby rozejrzeć się samodzielnie. Wiesz już, że `Console.WriteLine()` zapisuje tekst na ekranie. Wiesz też, jak deklarować zmienne i łączyć ciągi. Poeksperymentuj w oknie interaktywnym. Okno ma funkcję o nazwie **IntelliSense,** która sprawia, że sugestie, co można zrobić. Wpisz `.` a `d` po `firstFriend`w . Zobaczysz listę sugestii dotyczących właściwości i metod, których można użyć.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Więcej zadań z ciągami
  durationInMinutes: 5
  content: >
    Używasz **metody**, , <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>do drukowania wiadomości. **Metoda** to blok kodu, który implementuje pewne działanie. Ma swoją nazwę, więc możesz uzyskać do niej dostęp.


    Załóżmy, że ciągi mają spacje wiodące lub końcowe, których nie chcesz wyświetlać. Chcesz **przyciąć** spacje z ciągów.

    Metoda <xref:System.String.Trim%2A> i powiązane <xref:System.String.TrimStart%2A> <xref:System.String.TrimEnd%2A> metody i wykonać tę pracę. Można po prostu użyć tych metod, aby usunąć spacje wiodące i końcowe. Wypróbuj poniższy kod:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Ten przykład wzmacnia kilka ważnych konceptów związanych z pracą z ciągami. Metody manipulujące ciągami zwracają nowe obiekty ciągów zamiast wprowadzać modyfikacje w ciągach źródłowych. Widać, że każde wywołanie `Trim` dowolnej z metod zwraca nowy ciąg, ale nie zmienia oryginalnej wiadomości.


    Istnieją inne metody umożliwiające pracę z ciągami. Na przykład prawdopodobnie wcześniej używano polecenia wyszukiwania i zastępowania w edytorze lub edytorze tekstu. Metoda <xref:System.String.Replace%2A> robi coś podobnego w ciągu. Wyszukuje podciąg i zastępuje go innym tekstem. Metoda <xref:System.String.Replace%2A> przyjmuje dwa **parametry**. Są to ciągi pomiędzy nawiasami. Pierwszy ciąg to tekst, który zostanie wyszukany. Drugi ciąg to tekst, którym zostanie zastąpiony wyszukany tekst. Wypróbuj to samodzielnie. Dodaj ten kod. Wpisz go, aby zobaczyć wskazówki, `.Re` jak `sayHello` zacząć wpisywać po zmiennej:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Dwie inne użyteczne metody zmieniają ciąg na WSZYSTKO WIELKIMI LITERAMI lub wszystko małymi literami. Spróbuj użyć następującego kodu. Wpisz go, aby zobaczyć, jak **IntelliSense** zawiera `To`wskazówki, jak zacząć pisać:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Wyszukiwanie ciągów
  durationInMinutes: 10
  content: >
    Inną częścią operacji *wyszukaj i zamień* jest odnajdywanie tekstu w ciągu. Możesz użyć metody <xref:System.String.Contains%2A> do wyszukiwania. Przekazuje ona informację o tym, czy ciąg zawiera podciąg. Wypróbuj poniższy kod, aby przyjrzeć się metodzie <xref:System.String.Contains%2A>:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    Metoda <xref:System.String.Contains%2A> zwraca **wartość logiczną**, która informuje o tym, czy wyszukiwany ciąg został odnaleziony. **Wartość logiczna** przechowuje wartość `true` lub `false`. Są one wyświetlane jako dane wyjściowe `True` `False`tekstu, odpowiednio: i , odpowiednio. O **wartościach logicznych** dowiesz się więcej z późniejszej lekcji.


    ***Wyzwanie***


    Istnieją dwie podobne metody, <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A>, które również wyszukują podciągi w ciągu. Służą one do wyszukiwania podciągu na początku lub na końcu ciągu. Spróbuj zmodyfikować poprzedni przykład tak, aby użyć metod <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A> zamiast metody <xref:System.String.Contains%2A>. Wyszukaj słowa „You” lub „goodbye” na początku ciągu. Wyszukaj słowa „hello” lub „goodbye” na końcu ciągu.


    > [!NOTE]

    > Zwróć uwagę na interpunkcję podczas testowania tekstu na końcu ciągu. Jeśli ciąg kończy się kropką, musisz sprawdzać ciągi kończące się kropką.


    Metoda powinna zwrócić wartość `true` dla wyrazu „You” na początku i „hello” na końcu oraz wartość false dla wyrazu „goodbye” na początku i na końcu.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Ukończenie wyzwania
  durationInMinutes: 3
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Ukończono wprowadzenie "Hello C#" do samouczka języka C#. Możesz wybrać **łącze Numery w języku C#** poniżej, aby rozpocząć następny interaktywny samouczek, lub odwiedź [witrynę platformy .NET,](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) aby pobrać zestaw SDK .NET Core, utworzyć projekt na komputerze i zachować kodowanie. Sekcja "Następne kroki" przenosi cię z powrotem do tych samouczków.


    Do dalszej `string` lektury na temat typu:

    - [C# Przewodnik programowania temat](../../programming-guide/index.md) [ciągów](../../programming-guide/strings/index.md).

    - [Jak wskazówki dotyczące pracy z ciągami](../../how-to/index.md#working-with-strings).
