### YamlMime:Tutorial
title: Informacje o logice warunkowej przy użyciu instrukcji Branch i Loop
metadata:
  title: Gałęzie i pętle — wprowadzenie do interaktywnego samouczka języka C#
  description: W tym samouczku dotyczącym gałęzi i pętli będziesz używać przeglądarki do interaktywnego nauczenia się w języku C#. Będziesz pisać kod w języku C# oraz zobaczysz wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekcja list
  ms.openlocfilehash: b0a967ea2e5212887d617e76b4ecb445cfbb8b55
  ms.sourcegitcommit: 8b02d42f93adda304246a47f49f6449fc74a3af4
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 04/24/2020
  ms.locfileid: "82135935"
items:
- durationInMinutes: 1
  content: >
    W tym samouczku przedstawiono sposób pisania kodu, który analizuje zmienne i zmienia ścieżkę wykonywania na podstawie tych zmiennych. Użyjesz przeglądarki do interaktywnego pisania kodu w języku C# oraz wyświetlania wyniku kompilacji i uruchomienia kodu. Ten samouczek zawiera szereg lekcji, które eksplorują gałęzie i konstrukcje w pętli w języku C#. Te lekcje umożliwiają poznanie podstaw języka C#.
- title: Podejmowanie decyzji za pomocą instrukcji if
  durationInMinutes: 4
  content: >
    Uruchom poniższy kod w oknie interaktywnym. Wybierz przycisk **Przejdź do trybu koncentracji uwagi** . Następnie wpisz poniższy blok kodu w oknie interaktywnym i wybierz polecenie **Uruchom**:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Jeśli używasz tego środowiska w środowisku, należy postępować zgodnie z instrukcjami dotyczącymi [wersji lokalnej](branches-and-loops-local.md) .


    Zmodyfikuj deklarację zmiennej `b`, tak aby suma była mniejsza niż 10:


    ```csharp

    int b = 3;

    ```


    Wybierz ponownie przycisk **Uruchom** . Ponieważ odpowiedź jest mniejsza niż 10, nic nie zostanie wyświetlone. Testowany **warunek** ma wartość false. Nie ma żadnego kodu do wykonania, ponieważ napisano kod tylko dla jednej z możliwych gałęzi instrukcji `if`: wykonywanej dla wartości true.


    > [!TIP]

    > Podczas nauki języka C# (lub dowolnego języka programowania) będziesz robić błędy przy pisaniu kodu. **Kompilator** znajdzie te błędy i zgłosi je. Jeśli dane wyjściowe zawierają komunikaty o błędach, sprawdź uważnie przykładowy kod oraz kod w oknie interaktywnym, aby znaleźć fragmenty wymagające poprawienia.

    > To ćwiczenie pomoże Ci poznać strukturę kodu w języku C#.


    Pierwszy przykład przedstawia możliwości instrukcji `if` i typów logicznych. Zmienna *typu logicznego* to zmienna, która może mieć jedną z dwóch wartości: `true` lub `false`. Język C# definiuje specjalny typ dla zmiennych logicznych: `bool`. Instrukcja `if` umożliwia sprawdzenie wartości typu `bool`. Jeśli wartość to `true`, zostanie wykonana instrukcja następująca po instrukcji `if`. W przeciwnym razie zostanie ona pominięta.


    Taki proces sprawdzania warunków i wykonywania instrukcji na podstawie tych warunków daje ogromne możliwości. Dowiedzmy się więcej.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Łączenie działania instrukcji if i else
  durationInMinutes: 10
  content: "\nAby wykonać różny kod w gałęziach dla wartości true i false, należy utworzyć gałąź `else` wykonywaną, jeśli wartość warunku to false. Spróbuj tego:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nInstrukcja po słowie kluczowym `else` jest wykonywana tylko wtedy, gdy testowany warunek ma wartość `false`. Połączenie instrukcji `if` i `else` za pomocą warunków logicznych daje wszelkie potrzebne możliwości.\n\n> [!IMPORTANT]\n> Wcięcia pod instrukcjami `if` i `else` służą tylko do zwiększenia czytelności.\n> Język C# nie traktuje wcięcia ani odstępu jako znaczącego.\n> Instrukcja po słowie kluczowym `if` lub `else` zostanie wykonana w zależności od warunku. Wszystkie przykłady w tym samouczku są zgodne ze wspólną metodą tworzenia wcięć wierszy na podstawie przepływu sterowania instrukcji.\n\nPonieważ wcięcia nie mają znaczenia, należy użyć znaków `{` i `}` do określenia, czy do bloku wykonywanego warunkowo ma należeć więcej niż jedna instrukcja. Programiści języka C# zazwyczaj używają nawiasów klamrowych we wszystkich klauzulach `if` i `else`. Następujący przykład jest taki sam jak właśnie utworzony. Wypróbuj go.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> W pozostałej części tego samouczka wszystkie przykłady kodu zawierają nawiasy klamrowe, po zastosowaniu zaakceptowanych praktyk.\n\nIstnieje możliwość testowania bardziej skomplikowanych warunków:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n`==` Symbol sprawdza *równość*. Użycie `==` odróżnia test pod kątem równości przed przypisaniem `a = 5`.\n\nZnaki `&&` określają warunek „i”. Oznacza to, że instrukcja w gałęzi dla wartości true zostanie wykonana tylko wtedy, gdy oba warunki będą mieć wartość true.  Te przykłady przedstawiają także, że można użyć wielu instrukcji w każdej gałęzi warunkowej, jeśli zostaną umieszczone między znakami `{` i `}`.\n\nIstnieje także możliwość użycia znaków `||` reprezentujących warunek „lub”:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n`a`Zmodyfikuj wartości, `b`i `c` i przełączenie między `&&` i `||` do Eksploruj. Dowiesz się `&&` , jak działają operatory i `||` .\n\n> [!NOTE]\n> To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Użycie pętli do powtarzania operacji
  durationInMinutes: 6
  content: >
    Innym pojęciem ważnym dla tworzenia większych programów są **pętle**. Pętle służą do powtarzania instrukcji, które mają być wykonane więcej niż raz. Wypróbuj ten kod w oknie interaktywnym:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    Instrukcja `while` sprawdza warunek i wykonuje instrukcję po instrukcji `while`. Sprawdzanie warunku i wykonywanie instrukcji będzie powtarzane do momentu, gdy warunek będzie mieć wartość false.


    Ten przykład zawiera jeszcze jeden nowy operator. Znaki `++` po zmiennej `counter` oznaczają operator **inkrementacji**. Dodaje on 1 do wartości counter i zapisuje wynikową wartość w zmiennej counter.


    > [!IMPORTANT]

    > Upewnij się, że warunek pętli `while` przyjmie wartość false podczas wykonywania kodu. W przeciwnym razie wystąpi **pętla nieskończona**, czyli wykonywanie programu nigdy się nie skończy. Nie będziemy tego przedstawiać, ponieważ aparat uruchamiający kod przekroczy limit czasu i żadne dane wyjściowe programu nie zostaną wyświetlone.


    Pętla `while` testuje warunek przed wykonaniem kodu po instrukcji `while`. Pętla `do`...`while` najpierw wykonuje kod, a następnie sprawdza warunek. Wygląda to w ten sposób:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Pętla `do` i wcześniejsza pętla `while` działają tak samo.


    Przejdźmy do ostatniej instrukcji pętli.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Praca z pętlą for
  durationInMinutes: 5
  content: >
    Inna powszechnie używana w kodzie C# instrukcja pętli to pętla `for`. Wypróbuj ten kod w oknie interaktywnym:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Działa on tak samo jak już przedstawione pętle `while` i `do`. Instrukcja `for` składa się z trzech części, które sterują jej pracą.


    Pierwsza część to **inicjator for**: `int counter = 0;` deklaruje, że `counter` jest to zmienna pętli, i ustawia jej wartość początkową `0`na.


    Częścią średnią jest **warunek dla**: `counter < 10` deklaruje, `for` że ta pętla będzie działać tak długo, jak wartość licznika jest mniejsza niż 10.


    Ostatnia część to **iterator**: `counter++` określa, jak zmodyfikować zmienną pętli po wykonaniu bloku po `for` instrukcji. Tutaj zdefiniowano, że zmienną `counter` należy zwiększyć o 1 po każdym wykonaniu bloku.


    Poeksperymentuj samodzielnie z tymi elementami. Wypróbuj poniższe modyfikacje:


    - Zmień inicjator, tak aby miał inną wartość początkową.

    - Zmień warunek, tak aby zatrzymanie pętli nastąpiło przy innej wartości.


    Gdy skończysz, przejdziemy do samodzielnego pisania kodu, gdzie wykorzystasz zdobyte umiejętności.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Utworzone Pętle zagnieżdżone
  durationInMinutes: 10
  content: "Pętla `do` lub `for` może być zagnieżdżona w innej pętli `while`, aby utworzyć macierz przy użyciu kombinacji każdego elementu w pętli zewnętrznej z każdym elementem w wewnętrznej pętli. Zróbmy to, aby utworzyć zestaw par alfanumerycznych do reprezentowania wierszy i kolumn.\n\nJedna `for` pętla może generować wiersze:\n\n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  Console.WriteLine($\"The row is {row}\");\n}\n```\n\nInna pętla może generować kolumny:\n\n```csharp\nfor (char column = 'a'; column < 'k'; column++)\n{\n  Console.WriteLine($\"The column is {column}\");\n}\n```\n\nMożna zagnieździć jedną pętlę wewnątrz par:\n  \n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  for (char column = 'a'; column < 'k'; column++)\n  {\n    Console.WriteLine($\"The cell is ({row}, {column})\");\n  }\n}\n```\n\nMożna zobaczyć, że pętla zewnętrzna przyrostowo rośnie dla każdego pełnego przebiegu pętli wewnętrznej. Wycofaj zagnieżdżanie wierszy i kolumn i zobacz zmiany dla siebie.\n"
- title: Łączenie gałęzi i pętli
  durationInMinutes: 12
  content: >
    Teraz, gdy znasz już instrukcję `if` i konstrukcje pętli w języku C#, sprawdź, czy potrafisz napisać kod C# obliczający sumę wszystkich liczb całkowitych z zakresu 1-20 podzielnych przez 3.  Oto kilka wskazówek:


    - Operator `%` umożliwia obliczenie reszty z operacji dzielenia.

    - Instrukcja `if` umożliwia zdefiniowanie warunku określającego, czy liczba powinna być częścią sumy.

    - Pętla `for` ułatwia powtórzenie serii kroków dla wszystkich liczb z zakresu 1-20.


    Spróbuj napisać kod. Następnie wykonaj go, aby dowiedzieć się, jak Ci poszło. Wskazówka: odpowiedź powinna wynosić 63.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Ukończenie wyzwania
  durationInMinutes: 1
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Gratulacje!
  content: >-
    Ukończono Samouczek interaktywny "gałęzie i pętle". Możesz wybrać link **kolekcji list** poniżej, aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie. Sekcja "następne kroki" umożliwia powrót do tych samouczków.


    Więcej na temat tych pojęć możesz dowiedzieć się w następujących tematach:


    - [if i else, instrukcje](../../language-reference/keywords/if-else.md)

    - [While, instrukcja](../../language-reference/keywords/while.md)

    - [do, instrukcja](../../language-reference/keywords/do.md)

    - [For — instrukcja](../../language-reference/keywords/for.md)
