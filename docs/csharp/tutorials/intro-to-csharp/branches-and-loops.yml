### YamlMime:Tutorial
title: <span data-ttu-id="568d7-101">Dowiedz się, logikę warunkową instrukcji gałęzi i pętli</span><span class="sxs-lookup"><span data-stu-id="568d7-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Gałęzie i pętle — wprowadzenie do C# interaktywnego samouczka
  description: W tym samouczku omawiającym gałęzie i pętle użyjesz przeglądarki, aby dowiedzieć się więcej C# interaktywnie. Będziesz pisać kod w języku C# i wyświetlić wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="568d7-105">Kolekcja listy</span><span class="sxs-lookup"><span data-stu-id="568d7-105">The list collection</span></span>
  ms.openlocfilehash: 62cc52e22406c6c19dad6cc800078e0d8f34f0d6
  ms.sourcegitcommit: 0be8a279af6d8a43e03141e349d3efd5d35f8767
  ms.translationtype: HT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 04/18/2019
  ms.locfileid: "59427529"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="568d7-106">Ten samouczek omawia sposób pisanie kodu badającego zmienne i wybierającego ścieżkę wykonania na podstawie tych zmiennych.</span><span class="sxs-lookup"><span data-stu-id="568d7-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="568d7-107">Użyjesz przeglądarki do pisania C# interaktywnie i wyświetlić wyniki kompilacji i uruchomienia kodu.</span><span class="sxs-lookup"><span data-stu-id="568d7-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="568d7-108">Ten samouczek zawiera serię lekcji przedstawiających konstrukcje w gałęzi i pętli C#.</span><span class="sxs-lookup"><span data-stu-id="568d7-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="568d7-109">Te lekcje umożliwiają poznanie podstaw języka C#.</span><span class="sxs-lookup"><span data-stu-id="568d7-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="568d7-110">Podejmowanie decyzji za pomocą if — instrukcja</span><span class="sxs-lookup"><span data-stu-id="568d7-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="568d7-111">Uruchom następujący kod w oknie interaktywnym.</span><span class="sxs-lookup"><span data-stu-id="568d7-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="568d7-112">Aby to zrobić, wpisz poniższy blok kodu w oknie interaktywnym, a następnie kliknij przycisk **Uruchom** przycisku:</span><span class="sxs-lookup"><span data-stu-id="568d7-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="568d7-113">Zmodyfikuj deklarację zmiennej `b` , tak aby suma była mniejsza niż 10:</span><span class="sxs-lookup"><span data-stu-id="568d7-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="568d7-114">Kliknij przycisk **Uruchom** ponownie przycisk.</span><span class="sxs-lookup"><span data-stu-id="568d7-114">Click the **Run** button again.</span></span> <span data-ttu-id="568d7-115">Ponieważ odpowiedź jest mniejsza niż 10, nic nie zostanie wyświetlone.</span><span class="sxs-lookup"><span data-stu-id="568d7-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="568d7-116">**Warunek** jesteś testowania ma wartość false.</span><span class="sxs-lookup"><span data-stu-id="568d7-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="568d7-117">Nie masz żadnego kodu do wykonania, ponieważ zostały zapisane wyłącznie jedną z możliwych gałęzi dla `if` instrukcji: gałęzi dla wartości true.</span><span class="sxs-lookup"><span data-stu-id="568d7-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="568d7-118">Gdy eksplorujesz C# (lub dowolnego języka programowania), będziesz robić błędy podczas pisania kodu.</span><span class="sxs-lookup"><span data-stu-id="568d7-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="568d7-119">**Kompilatora** znajdzie te błędy i zgłosi je.</span><span class="sxs-lookup"><span data-stu-id="568d7-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="568d7-120">Gdy dane wyjściowe zawierają komunikaty o błędach, Przyjrzyj się uważnie przykładowy kod i kod w oknie interaktywnym, aby zobaczyć, jak naprawić.</span><span class="sxs-lookup"><span data-stu-id="568d7-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="568d7-121">To ćwiczenie pomoże Ci poznać strukturę kodu C#.</span><span class="sxs-lookup"><span data-stu-id="568d7-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="568d7-122">Pierwszy przykład przedstawia możliwości `if` i typów logicznych.</span><span class="sxs-lookup"><span data-stu-id="568d7-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="568d7-123">A *logiczna* jest zmienną, która może mieć jedną z dwóch wartości: `true` lub `false`.</span><span class="sxs-lookup"><span data-stu-id="568d7-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="568d7-124">Język C# definiuje specjalny typ `bool` dla zmiennych logicznych.</span><span class="sxs-lookup"><span data-stu-id="568d7-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="568d7-125">`if` Instrukcji sprawdza wartość `bool`.</span><span class="sxs-lookup"><span data-stu-id="568d7-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="568d7-126">Jeśli wartość to `true`, instrukcji następującej `if` wykonuje.</span><span class="sxs-lookup"><span data-stu-id="568d7-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="568d7-127">W przeciwnym razie zostanie ona pominięta.</span><span class="sxs-lookup"><span data-stu-id="568d7-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="568d7-128">Ten proces sprawdzania warunków i wykonywania instrukcji na podstawie tych warunków są ogromne.</span><span class="sxs-lookup"><span data-stu-id="568d7-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="568d7-129">Dowiedzmy się więcej.</span><span class="sxs-lookup"><span data-stu-id="568d7-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="568d7-130">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="568d7-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="568d7-131">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="568d7-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="568d7-132">Upewnij się, jeśli i inne współpracują ze sobą</span><span class="sxs-lookup"><span data-stu-id="568d7-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"568d7-133\">Aby wykonać różny kod w gałęzie true i false, należy utworzyć `else` gałęzi, która wykonuje, gdy warunek jest fałszywy.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"568d7-134\">Wypróbuj:</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"568d7-135\">Instrukcja po słowie `else` — słowo kluczowe jest wykonywany tylko wtedy, gdy testowany warunek jest `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"568d7-136\">Łącząc `if` i `else` atrybut typu wartość logiczna warunki zapewnia wszystkie potrzebne możliwości.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"568d7-137\">Wcięcia pod `if` i `else` instrukcji jest czytelności.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"568d7-138\">W języku C# nie mają wcięcia ani białe miejsca znaczenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"568d7-139\">Instrukcja po słowie `if` lub `else` — słowo kluczowe zostanie wykonana w zależności od warunku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"568d7-140\">Wszystkie przykłady w tym samouczku wykonaj jest stosowana powszechna praktyka wcięć odpowiadających przepływowi sterowania instrukcji.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"568d7-141\">Ponieważ wcięcia nie ma znaczenia, należy użyć `{` i `}` wskazać, kiedy ma więcej niż jedna instrukcja jako część bloku wykonywanego warunkowo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"568d7-142\">Programiści języka C# zazwyczaj używają nawiasów klamrowych we wszystkich `if` i `else` klauzul.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"568d7-143\">Poniższy przykład jest taki sam jak właśnie utworzony.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"568d7-144\">Wypróbuj go.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"568d7-145\">Za pomocą pozostałej części tego samouczka, wszystkie przykłady kodu zawierają nawiasy klamrowe, zgodnie z przyjętą.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"568d7-146\">Możesz przetestować bardziej skomplikowanych warunków:</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"568d7-147\">`==` Symboli testów dla *równości*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"568d7-148\">Za pomocą `==` wyróżnia testowanie równości z przypisania, które zostały użyte w `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"568d7-149\">`&&` Reprezentuje \"i\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"568d7-150\">Oznacza to, że oba warunki muszą być spełnione, aby wykonać tę instrukcję w gałęzi dla wartości true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"568d7-151\">Te przykłady przedstawiają także, może mieć wielu instrukcji w każdej gałęzi warunkowej, pod warunkiem, należy ująć je w `{` i `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"568d7-152\">Można również użyć `||` do reprezentowania \"lub\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"568d7-153\">Zmodyfikuj wartości `a`, `b`, i `c` i przełączać się między `&&` i `||` do zbadania.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"568d7-154\">Uzyskasz więcej zrozumieć sposób, w jaki `&&` i `||` pracy operatorów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"568d7-155\">To środowisko kodowania online jest w trybie podglądu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"568d7-156\">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"568d7-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="568d7-157">Użycie pętli do powtarzania operacji</span><span class="sxs-lookup"><span data-stu-id="568d7-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="568d7-158">Innym pojęciem ważnym dla tworzenia większych programów są **pętli**.</span><span class="sxs-lookup"><span data-stu-id="568d7-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="568d7-159">Pętle służą do powtarzania instrukcji, które chcesz wykonać więcej niż jeden raz.</span><span class="sxs-lookup"><span data-stu-id="568d7-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="568d7-160">Wypróbuj ten kod w oknie interaktywnym:</span><span class="sxs-lookup"><span data-stu-id="568d7-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="568d7-161">`while` Instrukcji sprawdza warunek i wykonuje instrukcję po `while`.</span><span class="sxs-lookup"><span data-stu-id="568d7-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="568d7-162">Będzie powtarzane sprawdzanie warunku i wykonywanie instrukcji, dopóki warunek jest fałszywy.</span><span class="sxs-lookup"><span data-stu-id="568d7-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="568d7-163">W tym przykładzie jest jeszcze jeden nowy operator.</span><span class="sxs-lookup"><span data-stu-id="568d7-163">There's one other new operator in this example.</span></span> <span data-ttu-id="568d7-164">`++` Po `counter` zmienna jest **przyrostu** operatora.</span><span class="sxs-lookup"><span data-stu-id="568d7-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="568d7-165">Dodaje 1 do wartości counter i zapisuje wynikową wartość w zmiennej counter.</span><span class="sxs-lookup"><span data-stu-id="568d7-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="568d7-166">Upewnij się, że `while` zapętlenie przyjmie wartość false podczas wykonywania kodu.</span><span class="sxs-lookup"><span data-stu-id="568d7-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="568d7-167">W przeciwnym razie utwórz **Pętla nieskończona** gdzie programu nigdy się nie skończy.</span><span class="sxs-lookup"><span data-stu-id="568d7-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="568d7-168">Nie pokażemy, ponieważ aparat uruchamiający kod będzie limit czasu, aby zobaczyć żadne dane wyjściowe z programu.</span><span class="sxs-lookup"><span data-stu-id="568d7-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="568d7-169">`while` Pętli testuje warunek przed wykonaniem kodu po `while`.</span><span class="sxs-lookup"><span data-stu-id="568d7-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="568d7-170">`do` ... `while` pętli najpierw wykonuje kod, a następnie sprawdza warunek.</span><span class="sxs-lookup"><span data-stu-id="568d7-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="568d7-171">Wygląda ono następująco:</span><span class="sxs-lookup"><span data-stu-id="568d7-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="568d7-172">To `do` pętli i wcześniej `while` pętli działać tak samo.</span><span class="sxs-lookup"><span data-stu-id="568d7-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="568d7-173">Przyjrzyjmy się ostatniej instrukcji pętli.</span><span class="sxs-lookup"><span data-stu-id="568d7-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="568d7-174">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="568d7-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="568d7-175">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="568d7-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="568d7-176">Praca z pętli for</span><span class="sxs-lookup"><span data-stu-id="568d7-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="568d7-177">Jest innym wspólnej instrukcji pętli, który znajduje się w kodzie języka C# `for` pętli.</span><span class="sxs-lookup"><span data-stu-id="568d7-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="568d7-178">Wypróbuj ten kod w oknie interaktywnym:</span><span class="sxs-lookup"><span data-stu-id="568d7-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="568d7-179">To działa ten sam jako `while` pętli i `do` pętli został już użyty.</span><span class="sxs-lookup"><span data-stu-id="568d7-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="568d7-180">`for` Instrukcja składa się z trzech części, które sterują jej pracą.</span><span class="sxs-lookup"><span data-stu-id="568d7-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="568d7-181">Pierwsza część to **dla inicjatora**: `int counter = 0;` oświadcza, że `counter` jako zmienną pętli i ustawia jej wartość początkową `0`.</span><span class="sxs-lookup"><span data-stu-id="568d7-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="568d7-182">Środkowa część to **warunku**: `counter < 10` oświadcza, że `for` pętli kontynuuje wykonywanie dopóki wartość licznika jest mniejsza niż 10.</span><span class="sxs-lookup"><span data-stu-id="568d7-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="568d7-183">Ostatnia część to **dla iteratora**: `counter++` określa sposób modyfikowana zmienna pętli po wykonaniu bloku występującego `for` instrukcji.</span><span class="sxs-lookup"><span data-stu-id="568d7-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="568d7-184">Określa ona, że w tym miejscu `counter` należy zwiększyć o 1 po każdym wykonaniu bloku.</span><span class="sxs-lookup"><span data-stu-id="568d7-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="568d7-185">Wypróbuj te samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="568d7-185">Experiment with these yourself.</span></span> <span data-ttu-id="568d7-186">Wypróbuj następujące czynniki:</span><span class="sxs-lookup"><span data-stu-id="568d7-186">Try each of the following:</span></span>


    - <span data-ttu-id="568d7-187">Zmień inicjator, tak aby można było uruchomić na inną wartość.</span><span class="sxs-lookup"><span data-stu-id="568d7-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="568d7-188">Zmień warunek, którego chcesz zatrzymać miał inną wartość.</span><span class="sxs-lookup"><span data-stu-id="568d7-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="568d7-189">Gdy skończysz, przejdziemy pisania kodu, co wykorzystasz zdobyte umiejętności do samodzielnego.</span><span class="sxs-lookup"><span data-stu-id="568d7-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="568d7-190">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="568d7-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="568d7-191">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="568d7-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="568d7-192">Łączenie gałęzi i pętli</span><span class="sxs-lookup"><span data-stu-id="568d7-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="568d7-193">Teraz, gdy wiesz `if` instrukcji i konstrukcje pętli w języku C#, zobacz, jeśli można napisać kod C# obliczający sumę wszystkich liczb całkowitych od 1 do 20 podzielnych przez 3.</span><span class="sxs-lookup"><span data-stu-id="568d7-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="568d7-194">Poniżej przedstawiono kilka wskazówek:</span><span class="sxs-lookup"><span data-stu-id="568d7-194">Here are a few hints:</span></span>


    - <span data-ttu-id="568d7-195">`%` Operator umożliwia obliczenie reszty z operacji dzielenia.</span><span class="sxs-lookup"><span data-stu-id="568d7-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="568d7-196">`if` Instrukcji zapewnia warunku określającego, jeśli liczba powinna być częścią sumy.</span><span class="sxs-lookup"><span data-stu-id="568d7-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="568d7-197">`for` Pętli ułatwia powtórzenie serii kroków dla wszystkich liczb od 1 do 20.</span><span class="sxs-lookup"><span data-stu-id="568d7-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="568d7-198">Wypróbuj ją samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="568d7-198">Try it yourself.</span></span> <span data-ttu-id="568d7-199">Sprawdź, jak Ci poszło.</span><span class="sxs-lookup"><span data-stu-id="568d7-199">Then check how you did.</span></span> <span data-ttu-id="568d7-200">Jako wskazówka odpowiedź powinna wynosić 63.</span><span class="sxs-lookup"><span data-stu-id="568d7-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="568d7-201">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="568d7-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="568d7-202">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="568d7-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="568d7-203">Ukończenie wyzwania</span><span class="sxs-lookup"><span data-stu-id="568d7-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="568d7-204">Czy Twój pomysł był podobny do poniższego?</span><span class="sxs-lookup"><span data-stu-id="568d7-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="568d7-205">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="568d7-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="568d7-206">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="568d7-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="568d7-207">Gratulacje!</span><span class="sxs-lookup"><span data-stu-id="568d7-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="568d7-208">"Gałęzie i pętle" interaktywnego samouczka został ukończony.</span><span class="sxs-lookup"><span data-stu-id="568d7-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="568d7-209">Możesz kliknąć pozycję **ciągi interpolowane** poniższe łącze do uruchomienia interaktywnego samouczka dalej lub mogą odwiedzić [lokacji .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) można pobrać zestawu .NET Core SDK, Utwórz projekt na komputerze i Zachowaj kodowania.</span><span class="sxs-lookup"><span data-stu-id="568d7-209">You can click the **Interpolated strings** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="568d7-210">W kroku "Zachowaj Learning" łączy do tych samouczków.</span><span class="sxs-lookup"><span data-stu-id="568d7-210">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="568d7-211">Możesz dowiedzieć się więcej na temat tych pojęć w następujących tematach:</span><span class="sxs-lookup"><span data-stu-id="568d7-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="568d7-212">Jeśli i else, instrukcja</span><span class="sxs-lookup"><span data-stu-id="568d7-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="568d7-213">while — instrukcja</span><span class="sxs-lookup"><span data-stu-id="568d7-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="568d7-214">— Instrukcja</span><span class="sxs-lookup"><span data-stu-id="568d7-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="568d7-215">For — instrukcja</span><span class="sxs-lookup"><span data-stu-id="568d7-215">For statement</span></span>](../../language-reference/keywords/for.md)
