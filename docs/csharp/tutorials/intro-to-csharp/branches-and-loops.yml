### YamlMime:Tutorial
title: <span data-ttu-id="115c9-101">Informacje o logice warunkowej przy użyciu instrukcji Branch i Loop</span><span class="sxs-lookup"><span data-stu-id="115c9-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Gałęzie i pętle — C# wprowadzenie do interaktywnego samouczka
  description: W tym samouczku dotyczącej gałęzi i pętli będziesz używać przeglądarki do interaktywnego C# nauczenia się. Napiszesz C# kod i zobaczysz wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="115c9-105">Kolekcja list</span><span class="sxs-lookup"><span data-stu-id="115c9-105">The list collection</span></span>
  ms.openlocfilehash: 445017337663aea428af2f8dcd4027d716d05751
  ms.sourcegitcommit: dfd612ba454ce775a766bcc6fe93bc1d43dfda47
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 10/09/2019
  ms.locfileid: "72179881"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="115c9-106">W tym samouczku przedstawiono sposób pisania kodu, który analizuje zmienne i zmienia ścieżkę wykonywania na podstawie tych zmiennych.</span><span class="sxs-lookup"><span data-stu-id="115c9-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="115c9-107">Będziesz używać przeglądarki, aby pisać C# interaktywnie i zobaczyć wyniki kompilowania i uruchamiania kodu.</span><span class="sxs-lookup"><span data-stu-id="115c9-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="115c9-108">Ten samouczek zawiera szereg lekcji, które eksplorują gałęzie i konstrukcje w pętli w C#.</span><span class="sxs-lookup"><span data-stu-id="115c9-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="115c9-109">Te lekcje uczyją się podstaw C# języka.</span><span class="sxs-lookup"><span data-stu-id="115c9-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="115c9-110">Podejmowanie decyzji przy użyciu instrukcji if</span><span class="sxs-lookup"><span data-stu-id="115c9-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="115c9-111">Uruchom następujący kod w oknie interaktywnym.</span><span class="sxs-lookup"><span data-stu-id="115c9-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="115c9-112">Aby to zrobić, wpisz poniższy blok kodu w oknie interaktywnym i kliknij przycisk **Uruchom** :</span><span class="sxs-lookup"><span data-stu-id="115c9-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="115c9-113">Jeśli używasz tego środowiska w środowisku, należy postępować zgodnie z instrukcjami dotyczącymi [wersji lokalnej](branches-and-loops-local.md) .</span><span class="sxs-lookup"><span data-stu-id="115c9-113">If you are running this on your environment, you should follow the instructions for the [local version](branches-and-loops-local.md) instead.</span></span>


    <span data-ttu-id="115c9-114">Zmodyfikuj deklarację `b`, aby suma była mniejsza niż 10:</span><span class="sxs-lookup"><span data-stu-id="115c9-114">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="115c9-115">Kliknij ponownie przycisk **Uruchom** .</span><span class="sxs-lookup"><span data-stu-id="115c9-115">Click the **Run** button again.</span></span> <span data-ttu-id="115c9-116">Ponieważ odpowiedź jest mniejsza niż 10, nic nie jest drukowane.</span><span class="sxs-lookup"><span data-stu-id="115c9-116">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="115c9-117">Testowany **warunek** ma wartość false.</span><span class="sxs-lookup"><span data-stu-id="115c9-117">The **condition** you're testing is false.</span></span> <span data-ttu-id="115c9-118">Nie masz żadnego kodu do wykonania, ponieważ Zapisano tylko jedną z możliwych gałęzi dla instrukcji `if`: gałąź true.</span><span class="sxs-lookup"><span data-stu-id="115c9-118">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="115c9-119">Podczas eksplorowania C# (lub dowolnego języka programowania) nastąpi pomyłki podczas pisania kodu.</span><span class="sxs-lookup"><span data-stu-id="115c9-119">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="115c9-120">**Kompilator** odnajdzie te błędy i zgłosi je do użytkownika.</span><span class="sxs-lookup"><span data-stu-id="115c9-120">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="115c9-121">Gdy dane wyjściowe zawierają komunikaty o błędach, należy dokładnie zapoznać się z przykładowym kodem i kodem w oknie interaktywnym, aby zobaczyć, co należy naprawić.</span><span class="sxs-lookup"><span data-stu-id="115c9-121">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="115c9-122">To ćwiczenie pomoże Ci poznać strukturę C# kodu.</span><span class="sxs-lookup"><span data-stu-id="115c9-122">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="115c9-123">Ten pierwszy przykład pokazuje moc `if` i typów logicznych.</span><span class="sxs-lookup"><span data-stu-id="115c9-123">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="115c9-124">*Wartość logiczna* to zmienna, która może mieć jedną z dwóch wartości: `true` lub `false`.</span><span class="sxs-lookup"><span data-stu-id="115c9-124">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="115c9-125">C#definiuje typ specjalny, `bool` dla zmiennych logicznych.</span><span class="sxs-lookup"><span data-stu-id="115c9-125">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="115c9-126">Instrukcja `if` sprawdza wartość `bool`.</span><span class="sxs-lookup"><span data-stu-id="115c9-126">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="115c9-127">Gdy wartość jest `true`, zostanie wykonana instrukcja po `if`.</span><span class="sxs-lookup"><span data-stu-id="115c9-127">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="115c9-128">W przeciwnym razie zostanie pominięty.</span><span class="sxs-lookup"><span data-stu-id="115c9-128">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="115c9-129">Ten proces sprawdzania warunków i wykonywania instrukcji na podstawie tych warunków jest bardzo wydajny.</span><span class="sxs-lookup"><span data-stu-id="115c9-129">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="115c9-130">Dowiedz się więcej.</span><span class="sxs-lookup"><span data-stu-id="115c9-130">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="115c9-131">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="115c9-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="115c9-132">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="115c9-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="115c9-133">Utwórz, jeśli i else współpracują ze sobą</span><span class="sxs-lookup"><span data-stu-id="115c9-133">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"115c9-134\">Aby wykonać inny kod zarówno dla gałęzi prawdy, jak i fałszywych, należy utworzyć gałąź `else`, która jest wykonywana, gdy warunek ma wartość false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-134\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"115c9-135\">Wypróbuj:</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-135\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"115c9-136\">Instrukcja po słowie kluczowym `else` wykonuje się tylko wtedy, gdy testowany warunek jest `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-136\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"115c9-137\">Połączenie `if` i `else` z warunkami logicznymi zapewnia wszystko, co jest potrzebne.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-137\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"115c9-138\">Wcięcia pod instrukcjami `if` i `else` są przeznaczone dla czytników ludzkich.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-138\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"115c9-139\">C# Język nie traktuje wcięcia ani odstępu jako znaczącego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-139\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"115c9-140\">Instrukcja po słowie kluczowym `if` lub `else` zostanie wykonana na podstawie warunku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-140\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"115c9-141\">Wszystkie przykłady w tym samouczku są zgodne ze wspólną metodą tworzenia wcięć wierszy na podstawie przepływu sterowania instrukcji.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-141\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"115c9-142\">Ponieważ wcięcia nie są znaczące, należy użyć `{` i `}`, aby wskazać, Kiedy chcesz, aby więcej niż jedna instrukcja była częścią bloku, który jest wykonywany warunkowo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-142\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"115c9-143\">C#programiści zwykle używają tych nawiasów klamrowych we wszystkich klauzulach `if` i `else`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-143\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"115c9-144\">Poniższy przykład jest taki sam jak właśnie utworzony.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-144\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"115c9-145\">Wypróbuj go.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-145\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"115c9-146\">W pozostałej części tego samouczka wszystkie przykłady kodu zawierają nawiasy klamrowe, po zastosowaniu zaakceptowanych praktyk.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-146\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"115c9-147\">Można testować bardziej skomplikowane warunki:</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-147\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"115c9-148\">Symbol `==` sprawdza *równość*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-148\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"115c9-149\">Przy użyciu `==` odróżnia test pod kątem równości od przydziału, który został wyświetlony w `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-149\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"115c9-150\">@No__t-0 reprezentuje \"i\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-150\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"115c9-151\">Oznacza to, że oba warunki muszą mieć wartość true, aby wykonać instrukcję w gałęzi prawdy.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-151\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"115c9-152\">Te przykłady pokazują również, że można mieć wiele instrukcji w każdej gałęzi warunkowej, pod warunkiem, że zostały one ujęte w `{` i `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-152\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"115c9-153\">Można również użyć `||` do reprezentowania \"lub\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-153\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"115c9-154\">Zmodyfikuj wartości `a`, `b` i `c` i przełączenie między `&&` i `||` do eksplorowania.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-154\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"115c9-155\">Dowiesz się, jak działają operatory `&&` i `||`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-155\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"115c9-156\">To środowisko kodowania online jest w trybie podglądu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-156\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"115c9-157\">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"115c9-157\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="115c9-158">Używanie pętli do powtarzania operacji</span><span class="sxs-lookup"><span data-stu-id="115c9-158">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="115c9-159">Kolejną ważną koncepcją tworzenia większych programów są **pętle**.</span><span class="sxs-lookup"><span data-stu-id="115c9-159">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="115c9-160">Użyjesz pętli do powtarzania instrukcji, które mają być wykonywane więcej niż raz.</span><span class="sxs-lookup"><span data-stu-id="115c9-160">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="115c9-161">Wypróbuj ten kod w oknie interaktywnym:</span><span class="sxs-lookup"><span data-stu-id="115c9-161">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="115c9-162">Instrukcja `while` sprawdza warunek i wykonuje instrukcję po `while`.</span><span class="sxs-lookup"><span data-stu-id="115c9-162">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="115c9-163">Sprawdzanie warunku i wykonywanie tych instrukcji będzie powtarzane, dopóki warunek nie ma wartości false.</span><span class="sxs-lookup"><span data-stu-id="115c9-163">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="115c9-164">W tym przykładzie istnieje jeden inny operator new.</span><span class="sxs-lookup"><span data-stu-id="115c9-164">There's one other new operator in this example.</span></span> <span data-ttu-id="115c9-165">@No__t-0 po zmiennej `counter` jest operatorem **przyrostu** .</span><span class="sxs-lookup"><span data-stu-id="115c9-165">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="115c9-166">Dodaje 1 do wartości licznika i zapisuje tę wartość w zmiennej licznika.</span><span class="sxs-lookup"><span data-stu-id="115c9-166">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="115c9-167">Upewnij się, że warunek pętli `while` jest przełączany do wartości FAŁSZ podczas wykonywania kodu.</span><span class="sxs-lookup"><span data-stu-id="115c9-167">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="115c9-168">W przeciwnym razie utworzysz **nieskończoną pętlę** , w której program nigdy się nie skończy.</span><span class="sxs-lookup"><span data-stu-id="115c9-168">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="115c9-169">Nie pokazujemy, że ponieważ aparat, na którym działa Twój kod, przekroczy limit czasu i nie będą wyświetlane dane wyjściowe z programu.</span><span class="sxs-lookup"><span data-stu-id="115c9-169">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="115c9-170">Pętla `while` sprawdza warunek przed wykonaniem kodu następującego po `while`.</span><span class="sxs-lookup"><span data-stu-id="115c9-170">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="115c9-171">Pętla `do`... `while` wykonuje najpierw kod, a następnie sprawdza warunek.</span><span class="sxs-lookup"><span data-stu-id="115c9-171">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="115c9-172">Wygląda to następująco:</span><span class="sxs-lookup"><span data-stu-id="115c9-172">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="115c9-173">Ta pętla `do` i wcześniejsza pętla `while` działają tak samo.</span><span class="sxs-lookup"><span data-stu-id="115c9-173">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="115c9-174">Przejdźmy do jednej ostatniej instrukcji Loop.</span><span class="sxs-lookup"><span data-stu-id="115c9-174">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="115c9-175">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="115c9-175">This online coding experience is in preview mode.</span></span> <span data-ttu-id="115c9-176">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="115c9-176">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="115c9-177">Pracuj z pętlą for</span><span class="sxs-lookup"><span data-stu-id="115c9-177">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="115c9-178">Kolejną częstą instrukcją pętli, która będzie C# widoczna w kodzie, jest pętla `for`.</span><span class="sxs-lookup"><span data-stu-id="115c9-178">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="115c9-179">Wypróbuj ten kod w oknie interaktywnym:</span><span class="sxs-lookup"><span data-stu-id="115c9-179">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="115c9-180">To działa tak samo jak w przypadku pętli `while` i pętli `do`, która została już użyta.</span><span class="sxs-lookup"><span data-stu-id="115c9-180">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="115c9-181">Instrukcja `for` zawiera trzy części, które kontrolują sposób działania.</span><span class="sxs-lookup"><span data-stu-id="115c9-181">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="115c9-182">Pierwsza część to **inicjator for**: `int counter = 0;` deklaruje, że `counter` jest zmienną Loop i ustawia jej wartość początkową na `0`.</span><span class="sxs-lookup"><span data-stu-id="115c9-182">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="115c9-183">Częścią średnią jest **warunek dla**: `counter < 10` deklaruje, że ta pętla `for` będzie działać tak długo, jak wartość licznika jest mniejsza niż 10.</span><span class="sxs-lookup"><span data-stu-id="115c9-183">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="115c9-184">Ostatnia część to **iterator**: `counter++` określa sposób modyfikacji zmiennej pętli po wykonaniu bloku po instrukcji `for`.</span><span class="sxs-lookup"><span data-stu-id="115c9-184">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="115c9-185">W tym miejscu określa, że wartość `counter` powinna być zwiększana o 1 za każdym razem, gdy blok zostanie wykonany.</span><span class="sxs-lookup"><span data-stu-id="115c9-185">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="115c9-186">Wypróbuj je samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="115c9-186">Experiment with these yourself.</span></span> <span data-ttu-id="115c9-187">Spróbuj wykonać następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="115c9-187">Try each of the following:</span></span>


    - <span data-ttu-id="115c9-188">Zmień inicjator tak, aby był uruchamiany z inną wartością.</span><span class="sxs-lookup"><span data-stu-id="115c9-188">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="115c9-189">Zmień warunek, aby zatrzymać z inną wartością.</span><span class="sxs-lookup"><span data-stu-id="115c9-189">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="115c9-190">Gdy skończysz, przyjrzyjmy się, aby samodzielnie napisać kod, aby użyć informacji, które znasz.</span><span class="sxs-lookup"><span data-stu-id="115c9-190">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="115c9-191">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="115c9-191">This online coding experience is in preview mode.</span></span> <span data-ttu-id="115c9-192">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="115c9-192">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="115c9-193">Połącz gałęzie i pętle</span><span class="sxs-lookup"><span data-stu-id="115c9-193">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="115c9-194">Po zapoznaniu się z instrukcją `if` i konstrukcjami pętli w C# języku Sprawdź, czy można napisać C# kod, aby znaleźć sumę wszystkich liczb całkowitych od 1 do 20, które są podzielne przez 3.</span><span class="sxs-lookup"><span data-stu-id="115c9-194">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="115c9-195">Oto kilka wskazówek:</span><span class="sxs-lookup"><span data-stu-id="115c9-195">Here are a few hints:</span></span>


    - <span data-ttu-id="115c9-196">Operator `%` umożliwia pozostałą część operacji dzielenia.</span><span class="sxs-lookup"><span data-stu-id="115c9-196">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="115c9-197">Instrukcja `if` zapewnia warunek, aby sprawdzić, czy liczba powinna być częścią sumy.</span><span class="sxs-lookup"><span data-stu-id="115c9-197">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="115c9-198">Pętla `for` może pomóc powtórzyć serię kroków dla wszystkich liczb od 1 do 20.</span><span class="sxs-lookup"><span data-stu-id="115c9-198">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="115c9-199">Wypróbuj siebie.</span><span class="sxs-lookup"><span data-stu-id="115c9-199">Try it yourself.</span></span> <span data-ttu-id="115c9-200">Następnie sprawdź, jak to się stało.</span><span class="sxs-lookup"><span data-stu-id="115c9-200">Then check how you did.</span></span> <span data-ttu-id="115c9-201">Jako wskazówkę należy uzyskać 63 na odpowiedź.</span><span class="sxs-lookup"><span data-stu-id="115c9-201">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="115c9-202">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="115c9-202">This online coding experience is in preview mode.</span></span> <span data-ttu-id="115c9-203">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="115c9-203">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="115c9-204">Ukończ wyzwanie</span><span class="sxs-lookup"><span data-stu-id="115c9-204">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="115c9-205">Czy udało Ci się to zrobić?</span><span class="sxs-lookup"><span data-stu-id="115c9-205">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="115c9-206">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="115c9-206">This online coding experience is in preview mode.</span></span> <span data-ttu-id="115c9-207">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="115c9-207">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="115c9-208">Gratulacje!</span><span class="sxs-lookup"><span data-stu-id="115c9-208">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="115c9-209">Ukończono Samouczek interaktywny "gałęzie i pętle".</span><span class="sxs-lookup"><span data-stu-id="115c9-209">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="115c9-210">Możesz kliknąć link **Kolekcja list** poniżej, aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie.</span><span class="sxs-lookup"><span data-stu-id="115c9-210">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="115c9-211">Sekcja "następne kroki" umożliwia powrót do tych samouczków.</span><span class="sxs-lookup"><span data-stu-id="115c9-211">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="115c9-212">Więcej informacji na temat tych pojęć można znaleźć w następujących tematach:</span><span class="sxs-lookup"><span data-stu-id="115c9-212">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="115c9-213">Instrukcja if i else</span><span class="sxs-lookup"><span data-stu-id="115c9-213">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="115c9-214">While, instrukcja</span><span class="sxs-lookup"><span data-stu-id="115c9-214">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="115c9-215">Do — instrukcja</span><span class="sxs-lookup"><span data-stu-id="115c9-215">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="115c9-216">For — instrukcja</span><span class="sxs-lookup"><span data-stu-id="115c9-216">For statement</span></span>](../../language-reference/keywords/for.md)
