### YamlMime:Tutorial
title: Informacje o logice warunkowej przy użyciu instrukcji Branch i Loop
metadata:
  title: Gałęzie i pętle — C# wprowadzenie do interaktywnego samouczka
  description: W tym samouczku dotyczącej gałęzi i pętli będziesz używać przeglądarki do interaktywnego C# nauczenia się. Napiszesz C# kod i zobaczysz wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekcja list
  ms.openlocfilehash: 445017337663aea428af2f8dcd4027d716d05751
  ms.sourcegitcommit: dfd612ba454ce775a766bcc6fe93bc1d43dfda47
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 10/09/2019
  ms.locfileid: "72179881"
items:
- durationInMinutes: 1
  content: >
    W tym samouczku przedstawiono sposób pisania kodu, który analizuje zmienne i zmienia ścieżkę wykonywania na podstawie tych zmiennych. Będziesz używać przeglądarki, aby pisać C# interaktywnie i zobaczyć wyniki kompilowania i uruchamiania kodu. Ten samouczek zawiera szereg lekcji, które eksplorują gałęzie i konstrukcje w pętli w C#. Te lekcje uczyją się podstaw C# języka.
- title: Podejmowanie decyzji przy użyciu instrukcji if
  durationInMinutes: 4
  content: >
    Uruchom następujący kod w oknie interaktywnym. Aby to zrobić, wpisz poniższy blok kodu w oknie interaktywnym i kliknij przycisk **Uruchom** :


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Jeśli używasz tego środowiska w środowisku, należy postępować zgodnie z instrukcjami dotyczącymi [wersji lokalnej](branches-and-loops-local.md) .


    Zmodyfikuj deklarację `b`, aby suma była mniejsza niż 10:


    ```csharp

    int b = 3;

    ```


    Kliknij ponownie przycisk **Uruchom** . Ponieważ odpowiedź jest mniejsza niż 10, nic nie jest drukowane. Testowany **warunek** ma wartość false. Nie masz żadnego kodu do wykonania, ponieważ Zapisano tylko jedną z możliwych gałęzi dla instrukcji `if`: gałąź true.


    > [!TIP]

    > Podczas eksplorowania C# (lub dowolnego języka programowania) nastąpi pomyłki podczas pisania kodu. **Kompilator** odnajdzie te błędy i zgłosi je do użytkownika. Gdy dane wyjściowe zawierają komunikaty o błędach, należy dokładnie zapoznać się z przykładowym kodem i kodem w oknie interaktywnym, aby zobaczyć, co należy naprawić.

    > To ćwiczenie pomoże Ci poznać strukturę C# kodu.


    Ten pierwszy przykład pokazuje moc `if` i typów logicznych. *Wartość logiczna* to zmienna, która może mieć jedną z dwóch wartości: `true` lub `false`. C#definiuje typ specjalny, `bool` dla zmiennych logicznych. Instrukcja `if` sprawdza wartość `bool`. Gdy wartość jest `true`, zostanie wykonana instrukcja po `if`. W przeciwnym razie zostanie pominięty.


    Ten proces sprawdzania warunków i wykonywania instrukcji na podstawie tych warunków jest bardzo wydajny. Dowiedz się więcej.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Utwórz, jeśli i else współpracują ze sobą
  durationInMinutes: 10
  content: "\nAby wykonać inny kod zarówno dla gałęzi prawdy, jak i fałszywych, należy utworzyć gałąź `else`, która jest wykonywana, gdy warunek ma wartość false. Wypróbuj:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nInstrukcja po słowie kluczowym `else` wykonuje się tylko wtedy, gdy testowany warunek jest `false`. Połączenie `if` i `else` z warunkami logicznymi zapewnia wszystko, co jest potrzebne.\n\n> [!IMPORTANT]\n> Wcięcia pod instrukcjami `if` i `else` są przeznaczone dla czytników ludzkich.\n> C# Język nie traktuje wcięcia ani odstępu jako znaczącego.\n> Instrukcja po słowie kluczowym `if` lub `else` zostanie wykonana na podstawie warunku. Wszystkie przykłady w tym samouczku są zgodne ze wspólną metodą tworzenia wcięć wierszy na podstawie przepływu sterowania instrukcji.\n\nPonieważ wcięcia nie są znaczące, należy użyć `{` i `}`, aby wskazać, Kiedy chcesz, aby więcej niż jedna instrukcja była częścią bloku, który jest wykonywany warunkowo. C#programiści zwykle używają tych nawiasów klamrowych we wszystkich klauzulach `if` i `else`. Poniższy przykład jest taki sam jak właśnie utworzony. Wypróbuj go.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> W pozostałej części tego samouczka wszystkie przykłady kodu zawierają nawiasy klamrowe, po zastosowaniu zaakceptowanych praktyk.\n\nMożna testować bardziej skomplikowane warunki:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\nSymbol `==` sprawdza *równość*. Przy użyciu `==` odróżnia test pod kątem równości od przydziału, który został wyświetlony w `a = 5`.\n\n@No__t-0 reprezentuje \"i\". Oznacza to, że oba warunki muszą mieć wartość true, aby wykonać instrukcję w gałęzi prawdy.  Te przykłady pokazują również, że można mieć wiele instrukcji w każdej gałęzi warunkowej, pod warunkiem, że zostały one ujęte w `{` i `}`.\n\nMożna również użyć `||` do reprezentowania \"lub\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nZmodyfikuj wartości `a`, `b` i `c` i przełączenie między `&&` i `||` do eksplorowania. Dowiesz się, jak działają operatory `&&` i `||`.\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Używanie pętli do powtarzania operacji
  durationInMinutes: 6
  content: >
    Kolejną ważną koncepcją tworzenia większych programów są **pętle**. Użyjesz pętli do powtarzania instrukcji, które mają być wykonywane więcej niż raz. Wypróbuj ten kod w oknie interaktywnym:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    Instrukcja `while` sprawdza warunek i wykonuje instrukcję po `while`. Sprawdzanie warunku i wykonywanie tych instrukcji będzie powtarzane, dopóki warunek nie ma wartości false.


    W tym przykładzie istnieje jeden inny operator new. @No__t-0 po zmiennej `counter` jest operatorem **przyrostu** . Dodaje 1 do wartości licznika i zapisuje tę wartość w zmiennej licznika.


    > [!IMPORTANT]

    > Upewnij się, że warunek pętli `while` jest przełączany do wartości FAŁSZ podczas wykonywania kodu. W przeciwnym razie utworzysz **nieskończoną pętlę** , w której program nigdy się nie skończy. Nie pokazujemy, że ponieważ aparat, na którym działa Twój kod, przekroczy limit czasu i nie będą wyświetlane dane wyjściowe z programu.


    Pętla `while` sprawdza warunek przed wykonaniem kodu następującego po `while`. Pętla `do`... `while` wykonuje najpierw kod, a następnie sprawdza warunek. Wygląda to następująco:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Ta pętla `do` i wcześniejsza pętla `while` działają tak samo.


    Przejdźmy do jednej ostatniej instrukcji Loop.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Pracuj z pętlą for
  durationInMinutes: 5
  content: >
    Kolejną częstą instrukcją pętli, która będzie C# widoczna w kodzie, jest pętla `for`. Wypróbuj ten kod w oknie interaktywnym:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    To działa tak samo jak w przypadku pętli `while` i pętli `do`, która została już użyta. Instrukcja `for` zawiera trzy części, które kontrolują sposób działania.


    Pierwsza część to **inicjator for**: `int counter = 0;` deklaruje, że `counter` jest zmienną Loop i ustawia jej wartość początkową na `0`.


    Częścią średnią jest **warunek dla**: `counter < 10` deklaruje, że ta pętla `for` będzie działać tak długo, jak wartość licznika jest mniejsza niż 10.


    Ostatnia część to **iterator**: `counter++` określa sposób modyfikacji zmiennej pętli po wykonaniu bloku po instrukcji `for`. W tym miejscu określa, że wartość `counter` powinna być zwiększana o 1 za każdym razem, gdy blok zostanie wykonany.


    Wypróbuj je samodzielnie. Spróbuj wykonać następujące czynności:


    - Zmień inicjator tak, aby był uruchamiany z inną wartością.

    - Zmień warunek, aby zatrzymać z inną wartością.


    Gdy skończysz, przyjrzyjmy się, aby samodzielnie napisać kod, aby użyć informacji, które znasz.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Połącz gałęzie i pętle
  durationInMinutes: 12
  content: >
    Po zapoznaniu się z instrukcją `if` i konstrukcjami pętli w C# języku Sprawdź, czy można napisać C# kod, aby znaleźć sumę wszystkich liczb całkowitych od 1 do 20, które są podzielne przez 3.  Oto kilka wskazówek:


    - Operator `%` umożliwia pozostałą część operacji dzielenia.

    - Instrukcja `if` zapewnia warunek, aby sprawdzić, czy liczba powinna być częścią sumy.

    - Pętla `for` może pomóc powtórzyć serię kroków dla wszystkich liczb od 1 do 20.


    Wypróbuj siebie. Następnie sprawdź, jak to się stało. Jako wskazówkę należy uzyskać 63 na odpowiedź.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Ukończ wyzwanie
  durationInMinutes: 1
  content: >
    Czy udało Ci się to zrobić?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Gratulacje!
  content: >-
    Ukończono Samouczek interaktywny "gałęzie i pętle". Możesz kliknąć link **Kolekcja list** poniżej, aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie. Sekcja "następne kroki" umożliwia powrót do tych samouczków.


    Więcej informacji na temat tych pojęć można znaleźć w następujących tematach:


    - [Instrukcja if i else](../../language-reference/keywords/if-else.md)

    - [While, instrukcja](../../language-reference/keywords/while.md)

    - [Do — instrukcja](../../language-reference/keywords/do.md)

    - [For — instrukcja](../../language-reference/keywords/for.md)
