### YamlMime:Tutorial
title: <span data-ttu-id="9de39-101">Informacje o logice warunkowej przy użyciu instrukcji Branch i Loop</span><span class="sxs-lookup"><span data-stu-id="9de39-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Gałęzie i pętle — C# wprowadzenie do interaktywnego samouczka
  description: W tym samouczku dotyczącej gałęzi i pętli będziesz używać przeglądarki do interaktywnego C# nauczenia się. Napiszesz C# kod i zobaczysz wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="9de39-105">Kolekcja list</span><span class="sxs-lookup"><span data-stu-id="9de39-105">The list collection</span></span>
  ms.openlocfilehash: 0456582fb0aefa9e144b71517b9d8ed619929805
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850783"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="9de39-106">W tym samouczku przedstawiono sposób pisania kodu, który analizuje zmienne i zmienia ścieżkę wykonywania na podstawie tych zmiennych.</span><span class="sxs-lookup"><span data-stu-id="9de39-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="9de39-107">Będziesz używać przeglądarki, aby pisać C# interaktywnie i zobaczyć wyniki kompilowania i uruchamiania kodu.</span><span class="sxs-lookup"><span data-stu-id="9de39-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="9de39-108">Ten samouczek zawiera szereg lekcji, które eksplorują gałęzie i konstrukcje w pętli w C#.</span><span class="sxs-lookup"><span data-stu-id="9de39-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="9de39-109">Te lekcje uczyją się podstaw C# języka.</span><span class="sxs-lookup"><span data-stu-id="9de39-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="9de39-110">Podejmowanie decyzji przy użyciu instrukcji if</span><span class="sxs-lookup"><span data-stu-id="9de39-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="9de39-111">Uruchom następujący kod w oknie interaktywnym.</span><span class="sxs-lookup"><span data-stu-id="9de39-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="9de39-112">Aby to zrobić, wpisz poniższy blok kodu w oknie interaktywnym i kliknij przycisk **Uruchom** :</span><span class="sxs-lookup"><span data-stu-id="9de39-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="9de39-113">Zmodyfikuj deklarację `b` , tak aby suma była mniejsza niż 10:</span><span class="sxs-lookup"><span data-stu-id="9de39-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="9de39-114">Kliknij ponownie przycisk **Uruchom** .</span><span class="sxs-lookup"><span data-stu-id="9de39-114">Click the **Run** button again.</span></span> <span data-ttu-id="9de39-115">Ponieważ odpowiedź jest mniejsza niż 10, nic nie jest drukowane.</span><span class="sxs-lookup"><span data-stu-id="9de39-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="9de39-116">Testowany **warunek** ma wartość false.</span><span class="sxs-lookup"><span data-stu-id="9de39-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="9de39-117">Nie masz żadnego kodu do wykonania, ponieważ Zapisano tylko jedną z możliwych gałęzi `if` instrukcji: wartość true.</span><span class="sxs-lookup"><span data-stu-id="9de39-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="9de39-118">Podczas eksplorowania C# (lub dowolnego języka programowania) nastąpi pomyłki podczas pisania kodu.</span><span class="sxs-lookup"><span data-stu-id="9de39-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="9de39-119">**Kompilator** odnajdzie te błędy i zgłosi je do użytkownika.</span><span class="sxs-lookup"><span data-stu-id="9de39-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="9de39-120">Gdy dane wyjściowe zawierają komunikaty o błędach, należy dokładnie zapoznać się z przykładowym kodem i kodem w oknie interaktywnym, aby zobaczyć, co należy naprawić.</span><span class="sxs-lookup"><span data-stu-id="9de39-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="9de39-121">To ćwiczenie pomoże Ci poznać strukturę C# kodu.</span><span class="sxs-lookup"><span data-stu-id="9de39-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="9de39-122">Ten pierwszy przykład pokazuje moc `if` i typy logiczne.</span><span class="sxs-lookup"><span data-stu-id="9de39-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="9de39-123">*Wartość logiczna* to zmienna, która może mieć jedną z dwóch wartości: `true` lub `false`.</span><span class="sxs-lookup"><span data-stu-id="9de39-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="9de39-124">C#definiuje typ specjalny, `bool` dla zmiennych logicznych.</span><span class="sxs-lookup"><span data-stu-id="9de39-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="9de39-125">Instrukcja sprawdza wartość elementu `bool`. `if`</span><span class="sxs-lookup"><span data-stu-id="9de39-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="9de39-126">Gdy wartość jest `true`, instrukcja `if` po instrukcji wykonywanej.</span><span class="sxs-lookup"><span data-stu-id="9de39-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="9de39-127">W przeciwnym razie zostanie pominięty.</span><span class="sxs-lookup"><span data-stu-id="9de39-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="9de39-128">Ten proces sprawdzania warunków i wykonywania instrukcji na podstawie tych warunków jest bardzo wydajny.</span><span class="sxs-lookup"><span data-stu-id="9de39-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="9de39-129">Dowiedz się więcej.</span><span class="sxs-lookup"><span data-stu-id="9de39-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="9de39-130">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="9de39-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="9de39-131">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="9de39-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="9de39-132">Utwórz, jeśli i else współpracują ze sobą</span><span class="sxs-lookup"><span data-stu-id="9de39-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"9de39-133\">Aby wykonać inny kod zarówno dla gałęzi prawdy, jak i fałszywych, należy utworzyć `else` gałąź, która jest wykonywana, gdy warunek ma wartość false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"9de39-134\">Wypróbuj:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"9de39-135\">Instrukcja po `else` słowie kluczowym jest wykonywana tylko wtedy, gdy testowany `false`warunek to.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"9de39-136\">Łączenie `if` i `else` z warunkami logicznymi zapewnia wszystko, co jest potrzebne.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"9de39-137\">Wcięcia pod `if` instrukcjami i `else` są przeznaczone dla czytników ludzkich.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"9de39-138\">C# Język nie traktuje wcięcia ani odstępu jako znaczącego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"9de39-139\">Instrukcja po `if` słowie kluczowym or `else` zostanie wykonana na podstawie warunku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"9de39-140\">Wszystkie przykłady w tym samouczku są zgodne ze wspólną metodą tworzenia wcięć wierszy na podstawie przepływu sterowania instrukcji.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"9de39-141\">Ponieważ wcięcia nie są znaczące, należy użyć `{` i, `}` aby wskazać, Kiedy chcesz, aby więcej niż jedna instrukcja była częścią bloku, który jest wykonywany warunkowo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"9de39-142\">C#Programiści zazwyczaj używają tych nawiasów klamrowych `if` we `else` wszystkich klauzulach i.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"9de39-143\">Poniższy przykład jest taki sam jak właśnie utworzony.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"9de39-144\">Wypróbuj go.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"9de39-145\">W pozostałej części tego samouczka wszystkie przykłady kodu zawierają nawiasy klamrowe, po zastosowaniu zaakceptowanych praktyk.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"9de39-146\">Można testować bardziej skomplikowane warunki:</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"9de39-147\">Symbol sprawdza równość. \\*\\* `==`</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"9de39-148\">Użycie `==` odróżnia test pod kątem równości przed przypisaniem `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"9de39-149\">`&&` Reprezentuje \"i\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"9de39-150\">Oznacza to, że oba warunki muszą mieć wartość true, aby wykonać instrukcję w gałęzi prawdy.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"9de39-151\">Te przykłady pokazują również, że można mieć wiele instrukcji w każdej gałęzi warunkowej, pod warunkiem, że `{` zostały `}`one ujęte w i.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"9de39-152\">Można również użyć `||` do reprezentowania \"lub\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"9de39-153\">`a`Zmodyfikuj wartości `||` , `b`i `c` i przełączenie między `&&` i do Eksploruj.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"9de39-154\">Dowiesz się `&&` , jak działają operatory i `||` .</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"9de39-155\">To środowisko kodowania online jest w trybie podglądu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"9de39-156\">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"9de39-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="9de39-157">Używanie pętli do powtarzania operacji</span><span class="sxs-lookup"><span data-stu-id="9de39-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="9de39-158">Kolejną ważną koncepcją tworzenia większych programów są **pętle**.</span><span class="sxs-lookup"><span data-stu-id="9de39-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="9de39-159">Użyjesz pętli do powtarzania instrukcji, które mają być wykonywane więcej niż raz.</span><span class="sxs-lookup"><span data-stu-id="9de39-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="9de39-160">Wypróbuj ten kod w oknie interaktywnym:</span><span class="sxs-lookup"><span data-stu-id="9de39-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="9de39-161">Instrukcja sprawdza warunek i wykonuje instrukcję `while`po instrukcji. `while`</span><span class="sxs-lookup"><span data-stu-id="9de39-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="9de39-162">Sprawdzanie warunku i wykonywanie tych instrukcji będzie powtarzane, dopóki warunek nie ma wartości false.</span><span class="sxs-lookup"><span data-stu-id="9de39-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="9de39-163">W tym przykładzie istnieje jeden inny operator new.</span><span class="sxs-lookup"><span data-stu-id="9de39-163">There's one other new operator in this example.</span></span> <span data-ttu-id="9de39-164">Gdy zmienna jest operatorem **przyrostu.** `++` `counter`</span><span class="sxs-lookup"><span data-stu-id="9de39-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="9de39-165">Dodaje 1 do wartości licznika i zapisuje tę wartość w zmiennej licznika.</span><span class="sxs-lookup"><span data-stu-id="9de39-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="9de39-166">Upewnij się, że `while` warunek pętli jest przełączany na wartość false podczas wykonywania kodu.</span><span class="sxs-lookup"><span data-stu-id="9de39-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="9de39-167">W przeciwnym razie utworzysz **nieskończoną pętlę** , w której program nigdy się nie skończy.</span><span class="sxs-lookup"><span data-stu-id="9de39-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="9de39-168">Nie pokazujemy, że ponieważ aparat, na którym działa Twój kod, przekroczy limit czasu i nie będą wyświetlane dane wyjściowe z programu.</span><span class="sxs-lookup"><span data-stu-id="9de39-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="9de39-169">Pętla sprawdza warunek przed wykonaniem kodu `while`po. `while`</span><span class="sxs-lookup"><span data-stu-id="9de39-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="9de39-170">`do` ... `while` pętla wykonuje najpierw kod, a następnie sprawdza warunek.</span><span class="sxs-lookup"><span data-stu-id="9de39-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="9de39-171">Wygląda ono następująco:</span><span class="sxs-lookup"><span data-stu-id="9de39-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="9de39-172">Ta `do` pętla i wcześniejsza `while` pętla działają tak samo.</span><span class="sxs-lookup"><span data-stu-id="9de39-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="9de39-173">Przejdźmy do jednej ostatniej instrukcji Loop.</span><span class="sxs-lookup"><span data-stu-id="9de39-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="9de39-174">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="9de39-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="9de39-175">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="9de39-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="9de39-176">Pracuj z pętlą for</span><span class="sxs-lookup"><span data-stu-id="9de39-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="9de39-177">Kolejną częstą instrukcją pętli, która będzie C# widoczna w kodzie `for` , jest pętla.</span><span class="sxs-lookup"><span data-stu-id="9de39-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="9de39-178">Wypróbuj ten kod w oknie interaktywnym:</span><span class="sxs-lookup"><span data-stu-id="9de39-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="9de39-179">Działa to tak samo jak w `while` przypadku pętli `do` i pętli, która została już użyta.</span><span class="sxs-lookup"><span data-stu-id="9de39-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="9de39-180">`for` Instrukcja ma trzy części, które kontrolują sposób działania.</span><span class="sxs-lookup"><span data-stu-id="9de39-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="9de39-181">Pierwsza część to **inicjator for**: `int counter = 0;` deklaruje, że `counter` jest to zmienna pętli, i ustawia jej wartość początkową `0`na.</span><span class="sxs-lookup"><span data-stu-id="9de39-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="9de39-182">Częścią średnią jest **warunek dla**: `counter < 10` deklaruje, `for` że ta pętla będzie działać tak długo, jak wartość licznika jest mniejsza niż 10.</span><span class="sxs-lookup"><span data-stu-id="9de39-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="9de39-183">Ostatnia część to **iterator**: `counter++` określa, jak zmodyfikować zmienną pętli po wykonaniu bloku `for` po instrukcji.</span><span class="sxs-lookup"><span data-stu-id="9de39-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="9de39-184">W tym miejscu określa, `counter` że powinny być zwiększane o 1 za każdym razem, gdy blok jest wykonywany.</span><span class="sxs-lookup"><span data-stu-id="9de39-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="9de39-185">Wypróbuj je samodzielnie.</span><span class="sxs-lookup"><span data-stu-id="9de39-185">Experiment with these yourself.</span></span> <span data-ttu-id="9de39-186">Spróbuj wykonać następujące czynności:</span><span class="sxs-lookup"><span data-stu-id="9de39-186">Try each of the following:</span></span>


    - <span data-ttu-id="9de39-187">Zmień inicjator tak, aby był uruchamiany z inną wartością.</span><span class="sxs-lookup"><span data-stu-id="9de39-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="9de39-188">Zmień warunek, aby zatrzymać z inną wartością.</span><span class="sxs-lookup"><span data-stu-id="9de39-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="9de39-189">Gdy skończysz, przyjrzyjmy się, aby samodzielnie napisać kod, aby użyć informacji, które znasz.</span><span class="sxs-lookup"><span data-stu-id="9de39-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="9de39-190">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="9de39-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="9de39-191">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="9de39-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="9de39-192">Połącz gałęzie i pętle</span><span class="sxs-lookup"><span data-stu-id="9de39-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="9de39-193">Po zapoznaniu się z `if` instrukcją i konstrukcjami pętli w C# języku Sprawdź, czy można napisać C# kod, aby znaleźć sumę wszystkich liczb całkowitych od 1 do 20, które są podzielne przez 3.</span><span class="sxs-lookup"><span data-stu-id="9de39-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="9de39-194">Oto kilka wskazówek:</span><span class="sxs-lookup"><span data-stu-id="9de39-194">Here are a few hints:</span></span>


    - <span data-ttu-id="9de39-195">`%` Operator podaje pozostałą część operacji dzielenia.</span><span class="sxs-lookup"><span data-stu-id="9de39-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="9de39-196">`if` Instrukcja zapewnia warunek, aby sprawdzić, czy liczba powinna być częścią sumy.</span><span class="sxs-lookup"><span data-stu-id="9de39-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="9de39-197">`for` Pętla może pomóc powtórzyć serię kroków dla wszystkich liczb od 1 do 20.</span><span class="sxs-lookup"><span data-stu-id="9de39-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="9de39-198">Wypróbuj siebie.</span><span class="sxs-lookup"><span data-stu-id="9de39-198">Try it yourself.</span></span> <span data-ttu-id="9de39-199">Następnie sprawdź, jak to się stało.</span><span class="sxs-lookup"><span data-stu-id="9de39-199">Then check how you did.</span></span> <span data-ttu-id="9de39-200">Jako wskazówkę należy uzyskać 63 na odpowiedź.</span><span class="sxs-lookup"><span data-stu-id="9de39-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="9de39-201">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="9de39-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="9de39-202">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="9de39-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="9de39-203">Ukończ wyzwanie</span><span class="sxs-lookup"><span data-stu-id="9de39-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="9de39-204">Czy udało Ci się to zrobić?</span><span class="sxs-lookup"><span data-stu-id="9de39-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="9de39-205">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="9de39-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="9de39-206">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="9de39-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="9de39-207">Gratulacje!</span><span class="sxs-lookup"><span data-stu-id="9de39-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="9de39-208">Ukończono Samouczek interaktywny "gałęzie i pętle".</span><span class="sxs-lookup"><span data-stu-id="9de39-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="9de39-209">Możesz kliknąć link **Kolekcja list** poniżej, aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie.</span><span class="sxs-lookup"><span data-stu-id="9de39-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="9de39-210">Sekcja "następne kroki" umożliwia powrót do tych samouczków.</span><span class="sxs-lookup"><span data-stu-id="9de39-210">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="9de39-211">Więcej informacji na temat tych pojęć można znaleźć w następujących tematach:</span><span class="sxs-lookup"><span data-stu-id="9de39-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="9de39-212">Instrukcja if i else</span><span class="sxs-lookup"><span data-stu-id="9de39-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="9de39-213">While, instrukcja</span><span class="sxs-lookup"><span data-stu-id="9de39-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="9de39-214">Do — instrukcja</span><span class="sxs-lookup"><span data-stu-id="9de39-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="9de39-215">For — instrukcja</span><span class="sxs-lookup"><span data-stu-id="9de39-215">For statement</span></span>](../../language-reference/keywords/for.md)
