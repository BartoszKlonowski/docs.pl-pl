### YamlMime:Tutorial
title: 'Manipuluj liczby całkowite i zmiennoprzecinkowe w C #'
metadata:
  title: Liczby w języku C# — wprowadzenie do samouczka interaktywnego języka C#
  description: W tym samouczku dotyczącego typów liczbowych zostanie użyta przeglądarka do interaktywnego nauczenia się języka C#. Będziesz pisać kod w języku C# i zobaczysz wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Gałęzie i pętle w języku C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: e59462be6e5ed350912849d59aa03604aa10e0e3
  ms.sourcegitcommit: de7f589de07a9979b6ac28f54c3e534a617d9425
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 05/05/2020
  ms.locfileid: "82794744"
items:
- durationInMinutes: 1
  content: >
    W tym samouczku przedstawiono informacje o typach liczbowych w języku C# interaktywnie przy użyciu przeglądarki. Napiszesz język C# i zobaczysz wyniki kompilowania i uruchamiania kodu. Zawiera on cykl lekcji dotyczących liczb i operacji matematycznych w języku C#. Te lekcje umożliwiają poznanie podstaw języka C#.
- title: Poznawanie matematyki całkowitoliczbowej
  durationInMinutes: 4
  content: >
    Uruchom poniższy kod w oknie interaktywnym. Wybierz przycisk **Przejdź do trybu koncentracji uwagi** . Następnie wpisz poniższy blok kodu w oknie interaktywnym i wybierz polecenie **Uruchom**:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Jeśli pracujesz w środowisku, należy postępować zgodnie z instrukcjami dotyczącymi [wersji lokalnej](numbers-in-csharp-local.md) .


    Zaobserwowano jedną z podstawowych operacji matematycznych z liczbami całkowitymi. Typ `int` reprezentuje **liczbę całkowitą** — ujemną lub dodatnią. Symbol `+` umożliwia dodawanie. Inne typowe operacje matematyczne na liczbach całkowitych obejmują:


    - odejmowanie — `-`

    - mnożenie — `*`

    - dzielenie — `/`


    > [!TIP]

    > W tym samouczku interaktywnym możesz samodzielnie eksplorować swoje informacje, modyfikując kod zapisany w oknie interaktywnym. W tym samouczku przedstawiono przykłady, które można wykonać w każdym kroku.


    Rozpocznij od wypróbowania różnych operacji. Zmodyfikuj trzeci wiersz, tak aby użyć każdej z następujących operacji. Po każdej edycji wybierz przycisk **Uruchom** .


    Odejmowanie:


    ```csharp

    int c = a - b;

    ```


    Mnożenie:


    ```csharp

    int c = a * b;

    ```


    Dzielenie:


    ```csharp

    int c = a / b;

    ```


    Możesz również eksperymentować, pisząc wiele operacji matematycznych w tym samym wierszu, jeśli chcesz.


    > [!TIP]

    > Podczas nauki języka C# (lub dowolnego języka programowania) będziesz robić błędy przy pisaniu kodu. **Kompilator** znajdzie te błędy i zgłosi je. Jeśli dane wyjściowe zawierają komunikaty o błędach, sprawdź uważnie przykładowy kod oraz kod w oknie interaktywnym, aby znaleźć fragmenty wymagające poprawienia.

    > To ćwiczenie pomoże Ci poznać strukturę kodu w języku C#.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Poznawanie kolejności operacji
  durationInMinutes: 7
  content: >
    Język C# definiuje kolejność wykonywania różnych operacji matematycznych zgodnie z regułami spójnymi z regułami przedstawianymi na lekcjach matematyki.

    Mnożenie i dzielenie ma priorytet przed dodawaniem i odejmowaniem.

    Zaobserwuj to, uruchamiając poniższy kod w oknie interaktywnym:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Dane wyjściowe świadczą, że mnożenie jest wykonywane przed dodawaniem.


    Inną kolejność operacji można wymusić, dodając nawiasy wokół operacji, które mają zostać wykonane jako pierwsze:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Dowiedz się więcej, łącząc wiele różnych operacji. Zastąp czwarty wiersz powyżej wierszem podobnym do następującego:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Być może zwróciło Twoją uwagę interesujące zachowanie liczb całkowitych. Dzielenie całkowitoliczbowe zawsze daje w wyniku liczbę całkowitą, nawet jeśli oczekiwało się części dziesiętnej lub ułamkowej.


    Jeśli takie zachowanie nie zostało zaobserwowane, wypróbuj następujący kod:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Wybierz pozycję **Uruchom** ponownie, aby wyświetlić wyniki.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Poznawanie precyzji i limitów liczb całkowitych
  durationInMinutes: 5
  content: >
    Ostatni przykład pokazuje, że dzielenie całkowitoliczbowe obcina wynik.

    **Resztę** można uzyskać za pomocą operatora **reszty** , `%` znaku:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    Typ całkowitoliczbowy języka C# różni się od matematycznych liczb całkowitych jeszcze tym, że typ `int` ma limit maksimum i minimum. Uruchom następujący kod w oknie interaktywnym, aby zobaczyć te limity:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Jeśli obliczenia generują wartość, która przekracza te limity, występuje warunek **niedopełnienia** lub **przepełnienia**. Odpowiedź wydaje się zawijać między limitami. Dodaj dwa następujące wiersze do okna interaktywnego, aby zobaczyć przykład:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Zwróć uwagę, że odpowiedź jest bardzo zbliżona do minimalnej (ujemnej) liczby całkowitej. Jej wartość jest równa `min + 2`.

    Operacja dodawania spowodowała **przepełnienie** wartości dozwolonych dla liczb całkowitych.

    Odpowiedź to bardzo duża liczba ujemna, ponieważ przepełnienie powoduje „zawinięcie” z największej możliwej liczby całkowitej do najmniejszej.


    Istnieją inne typy liczbowe z innymi limitami i precyzją, których możesz użyć, jeśli typ `int` nie spełnia wymagań. Przejrzyjmy te typy numerów dalej.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Praca z typem double
  durationInMinutes: 5
  content: "Typ liczbowy `double` reprezentuje liczbę zmiennoprzecinkową o podwójnej precyzji. Te pojęcia mogą być dla Ciebie nowe. Liczby **zmiennoprzecinkowe** są przydatne do reprezentowania bardzo małych lub bardzo dużych liczb innych niż liczby całkowite. **Podwójna precyzja** jest terminem względnym opisującym liczbę cyfr binarnych używanych do przechowywania wartości. Numer **podwójnej precyzji** ma dwukrotnie liczbę cyfr binarnych jako **pojedynczą precyzję**. W przypadku współczesnych komputerów częściej są używane liczby podwójnej precyzji niż pojedynczej precyzji. Liczby o **pojedynczej precyzji** są `float` deklarowane za pomocą słowa kluczowego.\nPrzyjrzyjmy się im. Wypróbuj poniższy kod w oknie interaktywnym i zobacz wynik:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nZwróć uwagę, że odpowiedź obejmuje część dziesiętną ilorazu. Spróbuj nieco bardziej skomplikowanego wyrażenia z liczbami podwójnej precyzji:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nZakres wartości liczb podwójnej precyzji jest dużo większy niż liczb całkowitych. Wypróbuj poniższy kod w oknie interaktywnym:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nWartości zostaną wyświetlone za pomocą notacji naukowej. Liczba po lewej stronie znaku `E` to mantysa. Liczba po jego prawej stronie to wykładnik jako potęga 10.\n\nPodobnie jak w przypadku liczb dziesiętnych w matematyce, przy używaniu liczb podwójnej precyzji w języku C# mogą wystąpić błędy zaokrąglania. Wypróbuj ten kod:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nWiadomo, że `0.3` nie `3/10` jest dokładnie taka sama jak `1/3`. Analogicznie `0.33` , `33/100`to. Jest to bliżej `1/3`, ale nadal nie jest dokładne. \n\n***Wyzwanie***\n\nWypróbuj inne obliczenia z dużymi liczbami, małymi liczbami, mnożeniem i dzieleniem `double` przy użyciu typu.  Spróbuj bardziej skomplikowanych obliczeń.\n\n> [!NOTE]\n> To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Pracuj z typami dziesiętnymi
  durationInMinutes: 8
  content: >
    Przedstawiono podstawowe typy danych liczbowych w języku C#: typ całkowitoliczbowy i typ podwójnej precyzji.  Istnieje jeden inny typ do poznania: `decimal` typ. Typ `decimal` ma mniejszy zakres, lecz większą precyzję niż typ `double`. Spójrzmy:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Zwróć uwagę, że zakres jest mniejszy niż w przypadku typu `double`. Większą precyzję typu dziesiętnego możesz zobaczyć, uruchamiając następujący kod:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Sufiks `M` liczb wskazuje, że stałe powinny używać typu `decimal`.


    Zwróć uwagę na to, że operacje matematyczne wykonywane na liczbach typu dziesiętnego mają więcej cyfr po prawej stronie przecinka dziesiętnego.


    Sufiks `M` liczb wskazuje, że stałe powinny używać typu `decimal`. W przeciwnym razie kompilator przyjmuje `double` typ.


    > [!NOTE]

    > Litera `M` została wybrana jako najbardziej wizualnie odrębna litera między słowami `double` kluczowymi i `decimal` .


    Zwróć uwagę na to, że operacje matematyczne wykonywane na liczbach typu dziesiętnego mają więcej cyfr po prawej stronie przecinka dziesiętnego.


    ***Wyzwanie***


    Teraz, gdy różne typy liczbowe zostały już przedstawione, napisz kod obliczający pole koła o promieniu 2,5 cm. Pole koła to promień pomnożony przez liczbę pi do kwadratu. Wskazówka: platforma .NET zawiera stałą dla liczby pi — <xref:System.Math.PI?displayProperty=nameWithType> — której możesz użyć. <xref:System.Math.PI?displayProperty=nameWithType>, podobnie jak wszystkie stałe zadeklarowane `System.Math` w przestrzeni nazw, `double` jest wartością. Z tego powodu należy użyć `double` zamiast `decimal` wartości dla tego wyzwania.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).


    Odpowiedź powinna należeć do zakresu 19-20.
- title: Ukończenie wyzwania
  durationInMinutes: 1
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Wypróbuj także inne wzory, jeśli chcesz.


    > [!NOTE]

    > To środowisko kodowania online jest dostępne w wersji zapoznawczej. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Ukończono Samouczek interaktywny "liczby w C#". Możesz wybrać poniższe łącze **gałęzie i pętle** , aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie. Sekcja "następne kroki" umożliwia powrót do tych samouczków.


    Więcej informacji na temat liczb w języku C# można znaleźć w następujących artykułach:


    - [Typy liczb całkowitych](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Zmiennoprzecinkowe rodzaje wartości numerycznych](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Wbudowane konwersje liczbowe](../../language-reference/builtin-types/numeric-conversions.md)
