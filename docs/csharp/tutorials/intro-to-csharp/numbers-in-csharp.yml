### YamlMime:Tutorial
title: Manipuluj liczby całkowite i zmiennoprzecinkowe wC#
metadata:
  title: C# Wprowadzenie do C# interaktywnego samouczka z numerami
  description: W tym samouczku dotyczącego typów liczbowych będziesz używać przeglądarki do interaktywnego nauczenia się C# . Zamierzasz napisać C# kod i zobaczyć wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Gałęzie i pętle wC#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 48268c6e839ae4f72aae0e872c837b153325b68b
  ms.sourcegitcommit: f38e527623883b92010cf4760246203073e12898
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 02/20/2020
  ms.locfileid: "77504012"
items:
- durationInMinutes: 1
  content: >
    Ten samouczek zawiera informacje o typach liczbowych w C# sposób interaktywny, przy użyciu przeglądarki do pisania C# i wyświetlania wyników kompilowania i uruchamiania kodu. Zawiera serię lekcji, które eksplorują liczby i operacje matematyczne C#w programie. Te lekcje uczyją się podstaw C# języka.
- title: Eksploruj liczbę całkowitą
  durationInMinutes: 4
  content: >
    Uruchom następujący kod w oknie interaktywnym. Wybierz przycisk **Przejdź do trybu koncentracji uwagi** . Następnie wpisz poniższy blok kodu w oknie interaktywnym i wybierz polecenie **Uruchom**:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Jeśli używasz tego środowiska w środowisku, należy postępować zgodnie z instrukcjami dotyczącymi [wersji lokalnej](numbers-in-csharp-local.md) .


    Właśnie zaobserwowano jedną z podstawowych operacji matematycznych z liczbami całkowitymi. Typ `int` reprezentuje liczbę **całkowitą**, dodatnią lub ujemną liczbą całkowitą. Użyj symbolu `+` do dodania. Inne typowe operacje matematyczne na liczbach całkowitych obejmują:


    - `-` do odejmowania

    - `*` do mnożenia

    - `/` dla dzielenia


    > [!TIP]

    > W tym samouczku interaktywnym możesz samodzielnie eksplorować swoje informacje, modyfikując kod zapisany w oknie interaktywnym. W tym samouczku przedstawiono przykłady, które można wykonać w każdym kroku.


    Zacznij od eksplorowania tych różnych operacji. Zmodyfikuj trzeci wiersz, aby wypróbować każdą z tych operacji. Po każdej edycji wybierz przycisk **Uruchom** .


    Odejmowania


    ```csharp

    int c = a - b;

    ```


    Mnożenia


    ```csharp

    int c = a * b;

    ```


    Przegrod


    ```csharp

    int c = a / b;

    ```


    Możesz również eksperymentować, wykonując wiele operacji matematycznych w tym samym wierszu, jeśli chcesz.


    > [!TIP]

    > Podczas eksplorowania C# (lub dowolnego języka programowania) nastąpi pomyłki podczas pisania kodu. **Kompilator** odnajdzie te błędy i zgłosi je do użytkownika. Gdy dane wyjściowe zawierają komunikaty o błędach, należy dokładnie zapoznać się z przykładowym kodem i kodem w oknie interaktywnym, aby zobaczyć, co należy naprawić.

    > To ćwiczenie pomoże Ci poznać strukturę C# kodu.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Eksploruj kolejność operacji
  durationInMinutes: 7
  content: >
    C# Język definiuje kolejność różnych operacji matematycznych z regułami spójnymi z regułami, które zostały uzyskane w postaci matematyki.

    Mnożenie i dzielenie mają pierwszeństwo przed dodaniem i odejmowaniem.

    Sprawdź, czy uruchamiasz następujący kod w oknie interaktywnym:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Dane wyjściowe pokazują, że mnożenie jest wykonywane przed dodaniem.


    Można wymusić inną kolejność operacji, dodając nawiasy wokół operacji lub operacji, które chcesz wykonać jako pierwsze:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Dowiedz się więcej, łącząc wiele różnych operacji. Zastąp czwarty wiersz powyżej elementem podobnym do tego:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Być może zauważono interesujące zachowanie dla liczb całkowitych. Dzielenie liczb całkowitych zawsze generuje wynik w postaci liczby całkowitej, nawet gdy oczekuje się, że wynik będzie zawierać część dziesiętną lub ułamkową.


    Jeśli takie zachowanie nie zostało zaobserwowane, spróbuj wykonać następujące czynności:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Wybierz pozycję **Uruchom** ponownie, aby wyświetlić wyniki.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Eksploruj precyzję całkowitą i limity
  durationInMinutes: 5
  content: >
    Ten ostatni przykład wskazuje, że dzielenie liczby całkowitej obcina wynik.

    **Resztę** można uzyskać za pomocą operatora **reszty** , znaku `%`:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    Typ C# Integer różni się od matematycznych liczb całkowitych w jeden inny sposób: typ `int` ma minimalne i maksymalne limity. Uruchom ten kod w oknie interaktywnym, aby zobaczyć te limity:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Jeśli obliczenie generuje wartość, która przekracza te limity, istnieje warunek **niedopełnienia** **lub** przeciążenia. Odpowiedź wydaje się być zawijana z jednego limitu do drugiego. Dodaj te dwa wiersze do okna interaktywnego, aby zobaczyć przykład:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Zwróć uwagę, że odpowiedź jest bardzo bliska minimalnej (ujemnej) liczbie całkowitej. Jest taka sama jak `min + 2`.

    Operacja dodawania **spowodowała przepełnienie** dozwolonych wartości liczb całkowitych.

    Odpowiedź to bardzo duża liczba ujemna, ponieważ przepełnienie "zawija" z największej możliwej wartości całkowitej do najmniejszej.


    Istnieją inne typy liczbowe z różnymi limitami i dokładnością, których można użyć, gdy typ `int` nie spełnia Twoich potrzeb. Eksplorujmy te informacje dalej.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Pracuj z typem Double
  durationInMinutes: 5
  content: >
    `double` typ liczbowy reprezentuje liczbę zmiennoprzecinkową o podwójnej precyzji. Te warunki mogą być nowe dla Ciebie. Liczba **zmiennoprzecinkowa** jest przydatna do reprezentowania numerów niecałkowitych, które mogą być bardzo duże lub małe. **Podwójne precyzja** oznacza, że te liczby są przechowywane z większą dokładnością niż **Pojedyncza precyzja**. Na nowoczesnych komputerach, bardziej powszechne jest użycie podwójnej precyzji niż pojedyncze numery precyzji.

    Eksplorujmy. Wypróbuj następujący kod w oknie interaktywnym i zobacz wynik:


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Należy zauważyć, że odpowiedź zawiera część dziesiętną ilorazu. Wypróbuj nieco bardziej skomplikowane wyrażenie z podwajaniem:


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Zakres wartości podwójnej jest znacznie większy niż wartości całkowite. Wypróbuj następujący kod w oknie interaktywnym:


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    Te wartości są drukowane w notacji wykładniczej. Liczba po lewej stronie `E` jest mantysę. Liczba po prawej stronie jest wykładnikiem potęgi od 10.


    Podobnie jak w przypadku liczb dziesiętnych w zapisie matematycznym, podwaja w C# może mieć błędy zaokrągleń. Wypróbuj następujący kod:


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    Wiadomo, że `0.3` powtarzane nie są dokładnie takie same, jak `1/3`.


    ***Sprawdz***


    Wypróbuj inne obliczenia z dużymi liczbami, małymi liczbami, mnożeniem i dzieleniem przy użyciu typu `double`.  Wypróbuj bardziej skomplikowane obliczenia.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Pracuj z stałymi typami punktów
  durationInMinutes: 8
  content: >
    Wykorzystano podstawowe typy liczbowe w C#: liczby całkowite i podwaja.  Istnieje jeden inny typ do poznania: typ `decimal`. Typ `decimal` ma mniejszy zakres, ale większą precyzję niż `double`. Termin " **stała** " oznacza, że punkt dziesiętny (lub punkt binarny) nie jest przenoszony. Przyjrzyjmy się:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Należy zauważyć, że zakres jest mniejszy niż typ `double`. Większą precyzję typu dziesiętnego można zobaczyć, próbując wykonać następujący kod:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Sufiks `M` na liczbie wskazuje, że użytkownik musi używać typu `decimal`.


    Zauważ, że zapis matematyczny przy użyciu typu dziesiętnego ma więcej cyfr po prawej stronie przecinka dziesiętnego.


    ***Sprawdz***


    Teraz, gdy widzisz różne typy liczbowe, napisz kod, który oblicza obszar okręgu, którego promień to 2,50 cm. Należy pamiętać, że obszar okręgu to promień kwadratowy pomnożony przez PI. Jedna Wskazówka: .NET zawiera stałą dla liczby PI, <xref:System.Math.PI?displayProperty=nameWithType> której można użyć dla tej wartości.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).


    Należy uzyskać odpowiedź między 19 a 20.
- title: Ukończ wyzwanie
  durationInMinutes: 1
  content: >
    Czy udało Ci się to zrobić?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Wypróbuj inne formuły, jeśli chcesz.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Ukończono Samouczek interaktywny "Numbers C#". Możesz wybrać poniższe łącze **gałęzie i pętle** , aby uruchomić następny Interaktywny samouczek lub odwiedzić [witrynę programu .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) , aby pobrać zestaw .NET Core SDK, utworzyć projekt na maszynie i zachować kodowanie. Sekcja "następne kroki" umożliwia powrót do tych samouczków.


    Więcej informacji na temat numerów C# można znaleźć w następujących tematach:


    - [Całkowite typy liczbowe](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Zmiennoprzecinkowe typy liczbowe](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Wbudowane konwersje numeryczne](../../language-reference/builtin-types/numeric-conversions.md)
