### YamlMime:Tutorial
title: Gałęzie i pętle
metadata:
  title: Gałęzie i pętle interaktywny samouczek dotyczący — Przewodniki Szybki Start języka C#
  description: W tym przewodniku Szybki Start omawiającym gałęzie i pętle użyjesz przeglądarki, aby interaktywnie poznawać język C#. Będziesz pisać kod w języku C# i wyświetlić wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings.yml
  nextTutorialTitle: Interpolacja ciągów w języku C#
  ms.openlocfilehash: d214fe9a2b2e7c634c79fa7aac96136a77415e09
  ms.sourcegitcommit: 2eceb05f1a5bb261291a1f6a91c5153727ac1c19
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 09/04/2018
  ms.locfileid: "43506715"
items:
- durationInMinutes: 1
  content: >
    Ten przewodnik Szybki Start omawia sposób pisanie kodu badającego zmienne i wybierającego ścieżkę wykonania na podstawie tych zmiennych. Użyjesz przeglądarki do pisania C# interaktywnie i wyświetlić wyniki kompilacji i uruchomienia kodu. Ten przewodnik Szybki Start zawiera serię lekcji przedstawiających konstrukcje w języku C# gałęzi i pętli. Te lekcje umożliwiają poznanie podstaw języka C#.
- title: Podejmowanie decyzji za pomocą if — instrukcja
  durationInMinutes: 4
  content: "Uruchom następujący kod w oknie interaktywnym. Aby to zrobić, wpisz poniższy blok kodu w oknie interaktywnym, a następnie kliknij przycisk **Uruchom** przycisku:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nZmodyfikuj deklarację zmiennej `b` , tak aby suma była mniejsza niż 10: \n\n```csharp\nint b = 3;\n```\n\nKliknij przycisk **Uruchom** ponownie przycisk. Ponieważ odpowiedź jest mniejsza niż 10, nic nie zostanie wyświetlone. **Warunek** jesteś testowania ma wartość false. Nie masz żadnego kodu do wykonania, ponieważ zostały zapisane wyłącznie jedną z możliwych gałęzi dla `if` instrukcji: gałęzi dla wartości true.\n\n> [!TIP]\n> Gdy eksplorujesz C# (lub dowolnego języka programowania), będziesz robić błędy podczas pisania kodu. **Kompilatora** znajdzie te błędy i zgłosi je. Gdy dane wyjściowe zawierają komunikaty o błędach, Przyjrzyj się uważnie przykładowy kod i kod w oknie interaktywnym, aby zobaczyć, jak naprawić.\n> To ćwiczenie pomoże Ci poznać strukturę kodu C#.     \n\nPierwszy przykład przedstawia możliwości `if` i typów logicznych. A *logiczna* jest zmienną, która może mieć jedną z dwóch wartości: `true` lub `false`. Język C# definiuje specjalny typ `bool` dla zmiennych logicznych. `if` Instrukcji sprawdza wartość `bool`. Jeśli wartość to `true`, instrukcji następującej `if` wykonuje. W przeciwnym razie zostanie ona pominięta. \n\nTen proces sprawdzania warunków i wykonywania instrukcji na podstawie tych warunków są ogromne. Dowiedzmy się więcej.\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Upewnij się, jeśli i inne współpracują ze sobą
  durationInMinutes: 10
  content: "\nAby wykonać różny kod w gałęzie true i false, należy utworzyć `else` gałęzi, która wykonuje, gdy warunek jest fałszywy. Wypróbuj:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nInstrukcja po słowie `else` — słowo kluczowe jest wykonywany tylko wtedy, gdy testowany warunek jest `false`. Łącząc `if` i `else` atrybut typu wartość logiczna warunki zapewnia wszystkie potrzebne możliwości.\n\n> [!IMPORTANT]\n> Wcięcia pod `if` i `else` instrukcji jest czytelności.\n> W języku C# nie mają wcięcia ani białe miejsca znaczenia. Instrukcja po słowie `if` lub `else` — słowo kluczowe zostanie wykonana w zależności od warunku. Wszystkie przykłady w tym przewodniku Szybki Start, wykonaj jest stosowana powszechna praktyka wcięć odpowiadających przepływowi sterowania instrukcji.\n\nPonieważ wcięcia nie ma znaczenia, należy użyć `{` i `}` wskazać, kiedy ma więcej niż jedna instrukcja jako część bloku wykonywanego warunkowo. Programiści języka C# zazwyczaj używają nawiasów klamrowych we wszystkich `if` i `else` klauzul. Poniższy przykład jest taki sam jak właśnie utworzony. Wypróbuj go.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Za pomocą pozostałej części tego przewodnika Szybki Start wszystkie przykłady kodu zawierają nawiasy klamrowe, zgodnie z przyjętą.\n\nMożesz przetestować bardziej skomplikowanych warunków:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n`&&` Reprezentuje \"i\". Oznacza to, że oba warunki muszą być spełnione, aby wykonać tę instrukcję w gałęzi dla wartości true.  Te przykłady przedstawiają także, może mieć wielu instrukcji w każdej gałęzi warunkowej, pod warunkiem, należy ująć je w `{` i `}`.\n\nMożna również użyć `||` do reprezentowania \"lub\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Użycie pętli do powtarzania operacji
  durationInMinutes: 6
  content: "Innym pojęciem ważnym dla tworzenia większych programów są **pętli**. Pętle służą do powtarzania instrukcji, które chcesz wykonać więcej niż jeden raz. Wypróbuj ten kod w oknie interaktywnym:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\n`while` Instrukcji sprawdza warunek i wykonuje instrukcję po `while`. Będzie powtarzane sprawdzanie warunku i wykonywanie instrukcji, dopóki warunek jest fałszywy.\n\nW tym przykładzie jest jeszcze jeden nowy operator. `++` Po `counter` zmienna jest **przyrostu** operatora. Dodaje 1 do wartości counter i zapisuje wynikową wartość w zmiennej counter.\n\n> [!IMPORTANT]\n> Upewnij się, że `while` zapętlenie przyjmie wartość false podczas wykonywania kodu. W przeciwnym razie utwórz **Pętla nieskończona** gdzie programu nigdy się nie skończy. Nie pokażemy, ponieważ aparat uruchamiający kod będzie limit czasu, aby zobaczyć żadne dane wyjściowe z programu.\n\n`while` Pętli testuje warunek przed wykonaniem kodu po `while`. `do` ... `while` pętli najpierw wykonuje kod, a następnie sprawdza warunek. Wygląda ono następująco:\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\nTo `do` pętli i wcześniej `while` pętli działać tak samo. \n\nPrzyjrzyjmy się ostatniej instrukcji pętli.\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Praca z pętli for
  durationInMinutes: 5
  content: "Jest innym wspólnej instrukcji pętli, który znajduje się w kodzie języka C# `for` pętli. Wypróbuj ten kod w oknie interaktywnym:\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\nTo działa ten sam jako `while` pętli i `do` pętli został już użyty. `for` Instrukcja składa się z trzech części, które sterują jej pracą. \n\nPierwsza część to **dla inicjatora**: `for counter = 0;` oświadcza, że `counter` jako zmienną pętli i ustawia jej wartość początkową `0`.\n\nŚrodkowa część to **warunku**: `counter < 10` oświadcza, że `for` pętli kontynuuje wykonywanie dopóki wartość licznika jest mniejsza niż 10.\n\nOstatnia część to **dla iteratora**: `counter++` określa sposób modyfikowana zmienna pętli po wykonaniu bloku występującego `for` instrukcji. Określa ona, że w tym miejscu `counter` należy zwiększyć o 1 po każdym wykonaniu bloku.\n\nWypróbuj te samodzielnie. Wypróbuj następujące czynniki:\n\n- Zmień inicjator, tak aby można było uruchomić na inną wartość.\n- Zmień warunek, którego chcesz zatrzymać miał inną wartość.\n\nGdy skończysz, przejdziemy pisania kodu, co wykorzystasz zdobyte umiejętności do samodzielnego.\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Łączenie gałęzi i pętli
  durationInMinutes: 12
  content: >
    Teraz, gdy wiesz `if` instrukcji i konstrukcje pętli w języku C#, zobacz, jeśli można napisać kod C# obliczający sumę wszystkich liczb całkowitych od 1 do 20 podzielnych przez 3.  Poniżej przedstawiono kilka wskazówek:


    - `%` Operator umożliwia obliczenie reszty z operacji dzielenia.

    - `if` Instrukcji zapewnia warunku określającego, jeśli liczba powinna być częścią sumy.

    - `for` Pętli ułatwia powtórzenie serii kroków dla wszystkich liczb od 1 do 20.


    Wypróbuj ją samodzielnie. Sprawdź, jak Ci poszło. Jako wskazówka odpowiedź powinna wynosić 63.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Ukończenie wyzwania
  durationInMinutes: 1
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Gratulacje!
  content: "Ukończono Przewodnik Szybki Start \"gałęzi i pętli\". \n\nTe przewodniki Szybki Start możesz kontynuować we własnym środowisku programowania. Poznaj podstawy [rozwoju lokalnego](local-environment.md) a następnie wybierz Przewodnik Szybki Start. Możesz wypróbować to samo ćwiczenie, przejść bezpośrednio do kolejnego przewodnika Szybki Start lub zacząć ponownie z [liczb w języku C#](numbers-in-csharp-local.md) Szybki Start.\n\nMożesz dowiedzieć się więcej na temat tych pojęć w następujących tematach:\n\n[Jeśli i else, instrukcja](../language-reference/keywords/if-else.md)   \n[while — instrukcja](../language-reference/keywords/while.md)   \n[— Instrukcja](../language-reference/keywords/do.md)   \n[For — instrukcja](../language-reference/keywords/for.md)"
