### YamlMime:YamlDocument
documentType: Tutorial
title: "Gałęzie i pętli"
metadata:
  title: "Gałęzie i pętli"
  description: "W tym szybki start dotyczące gałęzi i pętle będzie Naucz się C# interaktywnie za pomocą przeglądarki. Należy napisać kod w języku C# i wyświetlić wyniki kompilowania i uruchamiania kodu bezpośrednio w przeglądarce."
  audience: Developer
  level: Beginner
  ms.custom: mvc
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "Kolekcje w języku C#"
  ms.openlocfilehash: 93183a172fb5a94751c99c0f59f59af0b045ac09
  ms.sourcegitcommit: 401c4427a3ec0d1263543033b3084039278509dc
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 12/07/2017
items:
- durationInMinutes: 1
  content: "To szybki start jest przedstawienie sposobu pisania kodu, który sprawdza zmienne i zmiany ścieżki wykonywania na podstawie tych zmiennych. Użyjesz przeglądarki do zapisywania C# interakcyjne i wyświetlić wyniki kompilowania i uruchamiania kodu. To szybki start zawiera szereg lekcje, które eksplorować rozgałęzianie i zapętlenia konstrukcje w języku C#. Że wnioski uczy również podstaw programu w języku C#.\n"
- title: "Podejmowanie decyzji przy użyciu if — instrukcja"
  durationInMinutes: 4
  content: "Uruchom poniższy kod w oknie interaktywnym. Aby to zrobić, wpisz następujący blok kodu w oknie interaktywnym, a następnie kliknij przycisk **Uruchom** przycisk:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nModyfikowanie deklaracja `b` , tak aby suma była mniejsza niż 10: \n\n```csharp\nint b = 3;\n```\n\nKliknij przycisk **Uruchom** przycisk ponownie. Ponieważ odpowiedź jest mniejsza niż 10, nic nie jest wydrukowane. **Warunku** jesteś testowania ma wartość false. Nie masz żadnych kod do wykonania, ponieważ został zapisany tylko jedną z możliwych gałęzi dla `if` instrukcji: gałąź prawdy.\n\n> [!TIP]\n> Ci poznać platformę C# (lub dowolnego języka programowania), należy podjąć błędów podczas pisania kodu. **Kompilatora** znajdzie te błędy i raportuj je użytkownikowi. Jeśli dane wyjściowe zawiera komunikaty o błędach, należy dokładnie przejrzeć przykładowy kod i kod w oknie interaktywnym, aby zobaczyć rozwiązać problem.\n> Tym ćwiczeniu zostanie zapoznawania się struktury kodu C#.     \n\nW tym przykładzie pierwsze pokazano możliwości `if` i typów logicznych. A *logiczna* jest zmienna, która może mieć jedną z dwóch wartości: `true` lub `false`. C# definiuje specjalny typ `bool` dla zmienne typu boolean. `if` Instrukcji sprawdza wartość `bool`. Jeśli wartość jest `true`, instrukcji następującej `if` wykonuje. W przeciwnym razie zostanie pominięte. \n\nTen proces sprawdzania warunków i wykonywanie instrukcji na podstawie tych warunków jest bardzo zaawansowaną. Przyjrzyjmy się więcej.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Upewnij się, jeśli i else współpracują ze sobą"
  durationInMinutes: 10
  content: "\nAby wykonać inny kod w gałęzi true i false, należy utworzyć `else` gałęzi, która wykonuje, gdy warunek ma wartość false. Wypróbuj:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nPoniższa instrukcja `else` — słowo kluczowe jest wykonywana tylko wtedy, gdy warunek testowana jest `false`. Łączenie `if` i `else` z logiczną warunki zawiera wszystkie możliwości, które są potrzebne.\n\n> [!IMPORTANT]\n> Wcięcie w obszarze `if` i `else` jest instrukcje dla człowieka czytników.\n> W języku C# nie Traktuj wcięcia lub była białym znakiem za istotne. Poniższa instrukcja `if` lub `else` — słowo kluczowe zostanie wykonana na podstawie warunku. Wszystkie przykłady w tym szybki start wykonaj popularną praktyką tworzenia wcięć oparte na przepływie sterowania instrukcji.\n\nPonieważ wcięcia nie ma znaczenia, należy użyć `{` i `}` wskazująca, kiedy ma więcej niż jedną instrukcję jako część bloku, która wykonuje warunkowo. C# programistów zazwyczaj używają tych nawiasów klamrowych na wszystkich `if` i `else` klauzul. Poniższy przykład jest taki sam jak co właśnie utworzony. Spróbuj go.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Za pomocą reszty to szybki start, wszystkie przykłady kodu zawiera nawiasy klamrowe, po zaakceptowane rozwiązania.\n\nMożna przetestować bardziej skomplikowane warunki:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n`&&` Reprezentuje \"i\". Oznacza to, że oba warunki muszą być spełnione, można wykonać instrukcji w gałęzi wartość true.  Pokazują powyższe przykłady również może występować wiele instrukcji w każdym gałąź warunkowa, pod warunkiem, umieść je w `{` i `}`.\n\nMożna również użyć `||` do reprezentowania \"lub\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Powtórz operacji za pomocą pętli"
  durationInMinutes: 6
  content: "Jest inny ważne pojęcia tworzenie programów większych **pętle**. Użyjesz pętle powtórzeń instrukcji, które chcesz wykonać więcej niż raz. Spróbuj wykonać ten kod w oknie interaktywnym:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\n`while` Instrukcji sprawdza warunek i wykonuje następujące instrukcji `while`. Powtarza sprawdzenie warunku i wykonywania tych instrukcji, dopóki nie jest spełniony warunek.\n\nW tym przykładzie znajduje się jeden operator new. `++` Po `counter` zmienna jest **przyrostu** operatora. Dodaje 1 do wartości licznika i zapisuje tę wartość w zmiennej licznika.\n\n> [!IMPORTANT]\n> Upewnij się, że `while` warunek pętli włączyć na wartość false, jak wykonać kod. W przeciwnym razie utwórz **nieskończoną pętlę** gdzie program nigdy nie kończy. Teraz nie pokazują, że ponieważ aparat systemem kodu zostanie limit czasu, aby zobaczyć żadne dane wyjściowe z programu.\n\n`while` Pętli sprawdza warunek przed wykonaniem poniższy kod `while`. `do` ... `while` pętli wykonuje kod najpierw, a następnie sprawdza warunek. Wygląda następująco:\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\nTo `do` pętli i wcześniej `while` działać w identyczny sposób pętli. \n\nPrzyjrzyjmy się jeden ostatniej instrukcji pętli.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Praca z pętli for"
  durationInMinutes: 5
  content: "Inny wspólnej instrukcji pętli, która pojawi się w kodzie języka C# jest `for` pętli. Spróbuj wykonać ten kod w oknie interaktywnym:\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\nWykonuje ten sam pracę jako `while` pętli i `do` pętli, które zostały już użyte. `for` Instrukcji ma trzy części, które kontrolują sposób działania. \n\nPierwsza część **dla inicjatora**: `for counter = 0;` deklaruje, że `counter` jest zmienna pętli i ustawia swojej wartości początkowej `0`.\n\nJest środka **warunku**: `counter < 10` deklaruje tego `for` pętli kontynuuje wykonywanie tak długo, jak wartość licznika jest mniejsza niż 10.\n\nOstatnim etapem jest **dla iterator**: `counter++` określa sposób modyfikowania zmienna pętli for po wykonaniu następujących bloku `for` instrukcji. Określa ona, że w tym miejscu `counter` powinny być zwiększana o 1 zawsze wykonuje bloku.\n\nWypróbuj te samodzielnie. Spróbuj wykonać następujące czynniki:\n\n- Zmień inicjatora można uruchomić na inną wartość.\n- Zmiany tego warunku można zatrzymać na inną wartość.\n\nGdy wszystko będzie gotowe, Przyjrzyjmy się do zapisu niektóre kod samodzielnie do użycia, zostały rozpoznane.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Połączenia oddziałów i pętle"
  durationInMinutes: 12
  content: "Teraz, w tym samouczku `if` instrukcji i konstrukcji pętli w języku C#, zobacz, czy można napisać kod C#, aby znaleźć sumę wszystkich liczb całkowitych od 1 do 20, które są podzielnych przez 3.  Poniżej przedstawiono kilka wskazówek:\n\n- `%` Operatora daje reszta z operacji dzielenia.\n- `if` Instrukcja zawiera warunek, aby zobaczyć, jeśli liczba powinna być częścią suma.\n- `for` Pętli mogą pomóc w serie kroków należy powtórzyć dla wszystkich liczb od 1 do 20.\n\nWypróbuj ją samodzielnie. Następnie sprawdź, jak Ty.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Żądanie ukończone"
  durationInMinutes: 1
  content: "Zakończono szybki start \"gałęzi i pętlę\". \n\nMożna kontynuować te Szybki Start na środowiska deweloperskiego. Temat .NET [wprowadzenie w ciągu 10 minut](https://www.microsoft.com/net/core) zawiera instrukcje dotyczące konfigurowania środowiska deweloperskiego lokalnego. Po wykonaniu tego kontynuować [— Szybki Start listy kolekcji](arrays-and-collections.md) w środowisku lokalnym.\n\nUżytkownik może dowiedzieć się więcej o tych pojęć w tych tematach:\n\n[Jeśli i else — instrukcja](../language-reference/keywords/if-else.md)   \n[While — instrukcja](../language-reference/keywords/while.md)   \n[— Instrukcja](../language-reference/keywords/do.md)   \n[For — instrukcja](../language-reference/keywords/for.md)\0"
