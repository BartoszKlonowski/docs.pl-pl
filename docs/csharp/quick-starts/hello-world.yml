documentType: Tutorial
title: Witaj C#
metadata:
  title: "Witaj C#. Pierwszy wprowadzenie do języka C#."
  description: "W tym szybki start będzie Naucz się C# interaktywnie za pomocą przeglądarki. Pisanie kodu C# i wyświetlić wyniki kompilowania i uruchamiania kodu bezpośrednio w przeglądarce."
  audience: Developer
  level: Beginner
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: "Numery w języku C#"
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: "To szybki start zawiera C# interaktywnego, za pomocą przeglądarki do zapisywania C# i wyświetlić wyniki kompilowania i uruchamiania kodu. Zawiera szereg — lekcje zaczynające się przy użyciu programu \"Hello World\". Że wnioski uczy również podstaw programu w języku C#.\n"
  ms.openlocfilehash: ce1791bd7949c89269b1051d15765f5efd273e7c
  ms.sourcegitcommit: 401c4427a3ec0d1263543033b3084039278509dc
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 12/07/2017
- title: Uruchom pierwszy program C#
  durationInMinutes: 2
  content: "Uruchom poniższy kod w oknie interaktywnym. Aby to zrobić, wpisz następujący blok kodu w oknie interaktywnym, a następnie kliknij przycisk **Uruchom** przycisk:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nGratulacje! Uruchomiono pierwszy program C#. Jest to prosty program, który wyświetla komunikat \"Hello World!\". Używana przez nią <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metody wydrukowanie tej wiadomości. `Console`to typ, który reprezentuje okna konsoli. `WriteLine`jest to metoda `Console` typu, który wyświetla wiersz tekstu do konsoli tekstu.\n\nUmożliwia przenoszenie na i Poznaj więcej. Pozostała część tego lekcji Eksploruje pracy z `string` typu, który reprezentuje tekst w języku C#. Podobnie jak `Console` typu `string` typ ma metody. `string` Metody pracy z tekstem. \n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Zadeklaruj zmienne i używaj ich"
  durationInMinutes: 3
  content: "Pierwszy program drukowane `string` \"Witaj świecie!\" na ekranie. \n\n> [!TIP]\n> Ci poznać platformę C# (lub dowolnego języka programowania), należy podjąć błędów podczas pisania kodu. **Kompilatora** znajdzie te błędy i raportuj je użytkownikowi. Jeśli dane wyjściowe zawiera komunikaty o błędach, należy dokładnie przejrzeć przykładowy kod i kod w oknie interaktywnym, aby zobaczyć rozwiązać problem.\n> Tym ćwiczeniu zostanie zapoznawania się struktury kodu C#. \n\nPierwszy program jest ograniczona do drukowania jeden komunikat. Bardziej użyteczne programy można pisać przy użyciu **zmienne**. A **zmiennej** to symbol, który służy do uruchamiania tego samego kodu o różnych wartościach. Załóżmy Wypróbuj! Zastąp kod napisanych w oknie interaktywnym następującym kodem:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nPierwszy wiersz deklaruje zmienną `aFriend` i przypisuje mu wartość \"Rachunku\". Drugi wiersz drukowania nazwę.\n\nRóżne wartości można przypisać do dowolnego można zadeklarować zmiennej. Można zmienić nazwę do jednej z Twoich znajomych. Dodaj następujące dwa wiersze w oknie interaktywnym po kod, który został już dodany:\n\n```csharp\naFriend = \"Maria\";\nConsole.WriteLine(aFriend);\n```\n\nZwróć uwagę, że w tym samym wierszu kodu wyświetla dwa inne komunikaty, na podstawie wartości przechowywane w `aFriend` zmiennej.\n\nNależy również zauważyć słowo \"Hello\" i brakowało w ostatnich dwóch komunikatów. Ta funkcja pozwala rozwiązać ten problem, teraz.  Modyfikowanie Drukuj komunikat, który ma następujące wiersze:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nKliknij przycisk **Uruchom** ponownie, aby wyświetlić wyniki.\n\nJak możemy postępu, Tworzenie ciągów drukowanie przy użyciu `+` staje się skomplikowane. Ciąg interpolacji umożliwia element razem ciągów w sposób bardziej zwięzłe i do odczytu.\n\nJeśli dodasz `$` przed cudzysłów otwierający ciągu można następnie tak samo, jak dołączyć wyrażenia parametrów `aFriend` zmiennej wewnątrz ciągu w nawiasach klamrowych.\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nKliknij przycisk **Uruchom** ponownie, aby wyświetlić wyniki.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Praca z ciągów"
  durationInMinutes: 5
  content: "Ostatniej edycji został naszym pierwszym przyjrzeć co można zrobić z ciągami. Przyjrzyjmy się więcej.\n\n`+` Jest nazywany operatora w języku C#. Po zastosowaniu do ciągów, takich jak `firstString + secondString`, nowy ciąg jest tworzony z tekstem z pierwszego wraz z tekstem od drugiego. Jest to określane jako *ciągów*. Możesz łączyć dowolną liczbę ciągów, tym zmiennych ciągu.  Wypróbuj:\n\n```csharp\nstring firstFriend = \"Maria\";\nstring secondFriend = \"Sage\";\nConsole.WriteLine($\"My friends are {firstFriend} and {secondFriend}\");\n```\n\nJak należy zapoznać się z bardziej z ciągami, można znaleźć długość ciągu przy użyciu `Length`. `Length`jest **właściwości** ciągiem i zwraca liczbę znaków w tym ciągu. Dodaj następujący kod w dolnej części okna interaktywnego:\n\n```csharp\nConsole.WriteLine($\"The name {firstFriend} has {firstFriend.Length} letters.\");\nConsole.WriteLine($\"The name {secondFriend} has {secondFriend.Length} letters.\");\n```\n\n> [!TIP]\n> Jest to odpowiedni moment, aby rozpocząć eksplorowanie na własną. Znasz już który `Console.WriteLine()` zapisuje tekst do ekranu. Kiedy znasz już Zadeklaruj zmienne i ciągów razem. Eksperymentu w oknie interaktywnym. Niektóre komunikaty zapisu samodzielnie. Tworzenie ciągów za pomocą `+` operatora.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Wykonaj jeszcze z ciągów"
  durationInMinutes: 5
  content: "Obecnie używasz **metody**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, aby wydrukować wiadomości. A **metody** to blok kodu, który implementuje niektóre akcje. Ma on nazwę, więc można do niego dostęp. \n\n`string` Typ ma wiele metod przydatne. Przyjrzyjmy się <xref:System.String.Trim%2A> metody oraz odpowiednich metod <xref:System.String.TrimStart%2A> i <xref:System.String.TrimEnd%2A>. Te metody Usuń spacje początkowe i końcowe:\n\n```csharp\nstring message = \"      Hello World!       \";\nConsole.WriteLine($\"[{message}]\");\n\nstring trimmedMessage = message.TrimStart();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.TrimEnd();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.Trim();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n```\n\nW tym przykładzie wzmacnia kilka ważnych pojęć dotyczących pracy z ciągami. Metody, które manipulowania ciągami zwrócić nowe obiekty ciągu zamiast wprowadzania zmian w miejscu. Można stwierdzić, że każde wywołanie do żadnej `Trim` metody zwraca nowy ciąg, ale nie zmienia oryginalnej wiadomości.\n\nBrak innych metod, które są dostępne do pracy z ciągiem. Na przykład prawdopodobnie używano wyszukiwania i Zastąp polecenia w edytorze lub edytorze tekstów. <xref:System.String.Replace%2A> Metoda wykonuje podobny w `string`. Wyszukuje podciągu i zastępuje go na inny tekst. <xref:System.String.Replace%2A> Metoda przyjmuje dwa **parametry**. Są to ciągów w nawiasach. Pierwszy ciąg jest tekst do wyszukania. Drugi ciąg jest wyświetlany tekst, aby go zastąpić. Wypróbuj ją samodzielnie. Dodaj ten kod:\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nmessage = message.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(message);\n```\n\nDwie metody przydatne należy wszystkie wersaliki ciąg lub małe litery. Wykonaj następujący kod:\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nConsole.WriteLine(message.ToUpper());\nConsole.WriteLine(message.ToLower());\n```\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Ciągi wyszukiwania"
  durationInMinutes: 10
  content: "Z drugiej strony *wyszukiwania i zamieniania* operacji jest znalezienie tekst w ciągu. Można użyć <xref:System.String.Contains%2A> metody do wyszukiwania. Informuje, jeśli ciąg zawierający podciąg wewnątrz niej. Spróbuj następujący kod, aby eksplorować <xref:System.String.Contains%2A>:\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.Contains(\"goodbye\"));\nConsole.WriteLine(message.Contains(\"greetings\"));\n```\n\n<xref:System.String.Contains%2A> Metoda zwraca **logiczna** wartość, która informuje, jeśli ciąg zostanie został znaleziony. A **logiczna** przechowuje albo `true` lub `false` wartość. Dowiesz się więcej na temat **logiczna** wartości w późniejszej lekcji.\n\n***Żądanie***\n\nIstnieją dwie metody podobne, <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A> który również wyszukać podrzędne ciągów w ciągu. Te Znajdź podciąg na początku lub końca ciągu. Spróbuj zmodyfikować powyższego przykładu, aby użyć <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A> zamiast <xref:System.String.Contains%2A>. Wyszukiwanie \"Musisz\" lub \"goodbye\" na początku ciąg. Wyszukaj \"tekst hello\" i \"goodbye\" na końcu ciągu.\n\n> [!Note]\n> Obejrzyj Twojej znaki interpunkcyjne podczas testowania dla tekstu na końcu ciągu. Jeśli ciąg kończy się kropką, musisz sprawdzić na ciąg, który kończy się kropką.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: "Żądanie ukończone"
  durationInMinutes: 3
  content: "Czy można korzystać z przypominać?\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.StartsWith(\"You\"));\nConsole.WriteLine(message.StartsWith(\"goodbye\"));\n\nConsole.WriteLine(message.EndsWith(\"hello\"));\nConsole.WriteLine(message.EndsWith(\"goodbye\"));\n```\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- content: "Zakończono szybki start \"Hello C#\".\n\nMożna kontynuować te Szybki Start na środowiska deweloperskiego. Temat .NET [wprowadzenie w ciągu 10 minut](https://www.microsoft.com/net/core) zawiera instrukcje dotyczące konfigurowania środowiska deweloperskiego lokalnego. Po wykonaniu tego kontynuować [numery w języku C#](numbers-in-csharp-local.md) w środowisku lokalnym.\n\nDowiedz się więcej o pracy z `string` wpisz [C# przewodnik programowania w języku](../programming-guide/index.md) temat [ciągów](../programming-guide/strings/index.md).\0"
