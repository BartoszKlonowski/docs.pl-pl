### YamlMime:Tutorial
title: Hello C#
metadata:
  title: Witaj świecie interaktywnego samouczka — Przewodniki Szybki Start języka C#
  description: W tym przewodniku Szybki Start użyjesz przeglądarki, aby interaktywnie poznawać język C#. Możesz pisać kod w języku C# i wyświetlić wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Liczby w języku C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 17264f96676b5c81c8a70a6606de698406c076fb
  ms.sourcegitcommit: efff8f331fd9467f093f8ab8d23a203d6ecb5b60
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 09/01/2018
  ms.locfileid: "43402817"
items:
- durationInMinutes: 1
  content: >
    Ten przewodnik Szybki Start dowiesz się, C# interaktywnie przy użyciu przeglądarki do pisania C# i zobaczyć wyniki kompilowania i uruchamiania kodu. Zawiera serię lekcji, które zaczynają się od programu "Hello World". Te lekcje umożliwiają poznanie podstaw języka C#.
- title: Uruchamianie pierwszego programu C#
  durationInMinutes: 2
  content: "Uruchom następujący kod w oknie interaktywnym. Aby to zrobić, wpisz poniższy blok kodu w oknie interaktywnym, a następnie kliknij przycisk **Uruchom** przycisku:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nGratulacje! Po uruchomieniu pierwszego programu C#. Jest to prosty program, który wyświetla komunikat \"Hello World!\". Program użył <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodę, aby wyświetlić wiadomość. `Console` to typ, który reprezentuje okno konsoli. `WriteLine` jest to metoda `Console` typu, która wyświetla wiersz tekstu w tej konsoli tekstowej.\n\nPrzejdźmy dalej i Poznajmy więcej. Pozostała część tej lekcji skupia się na pracy z `string` typ, który reprezentuje tekst w języku C#. Podobnie jak `Console` typu `string` typ ma metody. `string` Metody pracy nad tekstem. \n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Deklarowanie i używanie zmiennych
  durationInMinutes: 3
  content: "Pierwszy program wyświetlił `string` \"Hello World!\" na ekranie. \n\n> [!TIP]\n> Gdy eksplorujesz C# (lub dowolnego języka programowania), będziesz robić błędy podczas pisania kodu. **Kompilatora** znajdzie te błędy i zgłosi je. Gdy dane wyjściowe zawierają komunikaty o błędach, Przyjrzyj się uważnie przykładowy kod i kod w oknie interaktywnym, aby zobaczyć, jak naprawić.\n> To ćwiczenie pomoże Ci poznać strukturę kodu C#. \n\nTwój pierwszy program jest ograniczony do wyświetlania jednego komunikatu. Możesz napisać bardziej użyteczne programy, za pomocą **zmienne**. A **zmiennej** to symbol, można użyć, aby uruchomić ten sam kod z różnymi wartościami. Spróbujmy to zrobić! Zastąp kod napisany w oknie interaktywnym następującym kodem:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nPierwszy wiersz deklaruje zmienną `aFriend` i przypisuje mu wartość \"Bill\". Drugi wiersz wyświetla imię.\n\nRóżne wartości można przypisać do dowolnego zadeklarowanej zmiennej. Można zmienić nazwę jednej z Twoich znajomych. Dodaj następujące dwa wiersze w oknie interaktywnym, następujący kod, który został już dodany:\n\n```csharp\naFriend = \"Maira\";\nConsole.WriteLine(aFriend);\n```\n\nNależy zauważyć, że ten sam wiersz kodu wyświetli dwa różne komunikaty w oparciu o wartość przechowywaną w `aFriend` zmiennej.\n\nNależy też zauważyć, że wyraz \"Hello\" brakowało w ostatnich dwóch komunikatach. Zmienimy teraz.  Zmień wiersze wyświetlające komunikat na następujące:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nKliknij przycisk **Uruchom** ponownie, aby zobaczyć wyniki.\n\nMiarę postępów Tworzenie ciągów do wyświetlania, przy użyciu `+` staje się problematyczne. [Interpolacja ciągów](../language-reference/tokens/interpolated.md) umożliwia możesz element ze sobą ciągów w bardziej zwięzły, czytelny sposób.\n\nJeśli dodasz `$` przed cudzysłów otwierający ciąg, możesz następnie uwzględnić wyrażenia, takie jak `aFriend` wewnątrz ciągu w nawiasach klamrowych zmiennej.\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nKliknij przycisk **Uruchom** ponownie, aby zobaczyć wyniki.\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Praca z ciągami
  durationInMinutes: 5
  content: >
    Twoja ostatnia Edycja była pierwszym podejściem co można zrobić z ciągami. Dowiedzmy się więcej.


    `+` Jest nazywany operatorem w języku C#. Po zastosowaniu do ciągów, takich jak `firstString + secondString`, utworzony nowy ciąg z tekstem z pierwszego wraz z tekstem z drugiego. Jest to określane jako *ciągów*. Możesz połączyć dowolną liczbę ciągów, w tym zmienne ciągów.  Wypróbuj:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Podczas dalszej pracy z ciągami, możesz znaleźć długość ciągu przy użyciu `Length`. `Length` jest **właściwość** ciąg i zwraca liczbę znaków, w tym ciągu. Dodaj następujący kod w dolnej części okna interaktywnego:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Jest to dobry moment, aby eksplorować samodzielnie. Gdy już wiesz, `Console.WriteLine()` zapisuje tekst na ekranie. Wiesz jak deklarować zmienne i łączyć ciągi. Poeksperymentuj w oknie interaktywnym. Napisz więcej wiadomości samodzielnie. Twórz ciągi przy użyciu `+` operatora.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Więcej zadań z ciągami
  durationInMinutes: 5
  content: "Wcześniej użyto **metoda**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>do wyświetlania komunikatu. A **metoda** to blok kodu, który implementuje pewne działanie. Ma on nazwę, dzięki czemu można do niego dostęp. \n\n`string` Typ ma wiele użytecznych metod. Przyjrzyjmy się <xref:System.String.Trim%2A> metody oraz powiązanym metodom <xref:System.String.TrimStart%2A> i <xref:System.String.TrimEnd%2A>. Te metody usuwają spacje początkowe i końcowe:\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\nTen przykład wzmacnia kilka ważnych pojęć dotyczących pracy z ciągami. Metody manipulujące ciągami zwracają nowe obiekty ciągów zamiast wprowadzać modyfikacje w miejscu. Możesz zobaczyć, że każde wywołanie dowolnej z `Trim` metody zwraca nowy ciąg, ale nie zmienia oryginalnego komunikatu.\n\nIstnieją inne metody umożliwiające pracę z ciągami. Na przykład prawdopodobnie używanych wyszukiwania i Zastąp — polecenie w edytorze tekstów. <xref:System.String.Replace%2A> Metoda wykonuje coś podobnego na elemencie `string`. Wyszukuje podciąg i zastępuje go innym tekstem. <xref:System.String.Replace%2A> Metoda przyjmuje dwa **parametry**. Są to ciągi pomiędzy nawiasami. Pierwszy ciąg to tekst do wyszukania. Drugi ciąg to tekst, który go zastąpić. Wypróbuj ją samodzielnie. Dodaj następujący kod:\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\nDwie inne użyteczne metody zmieniają ciąg wersalikami lub wszystko małymi literami. Wypróbuj poniższy kod:\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Wyszukiwanie ciągów
  durationInMinutes: 10
  content: "Drugą część *wyszukiwania i zamieniania* operacja jest odnajdywanie tekstu w ciąg. Możesz użyć <xref:System.String.Contains%2A> metody do wyszukiwania. Informuje, czy ciąg zawiera podciąg. Wypróbuj poniższy kod, aby zapoznać się z <xref:System.String.Contains%2A>:\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\n<xref:System.String.Contains%2A> Metoda zwraca **logiczna** wartość, która informuje, jeśli znaleziono ciąg wyszukiwany. A **logiczna** przechowuje wartość `true` lub `false` wartość. Dowiesz się więcej na temat **logiczna** wartości w późniejszej lekcji.\n\n***Wyzwanie***\n\nIstnieją dwie podobne metody, <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A> które również wyszukują podciągi w ciągu. Służą one do wyszukiwania podciągu na początku lub końcu ciągu. Spróbuj zmodyfikować poprzedni przykład, aby użyć <xref:System.String.StartsWith%2A> i <xref:System.String.EndsWith%2A> zamiast <xref:System.String.Contains%2A>. Wyszukaj \"You\" lub \"goodbye\" na początku ciągu. Wyszukaj \"hello\" lub \"goodbye\" na końcu ciągu.\n\n> [!Note]\n> Zwróć uwagę na interpunkcję podczas testowania tekstu na końcu ciągu. Jeśli ciąg kończy się kropką, musisz sprawdzać ciągi kończące się kropką.\n\nPowinna pojawić się `true` uruchamianie \"You\" i kończą się ciągiem \"hello\" i wartość false, począwszy od lub kończąc \"goodbye\". \n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Ukończenie wyzwania
  durationInMinutes: 3
  content: >
    Czy Twój pomysł był podobny do poniższego?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Ukończono Szybki Start "Hello C#".


    Dowiedz się więcej o pracy z `string` wpisać [przewodnik programowania w języku C#](../programming-guide/index.md) tematu [ciągi](../programming-guide/strings/index.md).

    [Jak uzyskać porady na temat pracy z ciągami](../how-to/index.md#working-with-strings).
