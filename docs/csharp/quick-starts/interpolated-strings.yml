### YamlMime:Tutorial
title: Interpolacja ciągów w języku C#
metadata:
  title: Interaktywny samouczek interpolacji ciągu dotyczący — Przewodniki Szybki Start języka C#
  description: W tym samouczku użyjesz przeglądarki do interakcyjne poznawanie funkcji interpolacji ciągu C#. Możesz pisać kod w języku C# i wyświetlić wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  ms.topic: quickstart
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekcje w języku C#
  ms.openlocfilehash: 07928406c9518990761ec9856eee713cb2b40ef7
  ms.sourcegitcommit: efff8f331fd9467f093f8ab8d23a203d6ecb5b60
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 09/01/2018
  ms.locfileid: "43417157"
items:
- durationInMinutes: 2
  content: >
    Ten przewodnik Szybki Start pokazano, jak używać [Interpolacja ciągów](../language-reference/tokens/interpolated.md) wstawiania wartości do pojedynczego ciągu. Poznasz również sposób kontrolowania Reprezentacja tekstowa te wartości w ciągu wynikowym. Do pisania i uruchamiania kodu C# za pomocą przeglądarki i mogą natychmiast zobaczyć utworzone wyników.
- title: Tworzenie ciągu interpolowanego
  durationInMinutes: 2
  content: "Uruchom następujący kod w oknie interaktywnym. Aby to zrobić, należy wpisać kod w oknie interaktywnym (Zastąp `<name>` z Twoją nazwą) i wybierz **Uruchom**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nPo uruchomieniu kodu, **dane wyjściowe** wyświetla ciąg, z Twoim imieniem w powitaniu. Argument ciągu <xref:System.Console.WriteLine%2A> jest wywołanie metody *ciągiem interpolowanym*. Jest to rodzaj szablonu, który umożliwia skonstruowanie pojedynczego ciągu (o nazwie *ciągiem wynikowym*) z ciągu obejmującego osadzony kod. Ciągi interpolowane są szczególnie użyteczne do wstawiania wartości do ciągu lub łączenia (łączenie) kilka ciągów. \n\nW powyższym przykładzie zawiera dwa elementy, które muszą mieć każdy ciąg interpolowany: \n\n- Literał ciągu rozpoczynający się od `$` znak przed jego otwierającym znakiem cudzysłowu. Nie może być spacji między `$` symboli i znaku cudzysłowu. (Jeśli chcesz zobaczyć, co się stanie po wstawieniu odstępu, Wstaw go po `$` znak w oknie interaktywnym i uruchom zaktualizowany kod. Kompilator języka C# zgłosi błąd \"Nieoczekiwany znak '$'\".) \n\n- Co najmniej jeden *wyrażeń interpolowanych*. Wyrażenie interpolowane jest wskazywane przez nawias klamrowy otwierający i zamykający (`{` i `}`). Możesz umieścić dowolne C# wyrażenie zwracające wartość (w tym `null`) wewnątrz nawiasów klamrowych. \n\nWypróbujmy kilka dodatkowych przykładowych interpolacji ciągu z innymi typami danych.\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Uwzględnianie innych typów danych
  durationInMinutes: 5
  content: "W poprzednim kroku Interpolacja ciągów jest używany do wstawienia jednego ciągu wewnątrz innego. Wynik wyrażenia interpolowanego może być dowolnego typu danych, mimo że. Teraz zawierać wartości różnych typów danych w ciągu interpolowanym. \n\nW poniższym przykładzie najpierw definiujemy [klasy](../programming-guide/classes-and-structs/classes.md) — typ danych `Vegetable` zawierający `Name` [właściwość](../properties.md) i `ToString` [metoda](../methods.md), który [zastępuje](../language-reference/keywords/override.md) zachowanie <xref:System.Object.ToString?displayProperty=nameWithType> metody. [ `public` Modyfikator dostępu](../language-reference/keywords/public.md) sprawia, że tej metody jest dostępny dla dowolnego kodu klienta, można pobrać reprezentacji w postaci ciągu `Vegetable` wystąpienia. W przykładzie `Vegetable.ToString` metoda zwraca wartość `Name` właściwości, który jest inicjowany w `Vegetable` [Konstruktor](../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`. Następnie tworzymy wystąpienie `Vegetable` przy użyciu [ `new` — słowo kluczowe](../language-reference/keywords/new-operator.md) i podając parametr name dla konstruktora `Vegetable`. Na koniec dołączamy tego wystąpienia na ciąg interpolowany zawiera także <xref:System.DateTime> wartość <xref:System.Decimal> wartości i `Unit` [wyliczenie](../programming-guide/enumeration-types.md) wartość. Uruchom poniższy kod w oknie interaktywnym:\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, kilogram, gram, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\nNależy pamiętać, że wyrażenie interpolowane `item` w ciągu interpolowanym jest rozpoznawany jako tekst \"eggplant\" w ciągu wynikowym. To dlatego, gdy typ wyniku wyrażenia nie jest ciągiem, wynik jest tłumaczona na ciąg w następujący sposób:\n\n- Jeśli wyrażenie interpolowane daje w wyniku `null`, ciąg pusty (\"\", lub <xref:System.String.Empty?displayProperty=nameWithType>) jest używany.\n\n- Jeśli wyrażenie interpolowane nie mają `null`, zazwyczaj `ToString` zostanie wywołana metoda typ wyniku. Można to sprawdzić, aktualizując wykonania `Vegetable.ToString` metody. Może nawet trzeba zaimplementować `ToString` metody, ponieważ każdy typ ma pewne implementacja tej metody. Aby to przetestować, przekształcić w komentarz definicję `Vegetable.ToString` metody w przykładzie (w tym celu należy umieścić symbol komentarza `//`, przed nim). W danych wyjściowych ciąg \"eggplant\" zastępuje pełni kwalifikowaną nazwę typu (przestrzenią nazw zdefiniowaną przez C# REPL wraz z nazwą typu), który jest domyślnym zachowaniem z <xref:System.Object.ToString?displayProperty=nameWithType> metody. Domyślne zachowanie `ToString` metodą wartość wyliczenia jest zwraca reprezentację ciągu wartości.    \n\nW danych wyjściowych z tego przykładu Data jest zbyt precyzyjna (cena eggplant nie zmienia się każda sekunda), a wartość ceny nie wskazuje jednostkę waluty. W następnym kroku dowiesz się, jak rozwiązać te problemy, kontrolując format ciągów reprezentujących wyniki wyrażenia.\n\n> [!NOTE]\n> To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Kontrolowanie formatowania wyrażeń interpolowanych
  durationInMinutes: 5
  content: >
    W poprzednim kroku zostały wstawione dwa nie najlepiej sformatowane ciągi, do ciągu wynikowego. Jedna była wartość daty i godziny, dla którego tylko data powinna mieć zastosowanie. Drugim była cena, która nie wskazywała waluty. Zarówno w przypadku problemów są łatwe do adresu. Interpolacja ciągów pozwala określić *ciągi formatujące* które kontrolują formatowanie poszczególnych typów. Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby dołączyć ciągi formatu daty i ceny wyrażeń, jak pokazano w następującym wierszu:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    Należy określić ciąg formatu, postępując zgodnie z wyrażenia interpolowanego z dwukropkiem (":") i ciąg formatu. "d" jest [ciąg formatu standardowego daty i godziny](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) reprezentujący formatu daty krótkiej. "C2" to [standardowy Ciąg formatujący](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) reprezentujący liczbę jako wartość waluty z dwoma cyframi po separatorze dziesiętnym.


    Liczba typów w bibliotekach .NET obsługuje wstępnie zdefiniowany zestaw ciągów formatu. Dotyczy to wszystkich typów liczbowych i typów daty i godziny. Aby uzyskać pełną listę typów, które obsługują ciągi formatu, zobacz [ciągi formatu i typy biblioteki klas .NET](../../standard/base-types/formatting-types.md#stringRef) w [typy formatowania na platformie .NET](../../standard/base-types/formatting-types.md) artykułu.


    Spróbuj zmodyfikować ciągi formatu w przykładzie, aby zobaczyć, jak wpływają na formatowanie daty i godziny oraz wartości liczbowej. Zmień "d" w `{date:d}` na "t" (Aby wyświetlić krótki format daty), "y" (Aby wyświetlić rok i miesiąc) oraz "yyyy" (Aby wyświetlać rok jako liczbę czterocyfrową). Zmień "C2" w `{price:C2}` "e" (notacja wykładnicza) oraz "F3" (wartość liczbową z trzema cyframi po separatorze dziesiętnym).


    Poza kontrolowaniem formatowania możesz też kontrolować szerokość pola i wyrównanie sformatowanego ciągów, które znajdują się w ciągu wynikowym. W następnym kroku dowiesz się, jak to zrobić.


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- title: Kontrolowanie szerokości pola i wyrównania wyrażeń interpolowanych
  durationInMinutes: 6
  content: >
    Zazwyczaj gdy wynikiem wyrażenia interpolowane jest sformatowany ciąg, ciąg znajduje się w ciągu wynikowym bez spacji wiodących albo końcowych. Szczególnie podczas pracy z zestawem danych, można kontrolować szerokość pola i wyrównanie tekstu pozwala tworzyć bardziej czytelny dane wyjściowe. Aby to zobaczyć, uruchom następujący kod:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Nazwy elementu są wyrównane do lewej, a ich ilości są wyrównane do prawej. Wyrównanie określa się poprzez dodanie przecinka (",") po wyrażenie interpolowane i wyznaczające *minimalne* szerokości pola. Jeśli określona wartość jest liczbą dodatnią, pole jest wyrównany do prawej. Jeśli jest liczbą ujemną, pole jest wyrównany do lewej.


    Spróbuj usunąć znaki ujemne z `{"Item",-25}` i `{item.Key,-25}` kodu i uruchomić przykładowy kod ponownie. Tym razem nazwy elementu są wyrównane do prawej.


    Możesz połączyć specyfikator wyrównania i ciąg formatu dla pojedynczego wyrażenia interpolowane. Aby to zrobić, określ wyrównanie najpierw następuje dwukropek i ciąg formatu. Wypróbuj poniższy kod, który wyświetla trzy sformatowane ciągi ze zdefiniowanymi szerokościami pól:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > To środowisko kodowania online jest w trybie podglądu. Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).
- content: "Ukończono Szybki Start interpolacji ciągu. \n\nTe przewodniki Szybki Start możesz kontynuować we własnym środowisku programowania lokalnego. Poznaj podstawy [rozwoju lokalnego](local-environment.md) a następnie wybierz Przewodnik Szybki Start. Wypróbuj ten przewodnik Szybki Start w tej samej, przejść bezpośrednio do kolejnego przewodnika Szybki Start lub zacząć ponownie z [liczb w języku C#](numbers-in-csharp-local.md) Szybki Start.\n\nAby uzyskać więcej informacji, zobacz [Interpolacja ciągów](../language-reference/tokens/interpolated.md) tematu i [Interpolacja w języku C# ciągów](../tutorials/string-interpolation.md) samouczka."
