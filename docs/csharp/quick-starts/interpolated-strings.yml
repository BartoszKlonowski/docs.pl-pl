### YamlMime:Tutorial
title: "<span data-ttu-id=\"46ab8-101\">Ciągi interpolowane w języku C#</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-101\">Interpolated strings in C#</span></span>"
metadata:
  title: "Ciągi interpolowane w języku C#. Dowiedz się skonstruować ciąg, który zawiera inne wartości, takich jak daty lub liczby."
  description: "W tym samouczku użyjesz przeglądarki interakcyjnie korzystać z funkcji ciągu interpolowanym C#. Pisanie kodu C# i wyświetlić wyniki kompilowania i uruchamiania kodu bezpośrednio w przeglądarce."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "<span data-ttu-id=\"46ab8-106\">Kolekcje w języku C#</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-106\">Collections in C#</span></span>"
  ms.openlocfilehash: 127365a2a20043d3597ea80743b9925537e4feba
  ms.sourcegitcommit: ed26cfef4e18f6d93ab822d8c29f902cff3519d1
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 01/17/2018
items:
- durationInMinutes: 2
  content: "<span data-ttu-id=\"46ab8-107\">To szybki start jest przedstawienie sposobu użycia ciągi interpolowane w języku C# do wstawienia wartości do ciągu wyjściowego pojedynczego interaktywnie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-107\">This quick start teaches you how to use interpolated strings in C# to insert values into a single ouput string interactively.</span></span> <span data-ttu-id=\"46ab8-108\">Pisanie kodu C# za pomocą przeglądarki i można natychmiast zobaczyć wyniki kompilowania i uruchamiania kodu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-108\">You use your browser to write C# code and can immediately see the results of compiling and running your code.</span></span> <span data-ttu-id=\"46ab8-109\">Szybki start zawiera szereg lekcje, które ciągów, wstawienia wartości do ciągów i sformatować te wartości na różne sposoby.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-109\">The quick start contains a series of lessons that concatenate strings, insert values into strings, and format those values in different ways.</span></span>\n"
- title: "<span data-ttu-id=\"46ab8-110\">Tworzenie ciągu interpolowanym</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-110\">Create an interpolated string</span></span>"
  durationInMinutes: 2
  content: "<span data-ttu-id=\"46ab8-111\">Uruchom poniższy kod w oknie interaktywnym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"46ab8-112\">Aby to zrobić, wpisz następujący blok kodu w oknie interaktywnym (Zastąp \"<name>\" nazwą) i kliknij przycisk **Uruchom** przycisk:</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-112\">To do that, type the following code block in the interactive window (replace \"<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"46ab8-113\">Po uruchomieniu program wyświetla jeden ciąg zawierający nazwę w pozdrowienie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-113\">When you run the program, it displays a single string that includes your name in the greeting.</span></span> <span data-ttu-id=\"46ab8-114\">Ciąg zawarty w <xref:System.Console.WriteLine%2A> jest wywołanie metody *interpolowane ciąg*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-114\">The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"46ab8-115\">Jest to rodzaj szablonu, który pozwala utworzyć jeden ciąg (o nazwie *powoduje ciąg*) z ciągu, który zawiera osadzony kod.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-115\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"46ab8-116\">Ciągi interpolowane są szczególnie użyteczne w przypadku wstawiania wartości w ciągu lub ciągi łączenie (łączenie).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-116\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</span></span> \n\n<span data-ttu-id=\"46ab8-117\">Ten prosty przykład zawiera dwa elementy, które muszą mieć co ciągu interpolowanym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-117\">This simple example contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"46ab8-118\">Literał ciągu rozpoczynający się od `$` znak przed jego otwierania przez cudzysłów znaków.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-118\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"46ab8-119\">Nie może być odstępów między `$` symboli i znaku cudzysłowu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-119\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"46ab8-120\">(Jeśli chcesz zobaczyć co się stanie w przypadku obejmują jeden, Wstaw spację po `$` znak w oknie interaktywnym, a następnie kliknij przycisk **Uruchom** przycisku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-120\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and click the **Run** button.</span></span> <span data-ttu-id=\"46ab8-121\">Kompilator języka C# narzeka, \"Nieoczekiwany znak\"$\"\".)</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-121\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"46ab8-122\">Co najmniej jeden *interpolowane wyrażenia*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-122\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"46ab8-123\">Wskazuje wyrażenie interpolowane otwierający i zamykający nawias klamrowy (`{` i `}`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-123\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"46ab8-124\">Możesz też zaznaczyć dowolne C# wyrażenie zwracające wartość (w tym `null`) w nawiasach klamrowych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-124\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"46ab8-125\">Poniżej przedstawiono kilka przykładów z ciągu więcej interpolowane z innych typów danych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-125\">Let's try a few more interpolated string examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"46ab8-126\">Jest to środowisko programowania online w wersji zapoznawczej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-126\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"46ab8-127\">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-127\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"46ab8-128\">Obejmują różne typy danych</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-128\">Include different data types</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"46ab8-129\">W obszarze szybki start poprzedniej ciągu interpolowanym jest używany do wstawiania jeden ciąg wewnątrz innego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-129\">In the previous quick start, you used an interpolated string to insert one string inside of another.</span></span> <span data-ttu-id=\"46ab8-130\">Wyrażenie ciągu interpolowanym mogą być dowolnego typu danych, mimo że.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-130\">An interpolated string expression can be any data type, though.</span></span> <span data-ttu-id=\"46ab8-131\">Spróbujmy ciągu interpolowanym zawierającego wartości wiele typów danych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-131\">Let's try an interpolated string that has values of multiple data types.</span></span> \n\n<span data-ttu-id=\"46ab8-132\">Poniższy przykład zawiera interpolowanego wyrażenia z `Vegetable` obiektu, jest członkiem `Unit` wyliczenia, <xref:System.DateTime> wartości, a <xref:System.Decimal> wartość.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-132\">The following example includes interpolated expressions with a `Vegetable` object, a member of the `Unit` enumeration, a <xref:System.DateTime> value, and a <xref:System.Decimal> value.</span></span> <span data-ttu-id=\"46ab8-133\">Uruchom go w oknie interaktywnym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-133\">Run it in the interactive window.</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n<span data-ttu-id=\"46ab8-134\">Zwróć uwagę na jedno z wyrażeń interpolowane zawiera `item` obiektów w ciągu wynik, który jest wyświetlany w konsoli, a w tym przypadku ciągu \"oberżynowego\" jest umieszczona w ciągu wynik.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-134\">Note that one of the interpolated expressions includes the `item` object in the result string that's displayed to the console, and in this case the string \"eggplant\" is inserted into the result string.</span></span> <span data-ttu-id=\"46ab8-135\">To znaczy, ponieważ typ interpolowanego wyrażenia nie jest ciągiem, kompilator języka C# wykonuje następujące czynności:</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-135\">That's because, when the type of an interpolated expression is not a string, the C# compiler does the following:</span></span>\n\n- <span data-ttu-id=\"46ab8-136\">Jeśli jest interpolowanego wyrażenia `null`, interpolowane wyrażenie zwraca ciąg pusty (\"\", lub <xref:System.String.Empty?displayProperty=nameWithType>).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-136\">If the interpolated expression is `null`, the interpolated expression returns an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>).</span></span>\n\n- <span data-ttu-id=\"46ab8-137\">Jeśli interpolowanego wyrażenia nie jest `null`, `ToString` wywoływana jest metoda typu interpolowanego wyrażenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-137\">If the interpolated expression is not `null`, the `ToString` method of the type of the interpolated expression is called.</span></span> <span data-ttu-id=\"46ab8-138\">Można to sprawdzić przez komentowania limit definicji `Vegetable.ToString` metody w tym przykładzie, umieszczając symbol komentarza (`//`) przed nim.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-138\">You can test this by commenting out the definition of the `Vegetable.ToString` method in the example by putting a comment symbol (`//`) in front of it.</span></span> <span data-ttu-id=\"46ab8-139\">W danych wyjściowych, ciąg \"oberżynowego\" zostanie zastąpiony w pełni kwalifikowaną nazwę typu (przestrzeń nazw zdefiniowana przez REPL C#, wraz z nazwą typu), który jest domyślnym zachowaniem z <xref:System.Object.ToString?displayProperty=nameWithType> metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-139\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span>   \n\n<span data-ttu-id=\"46ab8-140\">W danych wyjściowych w tym przykładzie Data jest zbyt precyzyjna (cena oberżynowego nie różnią się zależnie od drugiego), a wartość ceny nie oznacza jednostkę waluty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-140\">In the output from this example, the date is too precise (the price of eggplant does not vary by the second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"46ab8-141\">W następnym kroku dowiesz się, jak rozwiązać te problemy kontrolując format ciągów zwrócony przez interpolowanego wyrażenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-141\">In the next step, you'll learn how to fix those issues by controlling the format of strings returned by interpolated expressions.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"46ab8-142\">Jest to środowisko programowania online w wersji zapoznawczej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-142\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"46ab8-143\">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-143\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"46ab8-144\">Formant formatowanie interpolowanego wyrażenia</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-144\">Control the formatting of interpolated expressions</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"46ab8-145\">W poprzedniej lekcji nieprawidłowo sformatowany dwa ciągi, które zostały wstawione do ciąg wyniku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-145\">In the previous lesson, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id=\"46ab8-146\">Jeden jest wartość daty i godziny, dla którego został właściwe tylko data.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-146\">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id=\"46ab8-147\">Drugi był cen, który nie poinformował jego jednostkę waluty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-147\">The second was a price that did not indicate its unit of currency.</span></span> <span data-ttu-id=\"46ab8-148\">Problemy z obu łatwych do adresu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-148\">Both issues are easy to address.</span></span> <span data-ttu-id=\"46ab8-149\">Interpolowanego wyrażenia mogą zawierać *ciągi formatujące* umożliwiające sterowanie formatowanie poszczególnych typów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-149\">Interpolated expressions can include *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id=\"46ab8-150\">Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby uwzględnić specyfikator formatu dla pól daty i cen, jak pokazano w następującym wierszu:</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-150\">Modify the call to `Console.WriteLine` from the previous example to include the format specifier for the date and price fields as shown in the following line:</span></span>\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\n<span data-ttu-id=\"46ab8-151\">Podaj ciąg formatu, używając interpolowanego wyrażenia dwukropek i ciąg formatu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-151\">You specify a format string by following the interpolated expression with a colon and the format string.</span></span> <span data-ttu-id=\"46ab8-152\">\"d\" jest [standardowa Data i godzina ciąg formatu](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) reprezentujący format daty krótkiej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-152\">\"d\" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id=\"46ab8-153\">\"C2\" jest [ciągu standardowego formatu liczbowego](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) reprezentujący liczbę jako wartość walutową z dwóch cyfr po punkcie dziesiętnym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-153\">\"C2\" is a  [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>\n\n<span data-ttu-id=\"46ab8-154\">Liczba typów w bibliotek .NET Standard obsługuje zestaw wstępnie zdefiniowanych ciągi formatów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-154\">A number of types in the .NET Standard libraries support a predefined set of format strings.</span></span> <span data-ttu-id=\"46ab8-155\">Obejmuje to wszystkie typy liczbowe oraz typy daty i godziny.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-155\">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id=\"46ab8-156\">Pełną listę typów, które obsługują ciągi formatów, zobacz [ciągi formatów i typy biblioteki klas .NET](../../standard/base-types/formatting-types.md#stringRef) w [typy formatowania w .NET](../../standard/base-types/formatting-types.md) artykułu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-156\">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span> <span data-ttu-id=\"46ab8-157\">Dowolny typ może obsługiwać zestaw ciągi formatów i można również tworzyć niestandardowych rozszerzeń formatowania, które zapewniają niestandardowe formatowanie dla istniejących typów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-157\">Any type can support a set of format strings, and you can also develop custom formatting extensions that provide custom formatting for existing types.</span></span> <span data-ttu-id=\"46ab8-158\">Aby uzyskać informacje dotyczące formatowania niestandardowego, zapewniając <xref:System.ICustomFormatter> wdrażania, zobacz [niestandardowe formatowanie ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) w [typy formatowania w .NET](../../standard/base-types/formatting-types.md) artykułu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-158\">For information on custom formatting by providing an <xref:System.ICustomFormatter> implementation, see [Custom Formatting with ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>\n\n<span data-ttu-id=\"46ab8-159\">Spróbuj zmodyfikować format ciągów w **Edytor .NET** aby zobaczyć, jak wpływają one na format daty i godziny oraz wartość liczbową.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-159\">Try modifying the the format strings in the **.NET Editor** to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id=\"46ab8-160\">Zmiana \"d\" `{date:d}` \"t\" (do wyświetlania na format godziny krótkiej), \"y\" (Aby wyświetlić rok i miesiąc), a \"yyyy\" (do wyświetlania roku w postaci czterech cyfr).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-160\">Change the \"d\" in `{date:d}` to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number).</span></span> <span data-ttu-id=\"46ab8-161\">Zmiana \"C2\" `{price:C2}` \"e\" (w notacji wykładniczej) i \"F3\" (dla wartość liczbową z trzech cyfr po punkcie dziesiętnym).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-161\">Change the \"C2\" in `{price:C2}` to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point).</span></span>\n\n<span data-ttu-id=\"46ab8-162\">Oprócz kontrolowanie formatowania, można też kontrolować pola szerokości i wyrównania ciągów zwrócony przez interpolowanego wyrażenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-162\">In addition to controlling formatting, you can also control the field width and alignment of the strings returned by an interpolated expression.</span></span> <span data-ttu-id=\"46ab8-163\">W następnym kroku dowiesz się, jak to zrobić.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-163\">In the next step, you'll learn how to do this.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"46ab8-164\">Jest to środowisko programowania online w wersji zapoznawczej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-164\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"46ab8-165\">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-165\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"46ab8-166\">Szerokość pola i wyrównanie interpolowanego wyrażenia</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-166\">Control the field width and alignment of interpolated expressions</span></span>"
  durationInMinutes: 6
  content: "<span data-ttu-id=\"46ab8-167\">Zwykle gdy długość ciągu zwróconego przez wyrażenie interpolowane znajduje się w ciągu wynik, ma bez spacji wiodących lub końcowych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-167\">Ordinarily, when the string returned by an interpolated expression is included in a result string, it has no leading or trailing spaces.</span></span> <span data-ttu-id=\"46ab8-168\">Szczególnie w przypadku wystąpienia, w których użytkownik pracuje z zestawu danych, interpolowanego wyrażenia pozwalają określić szerokość pola i jego wyrównania.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-168\">Particularly for instances in which you are working with a set of data, interpolated expressions let you specify a field width and its alignment.</span></span> <span data-ttu-id=\"46ab8-169\">Aby to sprawdzić, uruchom następujący kod.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-169\">To see this, run the following code.</span></span>\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n<span data-ttu-id=\"46ab8-170\">Nazwy elementów są wyrównane do lewej, a ich ilości są wyrównane do lewej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-170\">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id=\"46ab8-171\">Określ wyrównanie przez dodanie przecinka (\",\") po wyrażeniu i wyznaczające szerokości pola.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-171\">You specify the alignment by adding a comma (\",\") after the expression and designating the field width.</span></span> <span data-ttu-id=\"46ab8-172\">Jeśli szerokość pola jest dodatnia, pole jest wyrównany do prawej:</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-172\">If the field width is a positive number, the field is right-aligned:</span></span>\n\n```text\n{expression, width}\n```\n\n<span data-ttu-id=\"46ab8-173\">Jeśli szerokość pola jest liczbą ujemną, pole jest wyrównane do lewej:</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-173\">If the field width is a negative number, the field is left-aligned:</span></span>\n\n```text\n{expression, -width}\n```\n<span data-ttu-id=\"46ab8-174\">Spróbuj usunąć ujemna znaki z `{\"Item\",-25}` i `{item.Key,-25}` interpolowane wyrażeń i ponownie uruchomić przykład.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-174\">Try removing the negative signs from the `{\"Item\",-25}` and `{item.Key,-25}` interpolated expressions and run the example again.</span></span> <span data-ttu-id=\"46ab8-175\">Teraz, nazwa elementu jest wyrównany do prawej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-175\">This time, the item name is right-aligned.</span></span>\n\n<span data-ttu-id=\"46ab8-176\">Szerokość pola i ciąg formatu w jednym wyrażeniu interpolowane można łączyć.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-176\">You can combine a field width and a format string in a single interpolated expression.</span></span> <span data-ttu-id=\"46ab8-177\">Szerokość pola zostanie osiągnięty jako pierwszy, następuje dwukropek i ciąg formatu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-177\">The field width comes first, followed by a colon and the format string.</span></span> <span data-ttu-id=\"46ab8-178\">Spróbuj następujących prosty program, który wyświetla trzy ciągi sformatowane o szerokości zdefiniowanych pól.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-178\">Try the following simple program that displays three formatted strings with defined field widths.</span></span>\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"46ab8-179\">Jest to środowisko programowania online w wersji zapoznawczej.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-179\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"46ab8-180\">Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-180\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"46ab8-181\">Zakończono ciągi interpolowane szybki start.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-181\">You've completed the interpolated strings quick start.</span></span> \n\n<span data-ttu-id=\"46ab8-182\">Można kontynuować te Szybki Start na środowiska deweloperskiego lokalnego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-182\">You can continue these quick starts on your own local development environment.</span></span> <span data-ttu-id=\"46ab8-183\">Poznaj podstawy z [lokalne działania projektowe](local-environment.md) , a następnie wybierz szybki start.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-183\">Learn the basics of [local development](local-environment.md) and then pick a quick start.</span></span> <span data-ttu-id=\"46ab8-184\">Możesz spróbować tego samego wykonywania, przejście bezpośrednio do następnego szybki start lub uruchom ponownie z [numery w języku C#](numbers-in-csharp-local.md) Szybki Start.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-184\">You can try this same exercise, move directly to the next quick start, or start again with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"46ab8-185\">Dowiedz się więcej o pracy z ciągi interpolowane w [ciągi interpolowane](../language-reference/keywords/interpolated-strings.md) tematu w odwołanie w C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"46ab8-185\">You can learn more about working with interpolated strings in the [Interpolated Strings](../language-reference/keywords/interpolated-strings.md) topic in the C# Reference.</span></span>\0"
