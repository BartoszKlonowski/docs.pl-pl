### YamlMime:Tutorial
title: <span data-ttu-id="67e27-101">Interpolacja ciągów w języku C#</span><span class="sxs-lookup"><span data-stu-id="67e27-101">String interpolation in C#</span></span>
metadata:
  title: Interaktywny samouczek interpolacji ciągu dotyczący — Przewodniki Szybki Start języka C#
  description: W tym samouczku użyjesz przeglądarki do interakcyjne poznawanie funkcji interpolacji ciągu C#. Możesz pisać kod w języku C# i wyświetlić wyniki kompilacji i uruchomienia kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  ms.topic: quickstart
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="67e27-105">Kolekcje w języku C#</span><span class="sxs-lookup"><span data-stu-id="67e27-105">Collections in C#</span></span>
  ms.openlocfilehash: 07928406c9518990761ec9856eee713cb2b40ef7
  ms.sourcegitcommit: efff8f331fd9467f093f8ab8d23a203d6ecb5b60
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 09/01/2018
  ms.locfileid: "43417157"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="67e27-106">Ten przewodnik Szybki Start pokazano, jak używać [Interpolacja ciągów](../language-reference/tokens/interpolated.md) wstawiania wartości do pojedynczego ciągu.</span><span class="sxs-lookup"><span data-stu-id="67e27-106">This quickstart teaches you how to use [string interpolation](../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="67e27-107">Poznasz również sposób kontrolowania Reprezentacja tekstowa te wartości w ciągu wynikowym.</span><span class="sxs-lookup"><span data-stu-id="67e27-107">You also learn how to control text representations of those values in the result string.</span></span> <span data-ttu-id="67e27-108">Do pisania i uruchamiania kodu C# za pomocą przeglądarki i mogą natychmiast zobaczyć utworzone wyników.</span><span class="sxs-lookup"><span data-stu-id="67e27-108">You use your browser to write and run C# code and can immediately see the produced results.</span></span>
- title: <span data-ttu-id="67e27-109">Tworzenie ciągu interpolowanego</span><span class="sxs-lookup"><span data-stu-id="67e27-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"67e27-110\">Uruchom następujący kod w oknie interaktywnym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"67e27-111\">Aby to zrobić, należy wpisać kod w oknie interaktywnym (Zastąp `<name>` z Twoją nazwą) i wybierz **Uruchom**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-111\">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"67e27-112\">Po uruchomieniu kodu, **dane wyjściowe** wyświetla ciąg, z Twoim imieniem w powitaniu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-112\">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id=\"67e27-113\">Argument ciągu <xref:System.Console.WriteLine%2A> jest wywołanie metody *ciągiem interpolowanym*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-113\">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"67e27-114\">Jest to rodzaj szablonu, który umożliwia skonstruowanie pojedynczego ciągu (o nazwie *ciągiem wynikowym*) z ciągu obejmującego osadzony kod.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-114\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"67e27-115\">Ciągi interpolowane są szczególnie użyteczne do wstawiania wartości do ciągu lub łączenia (łączenie) kilka ciągów.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-115\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span> \n\n<span data-ttu-id=\"67e27-116\">W powyższym przykładzie zawiera dwa elementy, które muszą mieć każdy ciąg interpolowany:</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-116\">The example above contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"67e27-117\">Literał ciągu rozpoczynający się od `$` znak przed jego otwierającym znakiem cudzysłowu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-117\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"67e27-118\">Nie może być spacji między `$` symboli i znaku cudzysłowu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-118\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"67e27-119\">(Jeśli chcesz zobaczyć, co się stanie po wstawieniu odstępu, Wstaw go po `$` znak w oknie interaktywnym i uruchom zaktualizowany kod.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-119\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id=\"67e27-120\">Kompilator języka C# zgłosi błąd \"Nieoczekiwany znak '$'\".)</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-120\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"67e27-121\">Co najmniej jeden *wyrażeń interpolowanych*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-121\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"67e27-122\">Wyrażenie interpolowane jest wskazywane przez nawias klamrowy otwierający i zamykający (`{` i `}`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-122\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"67e27-123\">Możesz umieścić dowolne C# wyrażenie zwracające wartość (w tym `null`) wewnątrz nawiasów klamrowych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-123\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"67e27-124\">Wypróbujmy kilka dodatkowych przykładowych interpolacji ciągu z innymi typami danych.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-124\">Let's try a few more string interpolation examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"67e27-125\">To środowisko kodowania online jest w trybie podglądu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-125\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"67e27-126\">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-126\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="67e27-127">Uwzględnianie innych typów danych</span><span class="sxs-lookup"><span data-stu-id="67e27-127">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"67e27-128\">W poprzednim kroku Interpolacja ciągów jest używany do wstawienia jednego ciągu wewnątrz innego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-128\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"67e27-129\">Wynik wyrażenia interpolowanego może być dowolnego typu danych, mimo że.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-129\">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id=\"67e27-130\">Teraz zawierać wartości różnych typów danych w ciągu interpolowanym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-130\">Let's include values of various data types in an interpolated string.</span></span> \n\n<span data-ttu-id=\"67e27-131\">W poniższym przykładzie najpierw definiujemy [klasy](../programming-guide/classes-and-structs/classes.md) — typ danych `Vegetable` zawierający `Name` [właściwość](../properties.md) i `ToString` [metoda](../methods.md), który [zastępuje](../language-reference/keywords/override.md) zachowanie <xref:System.Object.ToString?displayProperty=nameWithType> metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-131\">In the following example, first, we define a [class](../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has the `Name` [property](../properties.md) and the `ToString` [method](../methods.md), which [overrides](../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"67e27-132\">[ `public` Modyfikator dostępu](../language-reference/keywords/public.md) sprawia, że tej metody jest dostępny dla dowolnego kodu klienta, można pobrać reprezentacji w postaci ciągu `Vegetable` wystąpienia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-132\">The [`public` access modifier](../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id=\"67e27-133\">W przykładzie `Vegetable.ToString` metoda zwraca wartość `Name` właściwości, który jest inicjowany w `Vegetable` [Konstruktor](../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-133\">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id=\"67e27-134\">Następnie tworzymy wystąpienie `Vegetable` przy użyciu [ `new` — słowo kluczowe](../language-reference/keywords/new-operator.md) i podając parametr name dla konstruktora `Vegetable`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-134\">Then we create an instance of the `Vegetable` class by using [`new` keyword](../language-reference/keywords/new-operator.md) and providing a name parameter for the constructor `Vegetable`.</span></span> <span data-ttu-id=\"67e27-135\">Na koniec dołączamy tego wystąpienia na ciąg interpolowany zawiera także <xref:System.DateTime> wartość <xref:System.Decimal> wartości i `Unit` [wyliczenie](../programming-guide/enumeration-types.md) wartość.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-135\">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id=\"67e27-136\">Uruchom poniższy kod w oknie interaktywnym:</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-136\">Run the following code in the interactive window:</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, kilogram, gram, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\n<span data-ttu-id=\"67e27-137\">Należy pamiętać, że wyrażenie interpolowane `item` w ciągu interpolowanym jest rozpoznawany jako tekst \"eggplant\" w ciągu wynikowym.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-137\">Note that the interpolated expression `item` in the interpolated string resolves to the text \"eggplant\" in the result string.</span></span> <span data-ttu-id=\"67e27-138\">To dlatego, gdy typ wyniku wyrażenia nie jest ciągiem, wynik jest tłumaczona na ciąg w następujący sposób:</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-138\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"67e27-139\">Jeśli wyrażenie interpolowane daje w wyniku `null`, ciąg pusty (\"\", lub <xref:System.String.Empty?displayProperty=nameWithType>) jest używany.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-139\">If the interpolated expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"67e27-140\">Jeśli wyrażenie interpolowane nie mają `null`, zazwyczaj `ToString` zostanie wywołana metoda typ wyniku.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-140\">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id=\"67e27-141\">Można to sprawdzić, aktualizując wykonania `Vegetable.ToString` metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-141\">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id=\"67e27-142\">Może nawet trzeba zaimplementować `ToString` metody, ponieważ każdy typ ma pewne implementacja tej metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-142\">You might not even need to implement the `ToString` method since every type has some implementation of this method.</span></span> <span data-ttu-id=\"67e27-143\">Aby to przetestować, przekształcić w komentarz definicję `Vegetable.ToString` metody w przykładzie (w tym celu należy umieścić symbol komentarza `//`, przed nim).</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-143\">To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it).</span></span> <span data-ttu-id=\"67e27-144\">W danych wyjściowych ciąg \"eggplant\" zastępuje pełni kwalifikowaną nazwę typu (przestrzenią nazw zdefiniowaną przez C# REPL wraz z nazwą typu), który jest domyślnym zachowaniem z <xref:System.Object.ToString?displayProperty=nameWithType> metody.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-144\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id=\"67e27-145\">Domyślne zachowanie `ToString` metodą wartość wyliczenia jest zwraca reprezentację ciągu wartości.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-145\">The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.</span></span>    \n\n<span data-ttu-id=\"67e27-146\">W danych wyjściowych z tego przykładu Data jest zbyt precyzyjna (cena eggplant nie zmienia się każda sekunda), a wartość ceny nie wskazuje jednostkę waluty.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-146\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"67e27-147\">W następnym kroku dowiesz się, jak rozwiązać te problemy, kontrolując format ciągów reprezentujących wyniki wyrażenia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-147\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"67e27-148\">To środowisko kodowania online jest w trybie podglądu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-148\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"67e27-149\">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-149\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="67e27-150">Kontrolowanie formatowania wyrażeń interpolowanych</span><span class="sxs-lookup"><span data-stu-id="67e27-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="67e27-151">W poprzednim kroku zostały wstawione dwa nie najlepiej sformatowane ciągi, do ciągu wynikowego.</span><span class="sxs-lookup"><span data-stu-id="67e27-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="67e27-152">Jedna była wartość daty i godziny, dla którego tylko data powinna mieć zastosowanie.</span><span class="sxs-lookup"><span data-stu-id="67e27-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="67e27-153">Drugim była cena, która nie wskazywała waluty.</span><span class="sxs-lookup"><span data-stu-id="67e27-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="67e27-154">Zarówno w przypadku problemów są łatwe do adresu.</span><span class="sxs-lookup"><span data-stu-id="67e27-154">Both issues are easy to address.</span></span> <span data-ttu-id="67e27-155">Interpolacja ciągów pozwala określić *ciągi formatujące* które kontrolują formatowanie poszczególnych typów.</span><span class="sxs-lookup"><span data-stu-id="67e27-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="67e27-156">Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby dołączyć ciągi formatu daty i ceny wyrażeń, jak pokazano w następującym wierszu:</span><span class="sxs-lookup"><span data-stu-id="67e27-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="67e27-157">Należy określić ciąg formatu, postępując zgodnie z wyrażenia interpolowanego z dwukropkiem (":") i ciąg formatu.</span><span class="sxs-lookup"><span data-stu-id="67e27-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="67e27-158">"d" jest [ciąg formatu standardowego daty i godziny](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) reprezentujący formatu daty krótkiej.</span><span class="sxs-lookup"><span data-stu-id="67e27-158">"d" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="67e27-159">"C2" to [standardowy Ciąg formatujący](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) reprezentujący liczbę jako wartość waluty z dwoma cyframi po separatorze dziesiętnym.</span><span class="sxs-lookup"><span data-stu-id="67e27-159">"C2" is a [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="67e27-160">Liczba typów w bibliotekach .NET obsługuje wstępnie zdefiniowany zestaw ciągów formatu.</span><span class="sxs-lookup"><span data-stu-id="67e27-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="67e27-161">Dotyczy to wszystkich typów liczbowych i typów daty i godziny.</span><span class="sxs-lookup"><span data-stu-id="67e27-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="67e27-162">Aby uzyskać pełną listę typów, które obsługują ciągi formatu, zobacz [ciągi formatu i typy biblioteki klas .NET](../../standard/base-types/formatting-types.md#stringRef) w [typy formatowania na platformie .NET](../../standard/base-types/formatting-types.md) artykułu.</span><span class="sxs-lookup"><span data-stu-id="67e27-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="67e27-163">Spróbuj zmodyfikować ciągi formatu w przykładzie, aby zobaczyć, jak wpływają na formatowanie daty i godziny oraz wartości liczbowej.</span><span class="sxs-lookup"><span data-stu-id="67e27-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="67e27-164">Zmień "d" w `{date:d}` na "t" (Aby wyświetlić krótki format daty), "y" (Aby wyświetlić rok i miesiąc) oraz "yyyy" (Aby wyświetlać rok jako liczbę czterocyfrową).</span><span class="sxs-lookup"><span data-stu-id="67e27-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="67e27-165">Zmień "C2" w `{price:C2}` "e" (notacja wykładnicza) oraz "F3" (wartość liczbową z trzema cyframi po separatorze dziesiętnym).</span><span class="sxs-lookup"><span data-stu-id="67e27-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="67e27-166">Poza kontrolowaniem formatowania możesz też kontrolować szerokość pola i wyrównanie sformatowanego ciągów, które znajdują się w ciągu wynikowym.</span><span class="sxs-lookup"><span data-stu-id="67e27-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="67e27-167">W następnym kroku dowiesz się, jak to zrobić.</span><span class="sxs-lookup"><span data-stu-id="67e27-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="67e27-168">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="67e27-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="67e27-169">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="67e27-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="67e27-170">Kontrolowanie szerokości pola i wyrównania wyrażeń interpolowanych</span><span class="sxs-lookup"><span data-stu-id="67e27-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="67e27-171">Zazwyczaj gdy wynikiem wyrażenia interpolowane jest sformatowany ciąg, ciąg znajduje się w ciągu wynikowym bez spacji wiodących albo końcowych.</span><span class="sxs-lookup"><span data-stu-id="67e27-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="67e27-172">Szczególnie podczas pracy z zestawem danych, można kontrolować szerokość pola i wyrównanie tekstu pozwala tworzyć bardziej czytelny dane wyjściowe.</span><span class="sxs-lookup"><span data-stu-id="67e27-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="67e27-173">Aby to zobaczyć, uruchom następujący kod:</span><span class="sxs-lookup"><span data-stu-id="67e27-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="67e27-174">Nazwy elementu są wyrównane do lewej, a ich ilości są wyrównane do prawej.</span><span class="sxs-lookup"><span data-stu-id="67e27-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="67e27-175">Wyrównanie określa się poprzez dodanie przecinka (",") po wyrażenie interpolowane i wyznaczające *minimalne* szerokości pola.</span><span class="sxs-lookup"><span data-stu-id="67e27-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="67e27-176">Jeśli określona wartość jest liczbą dodatnią, pole jest wyrównany do prawej.</span><span class="sxs-lookup"><span data-stu-id="67e27-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="67e27-177">Jeśli jest liczbą ujemną, pole jest wyrównany do lewej.</span><span class="sxs-lookup"><span data-stu-id="67e27-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="67e27-178">Spróbuj usunąć znaki ujemne z `{"Item",-25}` i `{item.Key,-25}` kodu i uruchomić przykładowy kod ponownie.</span><span class="sxs-lookup"><span data-stu-id="67e27-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="67e27-179">Tym razem nazwy elementu są wyrównane do prawej.</span><span class="sxs-lookup"><span data-stu-id="67e27-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="67e27-180">Możesz połączyć specyfikator wyrównania i ciąg formatu dla pojedynczego wyrażenia interpolowane.</span><span class="sxs-lookup"><span data-stu-id="67e27-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="67e27-181">Aby to zrobić, określ wyrównanie najpierw następuje dwukropek i ciąg formatu.</span><span class="sxs-lookup"><span data-stu-id="67e27-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="67e27-182">Wypróbuj poniższy kod, który wyświetla trzy sformatowane ciągi ze zdefiniowanymi szerokościami pól:</span><span class="sxs-lookup"><span data-stu-id="67e27-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="67e27-183">To środowisko kodowania online jest w trybie podglądu.</span><span class="sxs-lookup"><span data-stu-id="67e27-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="67e27-184">Jeśli napotkasz problemy, zgłoś je [w repozytorium dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="67e27-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: "<span data-ttu-id=\"67e27-185\">Ukończono Szybki Start interpolacji ciągu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-185\">You've completed the string interpolation quickstart.</span></span> \n\n<span data-ttu-id=\"67e27-186\">Te przewodniki Szybki Start możesz kontynuować we własnym środowisku programowania lokalnego.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-186\">You can continue these quickstarts in your own local development environment.</span></span> <span data-ttu-id=\"67e27-187\">Poznaj podstawy [rozwoju lokalnego](local-environment.md) a następnie wybierz Przewodnik Szybki Start.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-187\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"67e27-188\">Wypróbuj ten przewodnik Szybki Start w tej samej, przejść bezpośrednio do kolejnego przewodnika Szybki Start lub zacząć ponownie z [liczb w języku C#](numbers-in-csharp-local.md) Szybki Start.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-188\">You can try this same quickstart, move directly to the next quickstart, or start again with the [Numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"67e27-189\">Aby uzyskać więcej informacji, zobacz [Interpolacja ciągów](../language-reference/tokens/interpolated.md) tematu i [Interpolacja w języku C# ciągów](../tutorials/string-interpolation.md) samouczka.</span><span class=\"sxs-lookup\"><span data-stu-id=\"67e27-189\">For more information, see the [String interpolation](../language-reference/tokens/interpolated.md) topic and the [String interpolation in C#](../tutorials/string-interpolation.md) tutorial.</span></span>"
