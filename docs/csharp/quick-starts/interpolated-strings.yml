### YamlMime:Tutorial
title: Ciąg interpolacji w języku C#
metadata:
  title: Ciąg interpolacji interaktywnego samouczka — Przewodniki Szybki Start C#
  description: W tym samouczku umożliwia przeglądarkę interaktywnie Eksploruj funkcji interpolacji ciągu języka C#. Pisanie kodu C# i wyświetlić wyniki kompilowania i uruchamiania kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Kolekcje w języku C#
  ms.openlocfilehash: ac9c8488c787b1dc9b4fb60b18834d328faa4e83
  ms.sourcegitcommit: 88f251b08bf0718ce119f3d7302f514b74895038
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 05/10/2018
items:
- durationInMinutes: 2
  content: >
    Tego przewodnika Szybki Start zawiera wskazówki dotyczące używania [ciągu interpolacji](../language-reference/tokens/interpolated.md) do wstawienia wartości w jednym ciągu. Możesz również sposób kontrolowania Reprezentacja tekstowa tych wartości w ciągu wynik. Aby zapisać i uruchomić kod w języku C# za pomocą przeglądarki i można natychmiast zobaczyć wyniki utworzonych.
- title: Tworzenie ciągu interpolowanym
  durationInMinutes: 2
  content: "Uruchom poniższy kod w oknie interaktywnym. W tym celu wpisz kod w oknie interaktywnym (Zastąp `\\<name>` nazwą) i wybierz **Uruchom**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nPodczas uruchamiania kodu, **dane wyjściowe** wyświetla ciąg zawierający nazwę w pozdrowienie. Argument ciągu <xref:System.Console.WriteLine%2A> jest wywołanie metody *interpolowane ciąg*. Jest to rodzaj szablonu, który pozwala utworzyć jeden ciąg (o nazwie *powoduje ciąg*) z ciągu, który zawiera osadzony kod. Ciągi interpolowane są szczególnie użyteczne w przypadku wstawiania wartości na ciąg lub łączenie (łączenie) kilku ciągów. \n\nW powyższym przykładzie zawiera dwa elementy, które muszą mieć co ciągu interpolowanym: \n\n- Literał ciągu rozpoczynający się od `$` znak przed jego otwierania przez cudzysłów znaków. Nie może być odstępów między `$` symboli i znaku cudzysłowu. (Jeśli chcesz zobaczyć co się stanie w przypadku obejmują jeden, Wstaw spację po `$` znak w oknie interaktywnym i uruchom zaktualizowanego kodu. Kompilator języka C# narzeka, \"Nieoczekiwany znak\"$\"\".) \n\n- Co najmniej jeden *interpolowane wyrażenia*. Wskazuje wyrażenie interpolowane otwierający i zamykający nawias klamrowy (`{` i `}`). Możesz też zaznaczyć dowolne C# wyrażenie zwracające wartość (w tym `null`) w nawiasach klamrowych. \n\nPoniżej przedstawiono kilka innych przykładów interpolacji ciągu z innych typów danych.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: Obejmują różne typy danych
  durationInMinutes: 5
  content: "W poprzednim kroku interpolacji ciąg jest używany do wstawiania jeden ciąg wewnątrz innego. Wynik wyrażenia interpolowane może być jednak każdego typu danych. Załóżmy obejmują wartości różnych typów danych w ciągu interpolowanym. \n\nW poniższym przykładzie najpierw definiujemy niestandardowego typu danych `Vegetable` mający `Name` [właściwości](../properties.md) i `ToString` metody. Kod klienta można użyć tej metody można uzyskać reprezentację ciągu `Vegetable` wystąpienia. W przykładzie `Vegetable.ToString` metoda zwraca wartość `Name` właściwość, która została zainicjowana w `Vegetable` Konstruktor: `Vegetable(string name) => Name = name;`. Następnie utwórz wystąpienie `Vegetable` typu przy użyciu `new` — słowo kluczowe i podając nazwę parametru konstruktora `Vegetable`. Na koniec przeprowadzamy takim wystąpieniu w ciągu interpolowanym zawierającej również <xref:System.DateTime> wartość, <xref:System.Decimal> wartości i `Unit` [wyliczenie](../programming-guide/enumeration-types.md) wartość. W oknie interaktywnym, uruchom następujący kod:\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, pound, ounce, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\nNależy pamiętać, że interpolowanego wyrażenia `item` w ciągu interpolowanym jest rozpoznawana jako tekst \"oberżynowego\" w ciągu wynik. Wynika to, gdy typ wyniku wyrażenia nie jest ciągiem, wynik został rozwiązany na ciąg w następujący sposób:\n\n- Jeśli interpolowanego wyrażenia `null`, ciąg pusty (\"\", lub <xref:System.String.Empty?displayProperty=nameWithType>) jest używany.\n\n- Jeśli interpolowanego wyrażenia nie być `null`, zwykle `ToString` wywoływana jest metoda typu wyniku. Można to sprawdzić, aktualizując wykonania `Vegetable.ToString` metody. Być może nawet nie implementuje `ToString` metody, ponieważ niektóre implementacja tej metody ma wszystkie typy danych języka C#. Aby sprawdzić, czy, w komentarz definicję `Vegetable.ToString` metody w tym przykładzie (w tym celu umieść symbol komentarza `//` przed nim). W danych wyjściowych, ciąg \"oberżynowego\" zostanie zastąpiony w pełni kwalifikowaną nazwę typu (przestrzeń nazw zdefiniowana przez REPL C#, wraz z nazwą typu), który jest domyślnym zachowaniem z <xref:System.Object.ToString?displayProperty=nameWithType> metody. Domyślne zachowanie `ToString` metody dla typu wyliczenia jest zwraca reprezentację ciągu wartość używana w definicji wyliczenia.   \n\nW danych wyjściowych w tym przykładzie Data jest zbyt precyzyjna (cena oberżynowego nie zmienia co sekundę), a wartość ceny nie oznacza jednostkę waluty. W następnym kroku dowiesz się, jak rozwiązać te problemy kontrolując formatu ciągu reprezentacje wyników wyrażenia.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: Formant formatowanie interpolowanego wyrażenia
  durationInMinutes: 5
  content: >
    W poprzednim kroku nieprawidłowo sformatowany dwa ciągi, które zostały wstawione do ciągu wynik. Jeden jest wartość daty i godziny, dla którego został właściwe tylko data. Drugi był cenę nie wskazywać jego jednostkę waluty. Problemy z obu łatwych do adresu. Ciąg interpolacji umożliwia określenie *ciągi formatujące* umożliwiające sterowanie formatowanie poszczególnych typów. Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby uwzględnić ciągi formatujące datę i cenę wyrażeń, jak pokazano w następującym wierszu:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    Podaj ciąg formatu, używając interpolowanego wyrażenia dwukropka (":"), a ciąg formatu. "d" jest [standardowa Data i godzina ciąg formatu](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) reprezentujący format daty krótkiej. "C2" jest [ciągu standardowego formatu liczbowego](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) reprezentujący liczbę jako wartość walutową z dwóch cyfr po punkcie dziesiętnym.


    Liczba typów w bibliotek .NET obsługuje zestaw wstępnie zdefiniowanych ciągi formatów. Obejmuje to wszystkie typy liczbowe oraz typy daty i godziny. Pełną listę typów, które obsługują ciągi formatów, zobacz [ciągi formatów i typy biblioteki klas .NET](../../standard/base-types/formatting-types.md#stringRef) w [typy formatowania w .NET](../../standard/base-types/formatting-types.md) artykułu.


    Spróbuj zmodyfikować ciągi formatów w przykładzie, aby zobaczyć, jak wpływają one na format daty i godziny oraz wartość liczbową. Zmiana "d" `{date:d}` "t" (do wyświetlania na format godziny krótkiej), "y" (Aby wyświetlić rok i miesiąc), a "yyyy" (do wyświetlania roku w postaci czterech cyfr). Zmiana "C2" `{price:C2}` "e" (w notacji wykładniczej) i "F3" (dla wartość liczbową z trzech cyfr po punkcie dziesiętnym).


    Oprócz kontrolowanie formatowania, można też kontrolować szerokość pola i wyrównanie sformatowany ciągów, które znajdują się w ciągu wynik. W następnym kroku dowiesz się, jak to zrobić.


    > [!NOTE]

    > Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).
- title: Szerokość pola i wyrównanie interpolowanego wyrażenia
  durationInMinutes: 6
  content: >
    Zwykle podczas formatowania wynik wyrażenia interpolowane na ciąg, ten ciąg znajduje się w ciągu wynik bez początkowe lub końcowe spacje. Szczególnie podczas pracy z zestawem danych, możliwość kontrolowania szerokość pola i pomaga wyrównanie tekstu, aby wygenerować bardziej czytelny dane wyjściowe. Aby to sprawdzić, uruchom następujący kod:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Nazwy elementów są wyrównane do lewej, a ich ilości są wyrównane do lewej. Określ wyrównanie przez dodanie przecinka (",") po interpolowanego wyrażenia i wyznaczające *minimalna* szerokości pola. Jeśli określona wartość jest liczbą dodatnią, to pole jest wyrównany do prawej. Jeśli jest liczbą ujemną, to pole jest wyrównane do lewej.


    Spróbuj usunąć ujemna znaki z `{"Item",-25}` i `{item.Key,-25}` kodu i ponownie uruchomić przykład. Teraz, nazwy elementów jest wyrównany do prawej.


    Specyfikator wyrównania i ciągu formatu dla pojedynczego wyrażenia interpolowane można łączyć. W tym celu Określ wyrównanie najpierw następuje dwukropek i ciąg formatu. Wykonaj następujący kod, który zawiera trzy ciągi sformatowane o szerokości zdefiniowanych pól:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).
- content: "Zakończono szybkiego startu interpolacji ciągu. \n\nTe przewodniki Szybki Start można kontynuować w środowisku projektowania lokalnego. Poznaj podstawy z [lokalne działania projektowe](local-environment.md) , a następnie wybierz Szybki Start. Możesz spróbować tego samego typu Szybki Start, bezpośrednie przejście do następnej procedury szybkiego startu lub uruchom ponownie z [numery w języku C#](numbers-in-csharp-local.md) Szybki Start.\n\nAby uzyskać więcej informacji, zobacz [ciągu interpolacji](../language-reference/tokens/interpolated.md) tematu i [ciągu interpolacji w języku C#](../tutorials/string-interpolation.md) samouczka."
