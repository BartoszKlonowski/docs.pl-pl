### YamlMime:Tutorial
title: Ciągi interpolowane w języku C#
metadata:
  title: Ciągi interpolowane interaktywnego samouczka — Przewodniki Szybki Start C#
  description: W tym samouczku użyjesz przeglądarki interakcyjnie korzystać z funkcji ciągu interpolowanym C#. Pisanie kodu C# i wyświetlić wyniki kompilowania i uruchamiania kodu bezpośrednio w przeglądarce.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: Kolekcje w języku C#
  ms.openlocfilehash: 7e1de34c9075826a6fcb6bf71cb01bfbd5c215ca
  ms.sourcegitcommit: 935d5267c44f9bce801468ef95f44572f1417e8c
  ms.translationtype: MT
  ms.contentlocale: pl-PL
  ms.lasthandoff: 03/28/2018
items:
- durationInMinutes: 2
  content: >
    Ta opcja szybkiego startu uczy sposób użycia ciągi interpolowane w języku C# do wstawienia wartości do ciągu wyjściowego pojedynczego interaktywnie. Pisanie kodu C# za pomocą przeglądarki i można natychmiast zobaczyć wyniki kompilowania i uruchamiania kodu. Procedury szybkiego startu zawiera szereg lekcje, które ciągów, wstawienia wartości do ciągów i sformatować te wartości na różne sposoby.
- title: Tworzenie ciągu interpolowanym
  durationInMinutes: 2
  content: "Uruchom poniższy kod w oknie interaktywnym. W tym celu wpisz następujący blok kodu w oknie interaktywnym (Zastąp \"\\<name >\" nazwą) i kliknij przycisk **Uruchom** przycisk:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nPo uruchomieniu program wyświetla jeden ciąg zawierający nazwę w pozdrowienie. Ciąg zawarty w <xref:System.Console.WriteLine%2A> jest wywołanie metody *interpolowane ciąg*. Jest to rodzaj szablonu, który pozwala utworzyć jeden ciąg (o nazwie *powoduje ciąg*) z ciągu, który zawiera osadzony kod. Ciągi interpolowane są szczególnie użyteczne w przypadku wstawiania wartości w ciągu lub ciągi łączenie (łączenie). \n\nTen prosty przykład zawiera dwa elementy, które muszą mieć co ciągu interpolowanym: \n\n- Literał ciągu rozpoczynający się od `$` znak przed jego otwierania przez cudzysłów znaków. Nie może być odstępów między `$` symboli i znaku cudzysłowu. (Jeśli chcesz zobaczyć co się stanie w przypadku obejmują jeden, Wstaw spację po `$` znak w oknie interaktywnym, a następnie kliknij przycisk **Uruchom** przycisku. Kompilator języka C# narzeka, \"Nieoczekiwany znak\"$\"\".) \n\n- Co najmniej jeden *interpolowane wyrażenia*. Wskazuje wyrażenie interpolowane otwierający i zamykający nawias klamrowy (`{` i `}`). Możesz też zaznaczyć dowolne C# wyrażenie zwracające wartość (w tym `null`) w nawiasach klamrowych. \n\nPoniżej przedstawiono kilka przykładów z ciągu więcej interpolowane z innych typów danych.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: Obejmują różne typy danych
  durationInMinutes: 3
  content: "W poprzedniej procedury szybkiego startu ciągu interpolowanym jest używany do wstawiania jeden ciąg wewnątrz innego. Wyrażenie ciągu interpolowanym mogą być dowolnego typu danych, mimo że. Spróbujmy ciągu interpolowanym zawierającego wartości wiele typów danych. \n\nPoniższy przykład zawiera interpolowanego wyrażenia z `Vegetable` obiektu, jest członkiem `Unit` wyliczenia, <xref:System.DateTime> wartości, a <xref:System.Decimal> wartość. Uruchom go w oknie interaktywnym.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nZwróć uwagę na jedno z wyrażeń interpolowane zawiera `item` obiektów w ciągu wynik, który jest wyświetlany w konsoli, a w tym przypadku ciągu \"oberżynowego\" jest umieszczona w ciągu wynik. To znaczy, ponieważ typ interpolowanego wyrażenia nie jest ciągiem, kompilator języka C# wykonuje następujące czynności:\n\n- Jeśli jest interpolowanego wyrażenia `null`, interpolowane wyrażenie zwraca ciąg pusty (\"\", lub <xref:System.String.Empty?displayProperty=nameWithType>).\n\n- Jeśli interpolowanego wyrażenia nie jest `null`, `ToString` wywoływana jest metoda typu interpolowanego wyrażenia. Można to sprawdzić przez komentowania limit definicji `Vegetable.ToString` metody w tym przykładzie, umieszczając symbol komentarza (`//`) przed nim. W danych wyjściowych, ciąg \"oberżynowego\" zostanie zastąpiony w pełni kwalifikowaną nazwę typu (przestrzeń nazw zdefiniowana przez REPL C#, wraz z nazwą typu), który jest domyślnym zachowaniem z <xref:System.Object.ToString?displayProperty=nameWithType> metody.   \n\nW danych wyjściowych w tym przykładzie Data jest zbyt precyzyjna (cena oberżynowego nie różnią się zależnie od drugiego), a wartość ceny nie oznacza jednostkę waluty. W następnym kroku dowiesz się, jak rozwiązać te problemy kontrolując format ciągów zwrócony przez interpolowanego wyrażenia.\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- title: Formant formatowanie interpolowanego wyrażenia
  durationInMinutes: 5
  content: >
    W poprzedniej lekcji nieprawidłowo sformatowany dwa ciągi, które zostały wstawione do ciąg wyniku. Jeden jest wartość daty i godziny, dla którego został właściwe tylko data. Drugi był cen, który nie poinformował jego jednostkę waluty. Problemy z obu łatwych do adresu. Interpolowanego wyrażenia mogą zawierać *ciągi formatujące* umożliwiające sterowanie formatowanie poszczególnych typów. Zmodyfikuj wywołanie `Console.WriteLine` z poprzedniego przykładu, aby uwzględnić specyfikator formatu dla pól daty i cen, jak pokazano w następującym wierszu:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    Podaj ciąg formatu, używając interpolowanego wyrażenia dwukropek i ciąg formatu. "d" jest [standardowa Data i godzina ciąg formatu](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) reprezentujący format daty krótkiej. "C2" jest [ciągu standardowego formatu liczbowego](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) reprezentujący liczbę jako wartość walutową z dwóch cyfr po punkcie dziesiętnym.


    Liczba typów w bibliotek .NET Standard obsługuje zestaw wstępnie zdefiniowanych ciągi formatów. Obejmuje to wszystkie typy liczbowe oraz typy daty i godziny. Pełną listę typów, które obsługują ciągi formatów, zobacz [ciągi formatów i typy biblioteki klas .NET](../../standard/base-types/formatting-types.md#stringRef) w [typy formatowania w .NET](../../standard/base-types/formatting-types.md) artykułu. Dowolny typ może obsługiwać zestaw ciągi formatów i można również tworzyć niestandardowych rozszerzeń formatowania, które zapewniają niestandardowe formatowanie dla istniejących typów. Aby uzyskać informacje dotyczące formatowania niestandardowego, zapewniając <xref:System.ICustomFormatter> wdrażania, zobacz [niestandardowe formatowanie ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) w [typy formatowania w .NET](../../standard/base-types/formatting-types.md) artykułu.


    Spróbuj zmodyfikować ciągów formatu w **Edytor .NET** aby zobaczyć, jak wpływają one na format daty i godziny oraz wartość liczbową. Zmiana "d" `{date:d}` "t" (do wyświetlania na format godziny krótkiej), "y" (Aby wyświetlić rok i miesiąc), a "yyyy" (do wyświetlania roku w postaci czterech cyfr). Zmiana "C2" `{price:C2}` "e" (w notacji wykładniczej) i "F3" (dla wartość liczbową z trzech cyfr po punkcie dziesiętnym).


    Oprócz kontrolowanie formatowania, można też kontrolować pola szerokości i wyrównania ciągów zwrócony przez interpolowanego wyrażenia. W następnym kroku dowiesz się, jak to zrobić.


    > [!NOTE]

    > Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).
- title: Szerokość pola i wyrównanie interpolowanego wyrażenia
  durationInMinutes: 6
  content: "Zwykle gdy długość ciągu zwróconego przez wyrażenie interpolowane znajduje się w ciągu wynik, ma bez spacji wiodących lub końcowych. Szczególnie w przypadku wystąpienia, w których użytkownik pracuje z zestawu danych, interpolowanego wyrażenia pozwalają określić szerokość pola i jego wyrównania. Aby to sprawdzić, uruchom następujący kod.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nNazwy elementów są wyrównane do lewej, a ich ilości są wyrównane do lewej. Określ wyrównanie przez dodanie przecinka (\",\") po wyrażeniu i wyznaczające szerokości pola. Jeśli szerokość pola jest dodatnia, pole jest wyrównany do prawej:\n\n```text\n{expression, width}\n```\n\nJeśli szerokość pola jest liczbą ujemną, pole jest wyrównane do lewej:\n\n```text\n{expression, -width}\n```\nSpróbuj usunąć ujemna znaki z `{\"Item\",-25}` i `{item.Key,-25}` interpolowane wyrażeń i ponownie uruchomić przykład. Teraz, nazwa elementu jest wyrównany do prawej.\n\nSzerokość pola i ciąg formatu w jednym wyrażeniu interpolowane można łączyć. Szerokość pola zostanie osiągnięty jako pierwszy, następuje dwukropek i ciąg formatu. Spróbuj następujących prosty program, który wyświetla trzy ciągi sformatowane o szerokości zdefiniowanych pól.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Jest to środowisko programowania online w wersji zapoznawczej. Jeśli wystąpią problemy, zgłoś je [w repozytorium dotnet/spróbuj](https://github.com/dotnet/try/issues).\n"
- content: "Zakończono ciągi interpolowane — Szybki Start. \n\nTe przewodniki Szybki Start można kontynuować na środowiska deweloperskiego lokalnego. Poznaj podstawy z [lokalne działania projektowe](local-environment.md) , a następnie wybierz Szybki Start. Możesz spróbować tego samego wykonywania, bezpośrednie przejście do następnej procedury szybkiego startu lub uruchom ponownie z [numery w języku C#](numbers-in-csharp-local.md) Szybki Start.\n\nDowiedz się więcej o ciągi interpolowane w [ciągu interpolacji](../language-reference/tokens/interpolated.md) tematu w odwołanie w C#."
